#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IdentityPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PacketStruct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IdentityPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IdentityPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IdentityPacket_2eproto;
namespace Protocol {
class C2S_CreateCharacter;
struct C2S_CreateCharacterDefaultTypeInternal;
extern C2S_CreateCharacterDefaultTypeInternal _C2S_CreateCharacter_default_instance_;
class C2S_DeleteCharacter;
struct C2S_DeleteCharacterDefaultTypeInternal;
extern C2S_DeleteCharacterDefaultTypeInternal _C2S_DeleteCharacter_default_instance_;
class C2S_EmailVerified;
struct C2S_EmailVerifiedDefaultTypeInternal;
extern C2S_EmailVerifiedDefaultTypeInternal _C2S_EmailVerified_default_instance_;
class C2S_EnterIdentityServer;
struct C2S_EnterIdentityServerDefaultTypeInternal;
extern C2S_EnterIdentityServerDefaultTypeInternal _C2S_EnterIdentityServer_default_instance_;
class C2S_LeaveIdentityServer;
struct C2S_LeaveIdentityServerDefaultTypeInternal;
extern C2S_LeaveIdentityServerDefaultTypeInternal _C2S_LeaveIdentityServer_default_instance_;
class C2S_LoadCharacters;
struct C2S_LoadCharactersDefaultTypeInternal;
extern C2S_LoadCharactersDefaultTypeInternal _C2S_LoadCharacters_default_instance_;
class C2S_LoadServer;
struct C2S_LoadServerDefaultTypeInternal;
extern C2S_LoadServerDefaultTypeInternal _C2S_LoadServer_default_instance_;
class C2S_SelectServer;
struct C2S_SelectServerDefaultTypeInternal;
extern C2S_SelectServerDefaultTypeInternal _C2S_SelectServer_default_instance_;
class C2S_Singin;
struct C2S_SinginDefaultTypeInternal;
extern C2S_SinginDefaultTypeInternal _C2S_Singin_default_instance_;
class C2S_Singup;
struct C2S_SingupDefaultTypeInternal;
extern C2S_SingupDefaultTypeInternal _C2S_Singup_default_instance_;
class C2S_StartGame;
struct C2S_StartGameDefaultTypeInternal;
extern C2S_StartGameDefaultTypeInternal _C2S_StartGame_default_instance_;
class S2C_CreateCharacter;
struct S2C_CreateCharacterDefaultTypeInternal;
extern S2C_CreateCharacterDefaultTypeInternal _S2C_CreateCharacter_default_instance_;
class S2C_DeleteCharacter;
struct S2C_DeleteCharacterDefaultTypeInternal;
extern S2C_DeleteCharacterDefaultTypeInternal _S2C_DeleteCharacter_default_instance_;
class S2C_EmailVerified;
struct S2C_EmailVerifiedDefaultTypeInternal;
extern S2C_EmailVerifiedDefaultTypeInternal _S2C_EmailVerified_default_instance_;
class S2C_EnterIdentityServer;
struct S2C_EnterIdentityServerDefaultTypeInternal;
extern S2C_EnterIdentityServerDefaultTypeInternal _S2C_EnterIdentityServer_default_instance_;
class S2C_LeaveIdentityServer;
struct S2C_LeaveIdentityServerDefaultTypeInternal;
extern S2C_LeaveIdentityServerDefaultTypeInternal _S2C_LeaveIdentityServer_default_instance_;
class S2C_LoadCharacters;
struct S2C_LoadCharactersDefaultTypeInternal;
extern S2C_LoadCharactersDefaultTypeInternal _S2C_LoadCharacters_default_instance_;
class S2C_LoadServer;
struct S2C_LoadServerDefaultTypeInternal;
extern S2C_LoadServerDefaultTypeInternal _S2C_LoadServer_default_instance_;
class S2C_SelectServer;
struct S2C_SelectServerDefaultTypeInternal;
extern S2C_SelectServerDefaultTypeInternal _S2C_SelectServer_default_instance_;
class S2C_Singin;
struct S2C_SinginDefaultTypeInternal;
extern S2C_SinginDefaultTypeInternal _S2C_Singin_default_instance_;
class S2C_Singup;
struct S2C_SingupDefaultTypeInternal;
extern S2C_SingupDefaultTypeInternal _S2C_Singup_default_instance_;
class S2C_StartGame;
struct S2C_StartGameDefaultTypeInternal;
extern S2C_StartGameDefaultTypeInternal _S2C_StartGame_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_CreateCharacter>(Arena*);
template<> ::Protocol::C2S_DeleteCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_DeleteCharacter>(Arena*);
template<> ::Protocol::C2S_EmailVerified* Arena::CreateMaybeMessage<::Protocol::C2S_EmailVerified>(Arena*);
template<> ::Protocol::C2S_EnterIdentityServer* Arena::CreateMaybeMessage<::Protocol::C2S_EnterIdentityServer>(Arena*);
template<> ::Protocol::C2S_LeaveIdentityServer* Arena::CreateMaybeMessage<::Protocol::C2S_LeaveIdentityServer>(Arena*);
template<> ::Protocol::C2S_LoadCharacters* Arena::CreateMaybeMessage<::Protocol::C2S_LoadCharacters>(Arena*);
template<> ::Protocol::C2S_LoadServer* Arena::CreateMaybeMessage<::Protocol::C2S_LoadServer>(Arena*);
template<> ::Protocol::C2S_SelectServer* Arena::CreateMaybeMessage<::Protocol::C2S_SelectServer>(Arena*);
template<> ::Protocol::C2S_Singin* Arena::CreateMaybeMessage<::Protocol::C2S_Singin>(Arena*);
template<> ::Protocol::C2S_Singup* Arena::CreateMaybeMessage<::Protocol::C2S_Singup>(Arena*);
template<> ::Protocol::C2S_StartGame* Arena::CreateMaybeMessage<::Protocol::C2S_StartGame>(Arena*);
template<> ::Protocol::S2C_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_CreateCharacter>(Arena*);
template<> ::Protocol::S2C_DeleteCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_DeleteCharacter>(Arena*);
template<> ::Protocol::S2C_EmailVerified* Arena::CreateMaybeMessage<::Protocol::S2C_EmailVerified>(Arena*);
template<> ::Protocol::S2C_EnterIdentityServer* Arena::CreateMaybeMessage<::Protocol::S2C_EnterIdentityServer>(Arena*);
template<> ::Protocol::S2C_LeaveIdentityServer* Arena::CreateMaybeMessage<::Protocol::S2C_LeaveIdentityServer>(Arena*);
template<> ::Protocol::S2C_LoadCharacters* Arena::CreateMaybeMessage<::Protocol::S2C_LoadCharacters>(Arena*);
template<> ::Protocol::S2C_LoadServer* Arena::CreateMaybeMessage<::Protocol::S2C_LoadServer>(Arena*);
template<> ::Protocol::S2C_SelectServer* Arena::CreateMaybeMessage<::Protocol::S2C_SelectServer>(Arena*);
template<> ::Protocol::S2C_Singin* Arena::CreateMaybeMessage<::Protocol::S2C_Singin>(Arena*);
template<> ::Protocol::S2C_Singup* Arena::CreateMaybeMessage<::Protocol::S2C_Singup>(Arena*);
template<> ::Protocol::S2C_StartGame* Arena::CreateMaybeMessage<::Protocol::S2C_StartGame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2S_EnterIdentityServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_EnterIdentityServer) */ {
 public:
  inline C2S_EnterIdentityServer() : C2S_EnterIdentityServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_EnterIdentityServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EnterIdentityServer(const C2S_EnterIdentityServer& from);
  C2S_EnterIdentityServer(C2S_EnterIdentityServer&& from) noexcept
    : C2S_EnterIdentityServer() {
    *this = ::std::move(from);
  }

  inline C2S_EnterIdentityServer& operator=(const C2S_EnterIdentityServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EnterIdentityServer& operator=(C2S_EnterIdentityServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EnterIdentityServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EnterIdentityServer* internal_default_instance() {
    return reinterpret_cast<const C2S_EnterIdentityServer*>(
               &_C2S_EnterIdentityServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_EnterIdentityServer& a, C2S_EnterIdentityServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EnterIdentityServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EnterIdentityServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EnterIdentityServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EnterIdentityServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_EnterIdentityServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_EnterIdentityServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EnterIdentityServer";
  }
  protected:
  explicit C2S_EnterIdentityServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EnterIdentityServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterIdentityServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterIdentityServer) */ {
 public:
  inline S2C_EnterIdentityServer() : S2C_EnterIdentityServer(nullptr) {}
  ~S2C_EnterIdentityServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnterIdentityServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterIdentityServer(const S2C_EnterIdentityServer& from);
  S2C_EnterIdentityServer(S2C_EnterIdentityServer&& from) noexcept
    : S2C_EnterIdentityServer() {
    *this = ::std::move(from);
  }

  inline S2C_EnterIdentityServer& operator=(const S2C_EnterIdentityServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterIdentityServer& operator=(S2C_EnterIdentityServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterIdentityServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterIdentityServer* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterIdentityServer*>(
               &_S2C_EnterIdentityServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_EnterIdentityServer& a, S2C_EnterIdentityServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterIdentityServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterIdentityServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterIdentityServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterIdentityServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnterIdentityServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnterIdentityServer& from) {
    S2C_EnterIdentityServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnterIdentityServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterIdentityServer";
  }
  protected:
  explicit S2C_EnterIdentityServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterIdentityServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LeaveIdentityServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LeaveIdentityServer) */ {
 public:
  inline C2S_LeaveIdentityServer() : C2S_LeaveIdentityServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LeaveIdentityServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LeaveIdentityServer(const C2S_LeaveIdentityServer& from);
  C2S_LeaveIdentityServer(C2S_LeaveIdentityServer&& from) noexcept
    : C2S_LeaveIdentityServer() {
    *this = ::std::move(from);
  }

  inline C2S_LeaveIdentityServer& operator=(const C2S_LeaveIdentityServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LeaveIdentityServer& operator=(C2S_LeaveIdentityServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LeaveIdentityServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LeaveIdentityServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LeaveIdentityServer*>(
               &_C2S_LeaveIdentityServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_LeaveIdentityServer& a, C2S_LeaveIdentityServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LeaveIdentityServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LeaveIdentityServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LeaveIdentityServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LeaveIdentityServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LeaveIdentityServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LeaveIdentityServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LeaveIdentityServer";
  }
  protected:
  explicit C2S_LeaveIdentityServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LeaveIdentityServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeaveIdentityServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeaveIdentityServer) */ {
 public:
  inline S2C_LeaveIdentityServer() : S2C_LeaveIdentityServer(nullptr) {}
  ~S2C_LeaveIdentityServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LeaveIdentityServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeaveIdentityServer(const S2C_LeaveIdentityServer& from);
  S2C_LeaveIdentityServer(S2C_LeaveIdentityServer&& from) noexcept
    : S2C_LeaveIdentityServer() {
    *this = ::std::move(from);
  }

  inline S2C_LeaveIdentityServer& operator=(const S2C_LeaveIdentityServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeaveIdentityServer& operator=(S2C_LeaveIdentityServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeaveIdentityServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeaveIdentityServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LeaveIdentityServer*>(
               &_S2C_LeaveIdentityServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_LeaveIdentityServer& a, S2C_LeaveIdentityServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeaveIdentityServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeaveIdentityServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeaveIdentityServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeaveIdentityServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LeaveIdentityServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LeaveIdentityServer& from) {
    S2C_LeaveIdentityServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LeaveIdentityServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeaveIdentityServer";
  }
  protected:
  explicit S2C_LeaveIdentityServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeaveIdentityServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singin) */ {
 public:
  inline C2S_Singin() : C2S_Singin(nullptr) {}
  ~C2S_Singin() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singin(const C2S_Singin& from);
  C2S_Singin(C2S_Singin&& from) noexcept
    : C2S_Singin() {
    *this = ::std::move(from);
  }

  inline C2S_Singin& operator=(const C2S_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singin& operator=(C2S_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singin* internal_default_instance() {
    return reinterpret_cast<const C2S_Singin*>(
               &_C2S_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_Singin& a, C2S_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singin& from) {
    C2S_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singin";
  }
  protected:
  explicit C2S_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kUserPasswordFieldNumber = 3,
    kRemoteIdFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_password = 3;
  void clear_user_password();
  const std::string& user_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_password();
  PROTOBUF_NODISCARD std::string* release_user_password();
  void set_allocated_user_password(std::string* user_password);
  private:
  const std::string& _internal_user_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_password(const std::string& value);
  std::string* _internal_mutable_user_password();
  public:

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_password_;
    int64_t remote_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singin) */ {
 public:
  inline S2C_Singin() : S2C_Singin(nullptr) {}
  ~S2C_Singin() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singin(const S2C_Singin& from);
  S2C_Singin(S2C_Singin&& from) noexcept
    : S2C_Singin() {
    *this = ::std::move(from);
  }

  inline S2C_Singin& operator=(const S2C_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singin& operator=(S2C_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singin* internal_default_instance() {
    return reinterpret_cast<const S2C_Singin*>(
               &_S2C_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_Singin& a, S2C_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singin& from) {
    S2C_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singin";
  }
  protected:
  explicit S2C_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 3,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 3;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singup) */ {
 public:
  inline C2S_Singup() : C2S_Singup(nullptr) {}
  ~C2S_Singup() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singup(const C2S_Singup& from);
  C2S_Singup(C2S_Singup&& from) noexcept
    : C2S_Singup() {
    *this = ::std::move(from);
  }

  inline C2S_Singup& operator=(const C2S_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singup& operator=(C2S_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singup* internal_default_instance() {
    return reinterpret_cast<const C2S_Singup*>(
               &_C2S_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C2S_Singup& a, C2S_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singup& from) {
    C2S_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singup";
  }
  protected:
  explicit C2S_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kUserPasswordFieldNumber = 3,
    kUserEmailFieldNumber = 4,
    kRemoteIdFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_password = 3;
  void clear_user_password();
  const std::string& user_password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_password();
  PROTOBUF_NODISCARD std::string* release_user_password();
  void set_allocated_user_password(std::string* user_password);
  private:
  const std::string& _internal_user_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_password(const std::string& value);
  std::string* _internal_mutable_user_password();
  public:

  // string user_email = 4;
  void clear_user_email();
  const std::string& user_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_email();
  PROTOBUF_NODISCARD std::string* release_user_email();
  void set_allocated_user_email(std::string* user_email);
  private:
  const std::string& _internal_user_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_email(const std::string& value);
  std::string* _internal_mutable_user_email();
  public:

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_email_;
    int64_t remote_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singup) */ {
 public:
  inline S2C_Singup() : S2C_Singup(nullptr) {}
  ~S2C_Singup() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singup(const S2C_Singup& from);
  S2C_Singup(S2C_Singup&& from) noexcept
    : S2C_Singup() {
    *this = ::std::move(from);
  }

  inline S2C_Singup& operator=(const S2C_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singup& operator=(S2C_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singup* internal_default_instance() {
    return reinterpret_cast<const S2C_Singup*>(
               &_S2C_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2C_Singup& a, S2C_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singup& from) {
    S2C_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singup";
  }
  protected:
  explicit S2C_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EmailVerified) */ {
 public:
  inline C2S_EmailVerified() : C2S_EmailVerified(nullptr) {}
  ~C2S_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EmailVerified(const C2S_EmailVerified& from);
  C2S_EmailVerified(C2S_EmailVerified&& from) noexcept
    : C2S_EmailVerified() {
    *this = ::std::move(from);
  }

  inline C2S_EmailVerified& operator=(const C2S_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EmailVerified& operator=(C2S_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const C2S_EmailVerified*>(
               &_C2S_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2S_EmailVerified& a, C2S_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EmailVerified& from) {
    C2S_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EmailVerified";
  }
  protected:
  explicit C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifiedCodeFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
  };
  // string verified_code = 2;
  void clear_verified_code();
  const std::string& verified_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verified_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verified_code();
  PROTOBUF_NODISCARD std::string* release_verified_code();
  void set_allocated_verified_code(std::string* verified_code);
  private:
  const std::string& _internal_verified_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verified_code(const std::string& value);
  std::string* _internal_mutable_verified_code();
  public:

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verified_code_;
    int64_t remote_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EmailVerified) */ {
 public:
  inline S2C_EmailVerified() : S2C_EmailVerified(nullptr) {}
  ~S2C_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EmailVerified(const S2C_EmailVerified& from);
  S2C_EmailVerified(S2C_EmailVerified&& from) noexcept
    : S2C_EmailVerified() {
    *this = ::std::move(from);
  }

  inline S2C_EmailVerified& operator=(const S2C_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EmailVerified& operator=(S2C_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const S2C_EmailVerified*>(
               &_S2C_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_EmailVerified& a, S2C_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EmailVerified& from) {
    S2C_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EmailVerified";
  }
  protected:
  explicit S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadServer) */ {
 public:
  inline C2S_LoadServer() : C2S_LoadServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LoadServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadServer(const C2S_LoadServer& from);
  C2S_LoadServer(C2S_LoadServer&& from) noexcept
    : C2S_LoadServer() {
    *this = ::std::move(from);
  }

  inline C2S_LoadServer& operator=(const C2S_LoadServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadServer& operator=(C2S_LoadServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadServer*>(
               &_C2S_LoadServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C2S_LoadServer& a, C2S_LoadServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LoadServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LoadServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadServer";
  }
  protected:
  explicit C2S_LoadServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadServer) */ {
 public:
  inline S2C_LoadServer() : S2C_LoadServer(nullptr) {}
  ~S2C_LoadServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadServer(const S2C_LoadServer& from);
  S2C_LoadServer(S2C_LoadServer&& from) noexcept
    : S2C_LoadServer() {
    *this = ::std::move(from);
  }

  inline S2C_LoadServer& operator=(const S2C_LoadServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadServer& operator=(S2C_LoadServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadServer*>(
               &_S2C_LoadServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S2C_LoadServer& a, S2C_LoadServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadServer& from) {
    S2C_LoadServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadServer";
  }
  protected:
  explicit S2C_LoadServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kStateFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // repeated int32 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;
  public:
  void clear_id();
  private:
  int32_t _internal_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_id() const;
  void _internal_add_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_id();
  public:
  int32_t id(int index) const;
  void set_id(int index, int32_t value);
  void add_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_id();

  // repeated bytes name = 2;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const void* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated float state = 3;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  private:
  float _internal_state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_state() const;
  void _internal_add_state(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_state();
  public:
  float state(int index) const;
  void set_state(int index, float value);
  void add_state(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_state();

  // repeated int32 count = 4;
  int count_size() const;
  private:
  int _internal_count_size() const;
  public:
  void clear_count();
  private:
  int32_t _internal_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_count() const;
  void _internal_add_count(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_count();
  public:
  int32_t count(int index) const;
  void set_count(int index, int32_t value);
  void add_count(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_count();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > id_;
    mutable std::atomic<int> _id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > state_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > count_;
    mutable std::atomic<int> _count_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_SelectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_SelectServer) */ {
 public:
  inline C2S_SelectServer() : C2S_SelectServer(nullptr) {}
  ~C2S_SelectServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_SelectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_SelectServer(const C2S_SelectServer& from);
  C2S_SelectServer(C2S_SelectServer&& from) noexcept
    : C2S_SelectServer() {
    *this = ::std::move(from);
  }

  inline C2S_SelectServer& operator=(const C2S_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_SelectServer& operator=(C2S_SelectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_SelectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_SelectServer* internal_default_instance() {
    return reinterpret_cast<const C2S_SelectServer*>(
               &_C2S_SelectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C2S_SelectServer& a, C2S_SelectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_SelectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_SelectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_SelectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_SelectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_SelectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_SelectServer& from) {
    C2S_SelectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_SelectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_SelectServer";
  }
  protected:
  explicit C2S_SelectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_SelectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_SelectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_SelectServer) */ {
 public:
  inline S2C_SelectServer() : S2C_SelectServer(nullptr) {}
  ~S2C_SelectServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_SelectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SelectServer(const S2C_SelectServer& from);
  S2C_SelectServer(S2C_SelectServer&& from) noexcept
    : S2C_SelectServer() {
    *this = ::std::move(from);
  }

  inline S2C_SelectServer& operator=(const S2C_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SelectServer& operator=(S2C_SelectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SelectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SelectServer* internal_default_instance() {
    return reinterpret_cast<const S2C_SelectServer*>(
               &_S2C_SelectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S2C_SelectServer& a, S2C_SelectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SelectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SelectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SelectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SelectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_SelectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_SelectServer& from) {
    S2C_SelectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_SelectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SelectServer";
  }
  protected:
  explicit S2C_SelectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SelectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_StartGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_StartGame) */ {
 public:
  inline C2S_StartGame() : C2S_StartGame(nullptr) {}
  ~C2S_StartGame() override;
  explicit PROTOBUF_CONSTEXPR C2S_StartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_StartGame(const C2S_StartGame& from);
  C2S_StartGame(C2S_StartGame&& from) noexcept
    : C2S_StartGame() {
    *this = ::std::move(from);
  }

  inline C2S_StartGame& operator=(const C2S_StartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_StartGame& operator=(C2S_StartGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_StartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_StartGame* internal_default_instance() {
    return reinterpret_cast<const C2S_StartGame*>(
               &_C2S_StartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C2S_StartGame& a, C2S_StartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_StartGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_StartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_StartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_StartGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_StartGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_StartGame& from) {
    C2S_StartGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_StartGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_StartGame";
  }
  protected:
  explicit C2S_StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kSeatFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 seat = 1;
  void clear_seat();
  int32_t seat() const;
  void set_seat(int32_t value);
  private:
  int32_t _internal_seat() const;
  void _internal_set_seat(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_StartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t seat_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_StartGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_StartGame) */ {
 public:
  inline S2C_StartGame() : S2C_StartGame(nullptr) {}
  ~S2C_StartGame() override;
  explicit PROTOBUF_CONSTEXPR S2C_StartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_StartGame(const S2C_StartGame& from);
  S2C_StartGame(S2C_StartGame&& from) noexcept
    : S2C_StartGame() {
    *this = ::std::move(from);
  }

  inline S2C_StartGame& operator=(const S2C_StartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_StartGame& operator=(S2C_StartGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_StartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_StartGame* internal_default_instance() {
    return reinterpret_cast<const S2C_StartGame*>(
               &_S2C_StartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S2C_StartGame& a, S2C_StartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_StartGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_StartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_StartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_StartGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_StartGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_StartGame& from) {
    S2C_StartGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_StartGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_StartGame";
  }
  protected:
  explicit S2C_StartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTravelLevelFieldNumber = 2,
    kIpFieldNumber = 3,
    kServerIdFieldNumber = 1,
    kPortFieldNumber = 4,
    kErrorFieldNumber = 5,
  };
  // bytes travel_level = 2;
  void clear_travel_level();
  const std::string& travel_level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_travel_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_travel_level();
  PROTOBUF_NODISCARD std::string* release_travel_level();
  void set_allocated_travel_level(std::string* travel_level);
  private:
  const std::string& _internal_travel_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_travel_level(const std::string& value);
  std::string* _internal_mutable_travel_level();
  public:

  // bytes ip = 3;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int32 port = 4;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 error = 5;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_StartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr travel_level_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t server_id_;
    int32_t port_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadCharacters final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadCharacters) */ {
 public:
  inline C2S_LoadCharacters() : C2S_LoadCharacters(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LoadCharacters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadCharacters(const C2S_LoadCharacters& from);
  C2S_LoadCharacters(C2S_LoadCharacters&& from) noexcept
    : C2S_LoadCharacters() {
    *this = ::std::move(from);
  }

  inline C2S_LoadCharacters& operator=(const C2S_LoadCharacters& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadCharacters& operator=(C2S_LoadCharacters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadCharacters& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadCharacters* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadCharacters*>(
               &_C2S_LoadCharacters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C2S_LoadCharacters& a, C2S_LoadCharacters& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadCharacters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadCharacters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadCharacters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadCharacters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LoadCharacters& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LoadCharacters& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadCharacters";
  }
  protected:
  explicit C2S_LoadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadCharacters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadCharacters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadCharacters) */ {
 public:
  inline S2C_LoadCharacters() : S2C_LoadCharacters(nullptr) {}
  ~S2C_LoadCharacters() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadCharacters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadCharacters(const S2C_LoadCharacters& from);
  S2C_LoadCharacters(S2C_LoadCharacters&& from) noexcept
    : S2C_LoadCharacters() {
    *this = ::std::move(from);
  }

  inline S2C_LoadCharacters& operator=(const S2C_LoadCharacters& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadCharacters& operator=(S2C_LoadCharacters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadCharacters& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadCharacters* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadCharacters*>(
               &_S2C_LoadCharacters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S2C_LoadCharacters& a, S2C_LoadCharacters& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadCharacters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadCharacters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadCharacters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadCharacters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadCharacters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadCharacters& from) {
    S2C_LoadCharacters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadCharacters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadCharacters";
  }
  protected:
  explicit S2C_LoadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCharacterDataFieldNumber = 2,
  };
  // repeated bytes name = 1;
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const void* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated .Protocol.SCharacterData character_data = 2;
  int character_data_size() const;
  private:
  int _internal_character_data_size() const;
  public:
  void clear_character_data();
  ::Protocol::SCharacterData* mutable_character_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >*
      mutable_character_data();
  private:
  const ::Protocol::SCharacterData& _internal_character_data(int index) const;
  ::Protocol::SCharacterData* _internal_add_character_data();
  public:
  const ::Protocol::SCharacterData& character_data(int index) const;
  ::Protocol::SCharacterData* add_character_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >&
      character_data() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadCharacters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData > character_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_CreateCharacter) */ {
 public:
  inline C2S_CreateCharacter() : C2S_CreateCharacter(nullptr) {}
  ~C2S_CreateCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CreateCharacter(const C2S_CreateCharacter& from);
  C2S_CreateCharacter(C2S_CreateCharacter&& from) noexcept
    : C2S_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_CreateCharacter& operator=(const C2S_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CreateCharacter& operator=(C2S_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_CreateCharacter*>(
               &_C2S_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C2S_CreateCharacter& a, C2S_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_CreateCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_CreateCharacter& from) {
    C2S_CreateCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CreateCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CreateCharacter";
  }
  protected:
  explicit C2S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterDataFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // .Protocol.SCharacterData character_data = 2;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::Protocol::SCharacterData& character_data() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_character_data();
  ::Protocol::SCharacterData* mutable_character_data();
  void set_allocated_character_data(::Protocol::SCharacterData* character_data);
  private:
  const ::Protocol::SCharacterData& _internal_character_data() const;
  ::Protocol::SCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::Protocol::SCharacterData* character_data);
  ::Protocol::SCharacterData* unsafe_arena_release_character_data();

  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SCharacterData* character_data_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CreateCharacter) */ {
 public:
  inline S2C_CreateCharacter() : S2C_CreateCharacter(nullptr) {}
  ~S2C_CreateCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CreateCharacter(const S2C_CreateCharacter& from);
  S2C_CreateCharacter(S2C_CreateCharacter&& from) noexcept
    : S2C_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_CreateCharacter& operator=(const S2C_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CreateCharacter& operator=(S2C_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_CreateCharacter*>(
               &_S2C_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S2C_CreateCharacter& a, S2C_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CreateCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_CreateCharacter& from) {
    S2C_CreateCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CreateCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CreateCharacter";
  }
  protected:
  explicit S2C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
  };
  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_DeleteCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_DeleteCharacter) */ {
 public:
  inline C2S_DeleteCharacter() : C2S_DeleteCharacter(nullptr) {}
  ~C2S_DeleteCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_DeleteCharacter(const C2S_DeleteCharacter& from);
  C2S_DeleteCharacter(C2S_DeleteCharacter&& from) noexcept
    : C2S_DeleteCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_DeleteCharacter& operator=(const C2S_DeleteCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_DeleteCharacter& operator=(C2S_DeleteCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_DeleteCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_DeleteCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_DeleteCharacter*>(
               &_C2S_DeleteCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C2S_DeleteCharacter& a, C2S_DeleteCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_DeleteCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_DeleteCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_DeleteCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_DeleteCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_DeleteCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_DeleteCharacter& from) {
    C2S_DeleteCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_DeleteCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_DeleteCharacter";
  }
  protected:
  explicit C2S_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_DeleteCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DeleteCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DeleteCharacter) */ {
 public:
  inline S2C_DeleteCharacter() : S2C_DeleteCharacter(nullptr) {}
  ~S2C_DeleteCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DeleteCharacter(const S2C_DeleteCharacter& from);
  S2C_DeleteCharacter(S2C_DeleteCharacter&& from) noexcept
    : S2C_DeleteCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_DeleteCharacter& operator=(const S2C_DeleteCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DeleteCharacter& operator=(S2C_DeleteCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DeleteCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DeleteCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_DeleteCharacter*>(
               &_S2C_DeleteCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S2C_DeleteCharacter& a, S2C_DeleteCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DeleteCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DeleteCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DeleteCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DeleteCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DeleteCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DeleteCharacter& from) {
    S2C_DeleteCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DeleteCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DeleteCharacter";
  }
  protected:
  explicit S2C_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DeleteCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_EnterIdentityServer

// -------------------------------------------------------------------

// S2C_EnterIdentityServer

// int64 remote_id = 1;
inline void S2C_EnterIdentityServer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_EnterIdentityServer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_EnterIdentityServer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterIdentityServer.remote_id)
  return _internal_remote_id();
}
inline void S2C_EnterIdentityServer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_EnterIdentityServer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterIdentityServer.remote_id)
}

// int32 error = 2;
inline void S2C_EnterIdentityServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EnterIdentityServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EnterIdentityServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterIdentityServer.error)
  return _internal_error();
}
inline void S2C_EnterIdentityServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EnterIdentityServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterIdentityServer.error)
}

// -------------------------------------------------------------------

// C2S_LeaveIdentityServer

// -------------------------------------------------------------------

// S2C_LeaveIdentityServer

// int64 remote_id = 1;
inline void S2C_LeaveIdentityServer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_LeaveIdentityServer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_LeaveIdentityServer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveIdentityServer.remote_id)
  return _internal_remote_id();
}
inline void S2C_LeaveIdentityServer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_LeaveIdentityServer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveIdentityServer.remote_id)
}

// int32 error = 2;
inline void S2C_LeaveIdentityServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LeaveIdentityServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LeaveIdentityServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveIdentityServer.error)
  return _internal_error();
}
inline void S2C_LeaveIdentityServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LeaveIdentityServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveIdentityServer.error)
}

// -------------------------------------------------------------------

// C2S_Singin

// int64 remote_id = 1;
inline void C2S_Singin::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t C2S_Singin::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t C2S_Singin::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.remote_id)
  return _internal_remote_id();
}
inline void C2S_Singin::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void C2S_Singin::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.remote_id)
}

// string user_id = 2;
inline void C2S_Singin::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_Singin::user_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.user_id)
}
inline std::string* C2S_Singin::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.user_id)
  return _s;
}
inline const std::string& C2S_Singin::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void C2S_Singin::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_user_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_Singin::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.user_id)
}

// string user_password = 3;
inline void C2S_Singin::clear_user_password() {
  _impl_.user_password_.ClearToEmpty();
}
inline const std::string& C2S_Singin::user_password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.user_password)
  return _internal_user_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_user_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.user_password)
}
inline std::string* C2S_Singin::mutable_user_password() {
  std::string* _s = _internal_mutable_user_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.user_password)
  return _s;
}
inline const std::string& C2S_Singin::_internal_user_password() const {
  return _impl_.user_password_.Get();
}
inline void C2S_Singin::_internal_set_user_password(const std::string& value) {
  
  _impl_.user_password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_user_password() {
  
  return _impl_.user_password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_user_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.user_password)
  return _impl_.user_password_.Release();
}
inline void C2S_Singin::set_allocated_user_password(std::string* user_password) {
  if (user_password != nullptr) {
    
  } else {
    
  }
  _impl_.user_password_.SetAllocated(user_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_password_.IsDefault()) {
    _impl_.user_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.user_password)
}

// -------------------------------------------------------------------

// S2C_Singin

// int64 remote_id = 1;
inline void S2C_Singin::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_Singin::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_Singin::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.remote_id)
  return _internal_remote_id();
}
inline void S2C_Singin::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_Singin::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.remote_id)
}

// string token = 2;
inline void S2C_Singin::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& S2C_Singin::token() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_Singin::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.token)
}
inline std::string* S2C_Singin::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_Singin.token)
  return _s;
}
inline const std::string& S2C_Singin::_internal_token() const {
  return _impl_.token_.Get();
}
inline void S2C_Singin::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_Singin::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_Singin::release_token() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_Singin.token)
  return _impl_.token_.Release();
}
inline void S2C_Singin::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_Singin.token)
}

// int32 error = 3;
inline void S2C_Singin::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singin::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singin::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.error)
  return _internal_error();
}
inline void S2C_Singin::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singin::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.error)
}

// -------------------------------------------------------------------

// C2S_Singup

// int64 remote_id = 1;
inline void C2S_Singup::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t C2S_Singup::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t C2S_Singup::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.remote_id)
  return _internal_remote_id();
}
inline void C2S_Singup::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void C2S_Singup::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.remote_id)
}

// string user_id = 2;
inline void C2S_Singup::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_Singup::user_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.user_id)
}
inline std::string* C2S_Singup::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.user_id)
  return _s;
}
inline const std::string& C2S_Singup::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void C2S_Singup::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_user_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_Singup::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.user_id)
}

// string user_password = 3;
inline void C2S_Singup::clear_user_password() {
  _impl_.user_password_.ClearToEmpty();
}
inline const std::string& C2S_Singup::user_password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.user_password)
  return _internal_user_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_user_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.user_password)
}
inline std::string* C2S_Singup::mutable_user_password() {
  std::string* _s = _internal_mutable_user_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.user_password)
  return _s;
}
inline const std::string& C2S_Singup::_internal_user_password() const {
  return _impl_.user_password_.Get();
}
inline void C2S_Singup::_internal_set_user_password(const std::string& value) {
  
  _impl_.user_password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_user_password() {
  
  return _impl_.user_password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_user_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.user_password)
  return _impl_.user_password_.Release();
}
inline void C2S_Singup::set_allocated_user_password(std::string* user_password) {
  if (user_password != nullptr) {
    
  } else {
    
  }
  _impl_.user_password_.SetAllocated(user_password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_password_.IsDefault()) {
    _impl_.user_password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.user_password)
}

// string user_email = 4;
inline void C2S_Singup::clear_user_email() {
  _impl_.user_email_.ClearToEmpty();
}
inline const std::string& C2S_Singup::user_email() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.user_email)
  return _internal_user_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_user_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.user_email)
}
inline std::string* C2S_Singup::mutable_user_email() {
  std::string* _s = _internal_mutable_user_email();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.user_email)
  return _s;
}
inline const std::string& C2S_Singup::_internal_user_email() const {
  return _impl_.user_email_.Get();
}
inline void C2S_Singup::_internal_set_user_email(const std::string& value) {
  
  _impl_.user_email_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_user_email() {
  
  return _impl_.user_email_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_user_email() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.user_email)
  return _impl_.user_email_.Release();
}
inline void C2S_Singup::set_allocated_user_email(std::string* user_email) {
  if (user_email != nullptr) {
    
  } else {
    
  }
  _impl_.user_email_.SetAllocated(user_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_email_.IsDefault()) {
    _impl_.user_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.user_email)
}

// -------------------------------------------------------------------

// S2C_Singup

// int64 remote_id = 1;
inline void S2C_Singup::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_Singup::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_Singup::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singup.remote_id)
  return _internal_remote_id();
}
inline void S2C_Singup::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_Singup::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singup.remote_id)
}

// int32 error = 2;
inline void S2C_Singup::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singup::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singup::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singup.error)
  return _internal_error();
}
inline void S2C_Singup::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singup::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singup.error)
}

// -------------------------------------------------------------------

// C2S_EmailVerified

// int64 remote_id = 1;
inline void C2S_EmailVerified::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t C2S_EmailVerified::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t C2S_EmailVerified::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EmailVerified.remote_id)
  return _internal_remote_id();
}
inline void C2S_EmailVerified::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void C2S_EmailVerified::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_EmailVerified.remote_id)
}

// string verified_code = 2;
inline void C2S_EmailVerified::clear_verified_code() {
  _impl_.verified_code_.ClearToEmpty();
}
inline const std::string& C2S_EmailVerified::verified_code() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EmailVerified.verified_code)
  return _internal_verified_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_EmailVerified::set_verified_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verified_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_EmailVerified.verified_code)
}
inline std::string* C2S_EmailVerified::mutable_verified_code() {
  std::string* _s = _internal_mutable_verified_code();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_EmailVerified.verified_code)
  return _s;
}
inline const std::string& C2S_EmailVerified::_internal_verified_code() const {
  return _impl_.verified_code_.Get();
}
inline void C2S_EmailVerified::_internal_set_verified_code(const std::string& value) {
  
  _impl_.verified_code_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::_internal_mutable_verified_code() {
  
  return _impl_.verified_code_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::release_verified_code() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_EmailVerified.verified_code)
  return _impl_.verified_code_.Release();
}
inline void C2S_EmailVerified::set_allocated_verified_code(std::string* verified_code) {
  if (verified_code != nullptr) {
    
  } else {
    
  }
  _impl_.verified_code_.SetAllocated(verified_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verified_code_.IsDefault()) {
    _impl_.verified_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_EmailVerified.verified_code)
}

// -------------------------------------------------------------------

// S2C_EmailVerified

// int64 remote_id = 1;
inline void S2C_EmailVerified::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_EmailVerified::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_EmailVerified::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EmailVerified.remote_id)
  return _internal_remote_id();
}
inline void S2C_EmailVerified::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_EmailVerified::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EmailVerified.remote_id)
}

// int32 error = 2;
inline void S2C_EmailVerified::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EmailVerified::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EmailVerified::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EmailVerified.error)
  return _internal_error();
}
inline void S2C_EmailVerified::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EmailVerified::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EmailVerified.error)
}

// -------------------------------------------------------------------

// C2S_LoadServer

// -------------------------------------------------------------------

// S2C_LoadServer

// repeated int32 id = 1;
inline int S2C_LoadServer::_internal_id_size() const {
  return _impl_.id_.size();
}
inline int S2C_LoadServer::id_size() const {
  return _internal_id_size();
}
inline void S2C_LoadServer::clear_id() {
  _impl_.id_.Clear();
}
inline int32_t S2C_LoadServer::_internal_id(int index) const {
  return _impl_.id_.Get(index);
}
inline int32_t S2C_LoadServer::id(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.id)
  return _internal_id(index);
}
inline void S2C_LoadServer::set_id(int index, int32_t value) {
  _impl_.id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.id)
}
inline void S2C_LoadServer::_internal_add_id(int32_t value) {
  _impl_.id_.Add(value);
}
inline void S2C_LoadServer::add_id(int32_t value) {
  _internal_add_id(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::_internal_id() const {
  return _impl_.id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::id() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.id)
  return _internal_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::_internal_mutable_id() {
  return &_impl_.id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.id)
  return _internal_mutable_id();
}

// repeated bytes name = 2;
inline int S2C_LoadServer::_internal_name_size() const {
  return _impl_.name_.size();
}
inline int S2C_LoadServer::name_size() const {
  return _internal_name_size();
}
inline void S2C_LoadServer::clear_name() {
  _impl_.name_.Clear();
}
inline std::string* S2C_LoadServer::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:Protocol.S2C_LoadServer.name)
  return _s;
}
inline const std::string& S2C_LoadServer::_internal_name(int index) const {
  return _impl_.name_.Get(index);
}
inline const std::string& S2C_LoadServer::name(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.name)
  return _internal_name(index);
}
inline std::string* S2C_LoadServer::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadServer.name)
  return _impl_.name_.Mutable(index);
}
inline void S2C_LoadServer::set_name(int index, const std::string& value) {
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.name)
}
inline void S2C_LoadServer::set_name(int index, std::string&& value) {
  _impl_.name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.name)
}
inline void S2C_LoadServer::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S2C_LoadServer.name)
}
inline void S2C_LoadServer::set_name(int index, const void* value, size_t size) {
  _impl_.name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2C_LoadServer.name)
}
inline std::string* S2C_LoadServer::_internal_add_name() {
  return _impl_.name_.Add();
}
inline void S2C_LoadServer::add_name(const std::string& value) {
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.name)
}
inline void S2C_LoadServer::add_name(std::string&& value) {
  _impl_.name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.name)
}
inline void S2C_LoadServer::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S2C_LoadServer.name)
}
inline void S2C_LoadServer::add_name(const void* value, size_t size) {
  _impl_.name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S2C_LoadServer.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S2C_LoadServer::name() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.name)
  return _impl_.name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S2C_LoadServer::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.name)
  return &_impl_.name_;
}

// repeated float state = 3;
inline int S2C_LoadServer::_internal_state_size() const {
  return _impl_.state_.size();
}
inline int S2C_LoadServer::state_size() const {
  return _internal_state_size();
}
inline void S2C_LoadServer::clear_state() {
  _impl_.state_.Clear();
}
inline float S2C_LoadServer::_internal_state(int index) const {
  return _impl_.state_.Get(index);
}
inline float S2C_LoadServer::state(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.state)
  return _internal_state(index);
}
inline void S2C_LoadServer::set_state(int index, float value) {
  _impl_.state_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.state)
}
inline void S2C_LoadServer::_internal_add_state(float value) {
  _impl_.state_.Add(value);
}
inline void S2C_LoadServer::add_state(float value) {
  _internal_add_state(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.state)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S2C_LoadServer::_internal_state() const {
  return _impl_.state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
S2C_LoadServer::state() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.state)
  return _internal_state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S2C_LoadServer::_internal_mutable_state() {
  return &_impl_.state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
S2C_LoadServer::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.state)
  return _internal_mutable_state();
}

// repeated int32 count = 4;
inline int S2C_LoadServer::_internal_count_size() const {
  return _impl_.count_.size();
}
inline int S2C_LoadServer::count_size() const {
  return _internal_count_size();
}
inline void S2C_LoadServer::clear_count() {
  _impl_.count_.Clear();
}
inline int32_t S2C_LoadServer::_internal_count(int index) const {
  return _impl_.count_.Get(index);
}
inline int32_t S2C_LoadServer::count(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.count)
  return _internal_count(index);
}
inline void S2C_LoadServer::set_count(int index, int32_t value) {
  _impl_.count_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.count)
}
inline void S2C_LoadServer::_internal_add_count(int32_t value) {
  _impl_.count_.Add(value);
}
inline void S2C_LoadServer::add_count(int32_t value) {
  _internal_add_count(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::_internal_count() const {
  return _impl_.count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::count() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.count)
  return _internal_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::_internal_mutable_count() {
  return &_impl_.count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::mutable_count() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.count)
  return _internal_mutable_count();
}

// -------------------------------------------------------------------

// C2S_SelectServer

// int32 server_id = 1;
inline void C2S_SelectServer::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t C2S_SelectServer::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t C2S_SelectServer::server_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SelectServer.server_id)
  return _internal_server_id();
}
inline void C2S_SelectServer::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void C2S_SelectServer::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SelectServer.server_id)
}

// -------------------------------------------------------------------

// S2C_SelectServer

// int32 error = 1;
inline void S2C_SelectServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_SelectServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_SelectServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SelectServer.error)
  return _internal_error();
}
inline void S2C_SelectServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_SelectServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SelectServer.error)
}

// -------------------------------------------------------------------

// C2S_StartGame

// int32 seat = 1;
inline void C2S_StartGame::clear_seat() {
  _impl_.seat_ = 0;
}
inline int32_t C2S_StartGame::_internal_seat() const {
  return _impl_.seat_;
}
inline int32_t C2S_StartGame::seat() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_StartGame.seat)
  return _internal_seat();
}
inline void C2S_StartGame::_internal_set_seat(int32_t value) {
  
  _impl_.seat_ = value;
}
inline void C2S_StartGame::set_seat(int32_t value) {
  _internal_set_seat(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_StartGame.seat)
}

// string token = 2;
inline void C2S_StartGame::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& C2S_StartGame::token() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_StartGame.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_StartGame::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_StartGame.token)
}
inline std::string* C2S_StartGame::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_StartGame.token)
  return _s;
}
inline const std::string& C2S_StartGame::_internal_token() const {
  return _impl_.token_.Get();
}
inline void C2S_StartGame::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_StartGame::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_StartGame::release_token() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_StartGame.token)
  return _impl_.token_.Release();
}
inline void C2S_StartGame::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_StartGame.token)
}

// -------------------------------------------------------------------

// S2C_StartGame

// int32 server_id = 1;
inline void S2C_StartGame::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t S2C_StartGame::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t S2C_StartGame::server_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_StartGame.server_id)
  return _internal_server_id();
}
inline void S2C_StartGame::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void S2C_StartGame::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_StartGame.server_id)
}

// bytes travel_level = 2;
inline void S2C_StartGame::clear_travel_level() {
  _impl_.travel_level_.ClearToEmpty();
}
inline const std::string& S2C_StartGame::travel_level() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_StartGame.travel_level)
  return _internal_travel_level();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_StartGame::set_travel_level(ArgT0&& arg0, ArgT... args) {
 
 _impl_.travel_level_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_StartGame.travel_level)
}
inline std::string* S2C_StartGame::mutable_travel_level() {
  std::string* _s = _internal_mutable_travel_level();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_StartGame.travel_level)
  return _s;
}
inline const std::string& S2C_StartGame::_internal_travel_level() const {
  return _impl_.travel_level_.Get();
}
inline void S2C_StartGame::_internal_set_travel_level(const std::string& value) {
  
  _impl_.travel_level_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_StartGame::_internal_mutable_travel_level() {
  
  return _impl_.travel_level_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_StartGame::release_travel_level() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_StartGame.travel_level)
  return _impl_.travel_level_.Release();
}
inline void S2C_StartGame::set_allocated_travel_level(std::string* travel_level) {
  if (travel_level != nullptr) {
    
  } else {
    
  }
  _impl_.travel_level_.SetAllocated(travel_level, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.travel_level_.IsDefault()) {
    _impl_.travel_level_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_StartGame.travel_level)
}

// bytes ip = 3;
inline void S2C_StartGame::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& S2C_StartGame::ip() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_StartGame.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_StartGame::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_StartGame.ip)
}
inline std::string* S2C_StartGame::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_StartGame.ip)
  return _s;
}
inline const std::string& S2C_StartGame::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void S2C_StartGame::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_StartGame::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_StartGame::release_ip() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_StartGame.ip)
  return _impl_.ip_.Release();
}
inline void S2C_StartGame::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_StartGame.ip)
}

// int32 port = 4;
inline void S2C_StartGame::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t S2C_StartGame::_internal_port() const {
  return _impl_.port_;
}
inline int32_t S2C_StartGame::port() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_StartGame.port)
  return _internal_port();
}
inline void S2C_StartGame::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void S2C_StartGame::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_StartGame.port)
}

// int32 error = 5;
inline void S2C_StartGame::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_StartGame::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_StartGame::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_StartGame.error)
  return _internal_error();
}
inline void S2C_StartGame::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_StartGame::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_StartGame.error)
}

// -------------------------------------------------------------------

// C2S_LoadCharacters

// -------------------------------------------------------------------

// S2C_LoadCharacters

// repeated bytes name = 1;
inline int S2C_LoadCharacters::_internal_name_size() const {
  return _impl_.name_.size();
}
inline int S2C_LoadCharacters::name_size() const {
  return _internal_name_size();
}
inline void S2C_LoadCharacters::clear_name() {
  _impl_.name_.Clear();
}
inline std::string* S2C_LoadCharacters::add_name() {
  std::string* _s = _internal_add_name();
  // @@protoc_insertion_point(field_add_mutable:Protocol.S2C_LoadCharacters.name)
  return _s;
}
inline const std::string& S2C_LoadCharacters::_internal_name(int index) const {
  return _impl_.name_.Get(index);
}
inline const std::string& S2C_LoadCharacters::name(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadCharacters.name)
  return _internal_name(index);
}
inline std::string* S2C_LoadCharacters::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadCharacters.name)
  return _impl_.name_.Mutable(index);
}
inline void S2C_LoadCharacters::set_name(int index, const std::string& value) {
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadCharacters.name)
}
inline void S2C_LoadCharacters::set_name(int index, std::string&& value) {
  _impl_.name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadCharacters.name)
}
inline void S2C_LoadCharacters::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S2C_LoadCharacters.name)
}
inline void S2C_LoadCharacters::set_name(int index, const void* value, size_t size) {
  _impl_.name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2C_LoadCharacters.name)
}
inline std::string* S2C_LoadCharacters::_internal_add_name() {
  return _impl_.name_.Add();
}
inline void S2C_LoadCharacters::add_name(const std::string& value) {
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadCharacters.name)
}
inline void S2C_LoadCharacters::add_name(std::string&& value) {
  _impl_.name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadCharacters.name)
}
inline void S2C_LoadCharacters::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S2C_LoadCharacters.name)
}
inline void S2C_LoadCharacters::add_name(const void* value, size_t size) {
  _impl_.name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S2C_LoadCharacters.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S2C_LoadCharacters::name() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadCharacters.name)
  return _impl_.name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S2C_LoadCharacters::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadCharacters.name)
  return &_impl_.name_;
}

// repeated .Protocol.SCharacterData character_data = 2;
inline int S2C_LoadCharacters::_internal_character_data_size() const {
  return _impl_.character_data_.size();
}
inline int S2C_LoadCharacters::character_data_size() const {
  return _internal_character_data_size();
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::mutable_character_data(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadCharacters.character_data)
  return _impl_.character_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >*
S2C_LoadCharacters::mutable_character_data() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadCharacters.character_data)
  return &_impl_.character_data_;
}
inline const ::Protocol::SCharacterData& S2C_LoadCharacters::_internal_character_data(int index) const {
  return _impl_.character_data_.Get(index);
}
inline const ::Protocol::SCharacterData& S2C_LoadCharacters::character_data(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadCharacters.character_data)
  return _internal_character_data(index);
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::_internal_add_character_data() {
  return _impl_.character_data_.Add();
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::add_character_data() {
  ::Protocol::SCharacterData* _add = _internal_add_character_data();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadCharacters.character_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >&
S2C_LoadCharacters::character_data() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadCharacters.character_data)
  return _impl_.character_data_;
}

// -------------------------------------------------------------------

// C2S_CreateCharacter

// int32 server_id = 1;
inline void C2S_CreateCharacter::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t C2S_CreateCharacter::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t C2S_CreateCharacter::server_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CreateCharacter.server_id)
  return _internal_server_id();
}
inline void C2S_CreateCharacter::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void C2S_CreateCharacter::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_CreateCharacter.server_id)
}

// .Protocol.SCharacterData character_data = 2;
inline bool C2S_CreateCharacter::_internal_has_character_data() const {
  return this != internal_default_instance() && _impl_.character_data_ != nullptr;
}
inline bool C2S_CreateCharacter::has_character_data() const {
  return _internal_has_character_data();
}
inline const ::Protocol::SCharacterData& C2S_CreateCharacter::_internal_character_data() const {
  const ::Protocol::SCharacterData* p = _impl_.character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& C2S_CreateCharacter::character_data() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CreateCharacter.character_data)
  return _internal_character_data();
}
inline void C2S_CreateCharacter::unsafe_arena_set_allocated_character_data(
    ::Protocol::SCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  _impl_.character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_CreateCharacter.character_data)
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::release_character_data() {
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_CreateCharacter.character_data)
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::_internal_mutable_character_data() {
  
  if (_impl_.character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.character_data_ = p;
  }
  return _impl_.character_data_;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::mutable_character_data() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_CreateCharacter.character_data)
  return _msg;
}
inline void C2S_CreateCharacter::set_allocated_character_data(::Protocol::SCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data));
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_CreateCharacter.character_data)
}

// -------------------------------------------------------------------

// S2C_CreateCharacter

// int32 error = 2;
inline void S2C_CreateCharacter::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_CreateCharacter::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_CreateCharacter::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateCharacter.error)
  return _internal_error();
}
inline void S2C_CreateCharacter::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_CreateCharacter::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_CreateCharacter.error)
}

// -------------------------------------------------------------------

// C2S_DeleteCharacter

// bytes name = 1;
inline void C2S_DeleteCharacter::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& C2S_DeleteCharacter::name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteCharacter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_DeleteCharacter::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_DeleteCharacter.name)
}
inline std::string* C2S_DeleteCharacter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_DeleteCharacter.name)
  return _s;
}
inline const std::string& C2S_DeleteCharacter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void C2S_DeleteCharacter::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_DeleteCharacter::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_DeleteCharacter::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_DeleteCharacter.name)
  return _impl_.name_.Release();
}
inline void C2S_DeleteCharacter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_DeleteCharacter.name)
}

// -------------------------------------------------------------------

// S2C_DeleteCharacter

// int32 error = 1;
inline void S2C_DeleteCharacter::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_DeleteCharacter::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_DeleteCharacter::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteCharacter.error)
  return _internal_error();
}
inline void S2C_DeleteCharacter::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_DeleteCharacter::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeleteCharacter.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
