#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IdentityPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_IdentityPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_IdentityPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_IdentityPacket_2eproto;
namespace Protocol {
class C2S_AppearanceCharacter;
struct C2S_AppearanceCharacterDefaultTypeInternal;
extern C2S_AppearanceCharacterDefaultTypeInternal _C2S_AppearanceCharacter_default_instance_;
class C2S_CreateCharacter;
struct C2S_CreateCharacterDefaultTypeInternal;
extern C2S_CreateCharacterDefaultTypeInternal _C2S_CreateCharacter_default_instance_;
class C2S_DeleteCharacter;
struct C2S_DeleteCharacterDefaultTypeInternal;
extern C2S_DeleteCharacterDefaultTypeInternal _C2S_DeleteCharacter_default_instance_;
class C2S_EmailVerified;
struct C2S_EmailVerifiedDefaultTypeInternal;
extern C2S_EmailVerifiedDefaultTypeInternal _C2S_EmailVerified_default_instance_;
class C2S_EnterServer;
struct C2S_EnterServerDefaultTypeInternal;
extern C2S_EnterServerDefaultTypeInternal _C2S_EnterServer_default_instance_;
class C2S_LeaveServer;
struct C2S_LeaveServerDefaultTypeInternal;
extern C2S_LeaveServerDefaultTypeInternal _C2S_LeaveServer_default_instance_;
class C2S_LoadCharacters;
struct C2S_LoadCharactersDefaultTypeInternal;
extern C2S_LoadCharactersDefaultTypeInternal _C2S_LoadCharacters_default_instance_;
class C2S_LoadServer;
struct C2S_LoadServerDefaultTypeInternal;
extern C2S_LoadServerDefaultTypeInternal _C2S_LoadServer_default_instance_;
class C2S_SelectServer;
struct C2S_SelectServerDefaultTypeInternal;
extern C2S_SelectServerDefaultTypeInternal _C2S_SelectServer_default_instance_;
class C2S_Singin;
struct C2S_SinginDefaultTypeInternal;
extern C2S_SinginDefaultTypeInternal _C2S_Singin_default_instance_;
class C2S_Singup;
struct C2S_SingupDefaultTypeInternal;
extern C2S_SingupDefaultTypeInternal _C2S_Singup_default_instance_;
class C2S_TravelServer;
struct C2S_TravelServerDefaultTypeInternal;
extern C2S_TravelServerDefaultTypeInternal _C2S_TravelServer_default_instance_;
class C2S_UpdateNickName;
struct C2S_UpdateNickNameDefaultTypeInternal;
extern C2S_UpdateNickNameDefaultTypeInternal _C2S_UpdateNickName_default_instance_;
class S2C_AppearanceCharacter;
struct S2C_AppearanceCharacterDefaultTypeInternal;
extern S2C_AppearanceCharacterDefaultTypeInternal _S2C_AppearanceCharacter_default_instance_;
class S2C_CreateCharacter;
struct S2C_CreateCharacterDefaultTypeInternal;
extern S2C_CreateCharacterDefaultTypeInternal _S2C_CreateCharacter_default_instance_;
class S2C_DeleteCharacter;
struct S2C_DeleteCharacterDefaultTypeInternal;
extern S2C_DeleteCharacterDefaultTypeInternal _S2C_DeleteCharacter_default_instance_;
class S2C_EmailVerified;
struct S2C_EmailVerifiedDefaultTypeInternal;
extern S2C_EmailVerifiedDefaultTypeInternal _S2C_EmailVerified_default_instance_;
class S2C_EnterServer;
struct S2C_EnterServerDefaultTypeInternal;
extern S2C_EnterServerDefaultTypeInternal _S2C_EnterServer_default_instance_;
class S2C_LeaveServer;
struct S2C_LeaveServerDefaultTypeInternal;
extern S2C_LeaveServerDefaultTypeInternal _S2C_LeaveServer_default_instance_;
class S2C_LoadCharacters;
struct S2C_LoadCharactersDefaultTypeInternal;
extern S2C_LoadCharactersDefaultTypeInternal _S2C_LoadCharacters_default_instance_;
class S2C_LoadServer;
struct S2C_LoadServerDefaultTypeInternal;
extern S2C_LoadServerDefaultTypeInternal _S2C_LoadServer_default_instance_;
class S2C_SelectServer;
struct S2C_SelectServerDefaultTypeInternal;
extern S2C_SelectServerDefaultTypeInternal _S2C_SelectServer_default_instance_;
class S2C_Singin;
struct S2C_SinginDefaultTypeInternal;
extern S2C_SinginDefaultTypeInternal _S2C_Singin_default_instance_;
class S2C_Singup;
struct S2C_SingupDefaultTypeInternal;
extern S2C_SingupDefaultTypeInternal _S2C_Singup_default_instance_;
class S2C_TravelServer;
struct S2C_TravelServerDefaultTypeInternal;
extern S2C_TravelServerDefaultTypeInternal _S2C_TravelServer_default_instance_;
class S2C_UpdateNickName;
struct S2C_UpdateNickNameDefaultTypeInternal;
extern S2C_UpdateNickNameDefaultTypeInternal _S2C_UpdateNickName_default_instance_;
class SCharacterAppearance;
struct SCharacterAppearanceDefaultTypeInternal;
extern SCharacterAppearanceDefaultTypeInternal _SCharacterAppearance_default_instance_;
class SCharacterData;
struct SCharacterDataDefaultTypeInternal;
extern SCharacterDataDefaultTypeInternal _SCharacterData_default_instance_;
class UserData;
struct UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_AppearanceCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_AppearanceCharacter>(Arena*);
template<> ::Protocol::C2S_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_CreateCharacter>(Arena*);
template<> ::Protocol::C2S_DeleteCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_DeleteCharacter>(Arena*);
template<> ::Protocol::C2S_EmailVerified* Arena::CreateMaybeMessage<::Protocol::C2S_EmailVerified>(Arena*);
template<> ::Protocol::C2S_EnterServer* Arena::CreateMaybeMessage<::Protocol::C2S_EnterServer>(Arena*);
template<> ::Protocol::C2S_LeaveServer* Arena::CreateMaybeMessage<::Protocol::C2S_LeaveServer>(Arena*);
template<> ::Protocol::C2S_LoadCharacters* Arena::CreateMaybeMessage<::Protocol::C2S_LoadCharacters>(Arena*);
template<> ::Protocol::C2S_LoadServer* Arena::CreateMaybeMessage<::Protocol::C2S_LoadServer>(Arena*);
template<> ::Protocol::C2S_SelectServer* Arena::CreateMaybeMessage<::Protocol::C2S_SelectServer>(Arena*);
template<> ::Protocol::C2S_Singin* Arena::CreateMaybeMessage<::Protocol::C2S_Singin>(Arena*);
template<> ::Protocol::C2S_Singup* Arena::CreateMaybeMessage<::Protocol::C2S_Singup>(Arena*);
template<> ::Protocol::C2S_TravelServer* Arena::CreateMaybeMessage<::Protocol::C2S_TravelServer>(Arena*);
template<> ::Protocol::C2S_UpdateNickName* Arena::CreateMaybeMessage<::Protocol::C2S_UpdateNickName>(Arena*);
template<> ::Protocol::S2C_AppearanceCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_AppearanceCharacter>(Arena*);
template<> ::Protocol::S2C_CreateCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_CreateCharacter>(Arena*);
template<> ::Protocol::S2C_DeleteCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_DeleteCharacter>(Arena*);
template<> ::Protocol::S2C_EmailVerified* Arena::CreateMaybeMessage<::Protocol::S2C_EmailVerified>(Arena*);
template<> ::Protocol::S2C_EnterServer* Arena::CreateMaybeMessage<::Protocol::S2C_EnterServer>(Arena*);
template<> ::Protocol::S2C_LeaveServer* Arena::CreateMaybeMessage<::Protocol::S2C_LeaveServer>(Arena*);
template<> ::Protocol::S2C_LoadCharacters* Arena::CreateMaybeMessage<::Protocol::S2C_LoadCharacters>(Arena*);
template<> ::Protocol::S2C_LoadServer* Arena::CreateMaybeMessage<::Protocol::S2C_LoadServer>(Arena*);
template<> ::Protocol::S2C_SelectServer* Arena::CreateMaybeMessage<::Protocol::S2C_SelectServer>(Arena*);
template<> ::Protocol::S2C_Singin* Arena::CreateMaybeMessage<::Protocol::S2C_Singin>(Arena*);
template<> ::Protocol::S2C_Singup* Arena::CreateMaybeMessage<::Protocol::S2C_Singup>(Arena*);
template<> ::Protocol::S2C_TravelServer* Arena::CreateMaybeMessage<::Protocol::S2C_TravelServer>(Arena*);
template<> ::Protocol::S2C_UpdateNickName* Arena::CreateMaybeMessage<::Protocol::S2C_UpdateNickName>(Arena*);
template<> ::Protocol::SCharacterAppearance* Arena::CreateMaybeMessage<::Protocol::SCharacterAppearance>(Arena*);
template<> ::Protocol::SCharacterData* Arena::CreateMaybeMessage<::Protocol::SCharacterData>(Arena*);
template<> ::Protocol::UserData* Arena::CreateMaybeMessage<::Protocol::UserData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class UserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  ~UserData() override;
  explicit PROTOBUF_CONSTEXPR UserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserData& from) {
    UserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 5,
    kUpdateDateFieldNumber = 7,
    kCreateDateFieldNumber = 8,
    kActivateFieldNumber = 3,
    kConfirmedFieldNumber = 4,
    kVerifiedFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 5;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string update_date = 7;
  void clear_update_date();
  const std::string& update_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_update_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_update_date();
  PROTOBUF_NODISCARD std::string* release_update_date();
  void set_allocated_update_date(std::string* update_date);
  private:
  const std::string& _internal_update_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_update_date(const std::string& value);
  std::string* _internal_mutable_update_date();
  public:

  // string create_date = 8;
  void clear_create_date();
  const std::string& create_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_create_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_create_date();
  PROTOBUF_NODISCARD std::string* release_create_date();
  void set_allocated_create_date(std::string* create_date);
  private:
  const std::string& _internal_create_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_create_date(const std::string& value);
  std::string* _internal_mutable_create_date();
  public:

  // bool activate = 3;
  void clear_activate();
  bool activate() const;
  void set_activate(bool value);
  private:
  bool _internal_activate() const;
  void _internal_set_activate(bool value);
  public:

  // bool confirmed = 4;
  void clear_confirmed();
  bool confirmed() const;
  void set_confirmed(bool value);
  private:
  bool _internal_confirmed() const;
  void _internal_set_confirmed(bool value);
  public:

  // bool verified = 6;
  void clear_verified();
  bool verified() const;
  void set_verified(bool value);
  private:
  bool _internal_verified() const;
  void _internal_set_verified(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_date_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_date_;
    bool activate_;
    bool confirmed_;
    bool verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class SCharacterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SCharacterData) */ {
 public:
  inline SCharacterData() : SCharacterData(nullptr) {}
  ~SCharacterData() override;
  explicit PROTOBUF_CONSTEXPR SCharacterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCharacterData(const SCharacterData& from);
  SCharacterData(SCharacterData&& from) noexcept
    : SCharacterData() {
    *this = ::std::move(from);
  }

  inline SCharacterData& operator=(const SCharacterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCharacterData& operator=(SCharacterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCharacterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCharacterData* internal_default_instance() {
    return reinterpret_cast<const SCharacterData*>(
               &_SCharacterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SCharacterData& a, SCharacterData& b) {
    a.Swap(&b);
  }
  inline void Swap(SCharacterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCharacterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCharacterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCharacterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCharacterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SCharacterData& from) {
    SCharacterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCharacterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SCharacterData";
  }
  protected:
  explicit SCharacterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLevelFieldNumber = 2,
    kJobFieldNumber = 3,
    kTribeFieldNumber = 4,
    kPositionFieldNumber = 5,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 job = 3;
  void clear_job();
  int32_t job() const;
  void set_job(int32_t value);
  private:
  int32_t _internal_job() const;
  void _internal_set_job(int32_t value);
  public:

  // int32 tribe = 4;
  void clear_tribe();
  int32_t tribe() const;
  void set_tribe(int32_t value);
  private:
  int32_t _internal_tribe() const;
  void _internal_set_tribe(int32_t value);
  public:

  // int32 position = 5;
  void clear_position();
  int32_t position() const;
  void set_position(int32_t value);
  private:
  int32_t _internal_position() const;
  void _internal_set_position(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SCharacterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t level_;
    int32_t job_;
    int32_t tribe_;
    int32_t position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class SCharacterAppearance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.SCharacterAppearance) */ {
 public:
  inline SCharacterAppearance() : SCharacterAppearance(nullptr) {}
  ~SCharacterAppearance() override;
  explicit PROTOBUF_CONSTEXPR SCharacterAppearance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCharacterAppearance(const SCharacterAppearance& from);
  SCharacterAppearance(SCharacterAppearance&& from) noexcept
    : SCharacterAppearance() {
    *this = ::std::move(from);
  }

  inline SCharacterAppearance& operator=(const SCharacterAppearance& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCharacterAppearance& operator=(SCharacterAppearance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCharacterAppearance& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCharacterAppearance* internal_default_instance() {
    return reinterpret_cast<const SCharacterAppearance*>(
               &_SCharacterAppearance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SCharacterAppearance& a, SCharacterAppearance& b) {
    a.Swap(&b);
  }
  inline void Swap(SCharacterAppearance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCharacterAppearance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCharacterAppearance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCharacterAppearance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCharacterAppearance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SCharacterAppearance& from) {
    SCharacterAppearance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCharacterAppearance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.SCharacterAppearance";
  }
  protected:
  explicit SCharacterAppearance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyColorFieldNumber = 1,
    kHairColorFieldNumber = 2,
    kEyeColorFieldNumber = 3,
    kHeadFieldNumber = 4,
    kEarsFieldNumber = 5,
    kFeetFieldNumber = 6,
    kHairFieldNumber = 7,
    kFacials01FieldNumber = 8,
    kFacials02FieldNumber = 9,
    kHelmetFieldNumber = 10,
    kShouldersFieldNumber = 11,
    kSkirtFieldNumber = 12,
    kLegsFieldNumber = 13,
    kLegsAddFieldNumber = 14,
    kHandsFieldNumber = 15,
    kHandsAddFieldNumber = 16,
    kChestFieldNumber = 17,
    kChestAddFieldNumber = 18,
    kCapeFieldNumber = 19,
    kBracersFieldNumber = 20,
    kBracersAddFieldNumber = 21,
    kBootsFieldNumber = 22,
    kBeltFieldNumber = 23,
    kTabardFieldNumber = 24,
    kBack2HlFieldNumber = 25,
    kBackShieldFieldNumber = 26,
    kBackWeaponLFieldNumber = 27,
    kBackWeaponRFieldNumber = 28,
    kBackBowFieldNumber = 29,
    kQuiverFieldNumber = 30,
    kWeaponRArrowFieldNumber = 31,
    kWeaponShieldFieldNumber = 32,
    kWeaponLFieldNumber = 33,
    kWeaponRFieldNumber = 34,
    kHipLFieldNumber = 35,
    kHipRFieldNumber = 36,
  };
  // uint32 body_color = 1;
  void clear_body_color();
  uint32_t body_color() const;
  void set_body_color(uint32_t value);
  private:
  uint32_t _internal_body_color() const;
  void _internal_set_body_color(uint32_t value);
  public:

  // uint32 hair_color = 2;
  void clear_hair_color();
  uint32_t hair_color() const;
  void set_hair_color(uint32_t value);
  private:
  uint32_t _internal_hair_color() const;
  void _internal_set_hair_color(uint32_t value);
  public:

  // uint32 eye_color = 3;
  void clear_eye_color();
  uint32_t eye_color() const;
  void set_eye_color(uint32_t value);
  private:
  uint32_t _internal_eye_color() const;
  void _internal_set_eye_color(uint32_t value);
  public:

  // int32 head = 4;
  void clear_head();
  int32_t head() const;
  void set_head(int32_t value);
  private:
  int32_t _internal_head() const;
  void _internal_set_head(int32_t value);
  public:

  // int32 ears = 5;
  void clear_ears();
  int32_t ears() const;
  void set_ears(int32_t value);
  private:
  int32_t _internal_ears() const;
  void _internal_set_ears(int32_t value);
  public:

  // int32 feet = 6;
  void clear_feet();
  int32_t feet() const;
  void set_feet(int32_t value);
  private:
  int32_t _internal_feet() const;
  void _internal_set_feet(int32_t value);
  public:

  // int32 hair = 7;
  void clear_hair();
  int32_t hair() const;
  void set_hair(int32_t value);
  private:
  int32_t _internal_hair() const;
  void _internal_set_hair(int32_t value);
  public:

  // int32 facials_01 = 8;
  void clear_facials_01();
  int32_t facials_01() const;
  void set_facials_01(int32_t value);
  private:
  int32_t _internal_facials_01() const;
  void _internal_set_facials_01(int32_t value);
  public:

  // int32 facials_02 = 9;
  void clear_facials_02();
  int32_t facials_02() const;
  void set_facials_02(int32_t value);
  private:
  int32_t _internal_facials_02() const;
  void _internal_set_facials_02(int32_t value);
  public:

  // int32 helmet = 10;
  void clear_helmet();
  int32_t helmet() const;
  void set_helmet(int32_t value);
  private:
  int32_t _internal_helmet() const;
  void _internal_set_helmet(int32_t value);
  public:

  // int32 shoulders = 11;
  void clear_shoulders();
  int32_t shoulders() const;
  void set_shoulders(int32_t value);
  private:
  int32_t _internal_shoulders() const;
  void _internal_set_shoulders(int32_t value);
  public:

  // int32 skirt = 12;
  void clear_skirt();
  int32_t skirt() const;
  void set_skirt(int32_t value);
  private:
  int32_t _internal_skirt() const;
  void _internal_set_skirt(int32_t value);
  public:

  // int32 legs = 13;
  void clear_legs();
  int32_t legs() const;
  void set_legs(int32_t value);
  private:
  int32_t _internal_legs() const;
  void _internal_set_legs(int32_t value);
  public:

  // int32 legs_add = 14;
  void clear_legs_add();
  int32_t legs_add() const;
  void set_legs_add(int32_t value);
  private:
  int32_t _internal_legs_add() const;
  void _internal_set_legs_add(int32_t value);
  public:

  // int32 hands = 15;
  void clear_hands();
  int32_t hands() const;
  void set_hands(int32_t value);
  private:
  int32_t _internal_hands() const;
  void _internal_set_hands(int32_t value);
  public:

  // int32 hands_add = 16;
  void clear_hands_add();
  int32_t hands_add() const;
  void set_hands_add(int32_t value);
  private:
  int32_t _internal_hands_add() const;
  void _internal_set_hands_add(int32_t value);
  public:

  // int32 chest = 17;
  void clear_chest();
  int32_t chest() const;
  void set_chest(int32_t value);
  private:
  int32_t _internal_chest() const;
  void _internal_set_chest(int32_t value);
  public:

  // int32 chest_add = 18;
  void clear_chest_add();
  int32_t chest_add() const;
  void set_chest_add(int32_t value);
  private:
  int32_t _internal_chest_add() const;
  void _internal_set_chest_add(int32_t value);
  public:

  // int32 cape = 19;
  void clear_cape();
  int32_t cape() const;
  void set_cape(int32_t value);
  private:
  int32_t _internal_cape() const;
  void _internal_set_cape(int32_t value);
  public:

  // int32 bracers = 20;
  void clear_bracers();
  int32_t bracers() const;
  void set_bracers(int32_t value);
  private:
  int32_t _internal_bracers() const;
  void _internal_set_bracers(int32_t value);
  public:

  // int32 bracers_add = 21;
  void clear_bracers_add();
  int32_t bracers_add() const;
  void set_bracers_add(int32_t value);
  private:
  int32_t _internal_bracers_add() const;
  void _internal_set_bracers_add(int32_t value);
  public:

  // int32 boots = 22;
  void clear_boots();
  int32_t boots() const;
  void set_boots(int32_t value);
  private:
  int32_t _internal_boots() const;
  void _internal_set_boots(int32_t value);
  public:

  // int32 belt = 23;
  void clear_belt();
  int32_t belt() const;
  void set_belt(int32_t value);
  private:
  int32_t _internal_belt() const;
  void _internal_set_belt(int32_t value);
  public:

  // int32 tabard = 24;
  void clear_tabard();
  int32_t tabard() const;
  void set_tabard(int32_t value);
  private:
  int32_t _internal_tabard() const;
  void _internal_set_tabard(int32_t value);
  public:

  // int32 back_2hl = 25;
  void clear_back_2hl();
  int32_t back_2hl() const;
  void set_back_2hl(int32_t value);
  private:
  int32_t _internal_back_2hl() const;
  void _internal_set_back_2hl(int32_t value);
  public:

  // int32 back_shield = 26;
  void clear_back_shield();
  int32_t back_shield() const;
  void set_back_shield(int32_t value);
  private:
  int32_t _internal_back_shield() const;
  void _internal_set_back_shield(int32_t value);
  public:

  // int32 back_weapon_l = 27;
  void clear_back_weapon_l();
  int32_t back_weapon_l() const;
  void set_back_weapon_l(int32_t value);
  private:
  int32_t _internal_back_weapon_l() const;
  void _internal_set_back_weapon_l(int32_t value);
  public:

  // int32 back_weapon_r = 28;
  void clear_back_weapon_r();
  int32_t back_weapon_r() const;
  void set_back_weapon_r(int32_t value);
  private:
  int32_t _internal_back_weapon_r() const;
  void _internal_set_back_weapon_r(int32_t value);
  public:

  // int32 back_bow = 29;
  void clear_back_bow();
  int32_t back_bow() const;
  void set_back_bow(int32_t value);
  private:
  int32_t _internal_back_bow() const;
  void _internal_set_back_bow(int32_t value);
  public:

  // int32 quiver = 30;
  void clear_quiver();
  int32_t quiver() const;
  void set_quiver(int32_t value);
  private:
  int32_t _internal_quiver() const;
  void _internal_set_quiver(int32_t value);
  public:

  // int32 weapon_r_arrow = 31;
  void clear_weapon_r_arrow();
  int32_t weapon_r_arrow() const;
  void set_weapon_r_arrow(int32_t value);
  private:
  int32_t _internal_weapon_r_arrow() const;
  void _internal_set_weapon_r_arrow(int32_t value);
  public:

  // int32 weapon_shield = 32;
  void clear_weapon_shield();
  int32_t weapon_shield() const;
  void set_weapon_shield(int32_t value);
  private:
  int32_t _internal_weapon_shield() const;
  void _internal_set_weapon_shield(int32_t value);
  public:

  // int32 weapon_l = 33;
  void clear_weapon_l();
  int32_t weapon_l() const;
  void set_weapon_l(int32_t value);
  private:
  int32_t _internal_weapon_l() const;
  void _internal_set_weapon_l(int32_t value);
  public:

  // int32 weapon_r = 34;
  void clear_weapon_r();
  int32_t weapon_r() const;
  void set_weapon_r(int32_t value);
  private:
  int32_t _internal_weapon_r() const;
  void _internal_set_weapon_r(int32_t value);
  public:

  // int32 hip_l = 35;
  void clear_hip_l();
  int32_t hip_l() const;
  void set_hip_l(int32_t value);
  private:
  int32_t _internal_hip_l() const;
  void _internal_set_hip_l(int32_t value);
  public:

  // int32 hip_r = 36;
  void clear_hip_r();
  int32_t hip_r() const;
  void set_hip_r(int32_t value);
  private:
  int32_t _internal_hip_r() const;
  void _internal_set_hip_r(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.SCharacterAppearance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t body_color_;
    uint32_t hair_color_;
    uint32_t eye_color_;
    int32_t head_;
    int32_t ears_;
    int32_t feet_;
    int32_t hair_;
    int32_t facials_01_;
    int32_t facials_02_;
    int32_t helmet_;
    int32_t shoulders_;
    int32_t skirt_;
    int32_t legs_;
    int32_t legs_add_;
    int32_t hands_;
    int32_t hands_add_;
    int32_t chest_;
    int32_t chest_add_;
    int32_t cape_;
    int32_t bracers_;
    int32_t bracers_add_;
    int32_t boots_;
    int32_t belt_;
    int32_t tabard_;
    int32_t back_2hl_;
    int32_t back_shield_;
    int32_t back_weapon_l_;
    int32_t back_weapon_r_;
    int32_t back_bow_;
    int32_t quiver_;
    int32_t weapon_r_arrow_;
    int32_t weapon_shield_;
    int32_t weapon_l_;
    int32_t weapon_r_;
    int32_t hip_l_;
    int32_t hip_r_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_EnterServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EnterServer) */ {
 public:
  inline C2S_EnterServer() : C2S_EnterServer(nullptr) {}
  ~C2S_EnterServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_EnterServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EnterServer(const C2S_EnterServer& from);
  C2S_EnterServer(C2S_EnterServer&& from) noexcept
    : C2S_EnterServer() {
    *this = ::std::move(from);
  }

  inline C2S_EnterServer& operator=(const C2S_EnterServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EnterServer& operator=(C2S_EnterServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EnterServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EnterServer* internal_default_instance() {
    return reinterpret_cast<const C2S_EnterServer*>(
               &_C2S_EnterServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C2S_EnterServer& a, C2S_EnterServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EnterServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EnterServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EnterServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EnterServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EnterServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EnterServer& from) {
    C2S_EnterServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EnterServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EnterServer";
  }
  protected:
  explicit C2S_EnterServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EnterServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterServer) */ {
 public:
  inline S2C_EnterServer() : S2C_EnterServer(nullptr) {}
  ~S2C_EnterServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnterServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterServer(const S2C_EnterServer& from);
  S2C_EnterServer(S2C_EnterServer&& from) noexcept
    : S2C_EnterServer() {
    *this = ::std::move(from);
  }

  inline S2C_EnterServer& operator=(const S2C_EnterServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterServer& operator=(S2C_EnterServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterServer* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterServer*>(
               &_S2C_EnterServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S2C_EnterServer& a, S2C_EnterServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnterServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnterServer& from) {
    S2C_EnterServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnterServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterServer";
  }
  protected:
  explicit S2C_EnterServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LeaveServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LeaveServer) */ {
 public:
  inline C2S_LeaveServer() : C2S_LeaveServer(nullptr) {}
  ~C2S_LeaveServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_LeaveServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LeaveServer(const C2S_LeaveServer& from);
  C2S_LeaveServer(C2S_LeaveServer&& from) noexcept
    : C2S_LeaveServer() {
    *this = ::std::move(from);
  }

  inline C2S_LeaveServer& operator=(const C2S_LeaveServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LeaveServer& operator=(C2S_LeaveServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LeaveServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LeaveServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LeaveServer*>(
               &_C2S_LeaveServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C2S_LeaveServer& a, C2S_LeaveServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LeaveServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LeaveServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LeaveServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LeaveServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LeaveServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LeaveServer& from) {
    C2S_LeaveServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LeaveServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LeaveServer";
  }
  protected:
  explicit C2S_LeaveServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LeaveServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeaveServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeaveServer) */ {
 public:
  inline S2C_LeaveServer() : S2C_LeaveServer(nullptr) {}
  ~S2C_LeaveServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LeaveServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeaveServer(const S2C_LeaveServer& from);
  S2C_LeaveServer(S2C_LeaveServer&& from) noexcept
    : S2C_LeaveServer() {
    *this = ::std::move(from);
  }

  inline S2C_LeaveServer& operator=(const S2C_LeaveServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeaveServer& operator=(S2C_LeaveServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeaveServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeaveServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LeaveServer*>(
               &_S2C_LeaveServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S2C_LeaveServer& a, S2C_LeaveServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeaveServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeaveServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeaveServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeaveServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LeaveServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LeaveServer& from) {
    S2C_LeaveServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LeaveServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeaveServer";
  }
  protected:
  explicit S2C_LeaveServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeaveServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singin) */ {
 public:
  inline C2S_Singin() : C2S_Singin(nullptr) {}
  ~C2S_Singin() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singin(const C2S_Singin& from);
  C2S_Singin(C2S_Singin&& from) noexcept
    : C2S_Singin() {
    *this = ::std::move(from);
  }

  inline C2S_Singin& operator=(const C2S_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singin& operator=(C2S_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singin* internal_default_instance() {
    return reinterpret_cast<const C2S_Singin*>(
               &_C2S_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C2S_Singin& a, C2S_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singin& from) {
    C2S_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singin";
  }
  protected:
  explicit C2S_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singin) */ {
 public:
  inline S2C_Singin() : S2C_Singin(nullptr) {}
  ~S2C_Singin() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singin(const S2C_Singin& from);
  S2C_Singin(S2C_Singin&& from) noexcept
    : S2C_Singin() {
    *this = ::std::move(from);
  }

  inline S2C_Singin& operator=(const S2C_Singin& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singin& operator=(S2C_Singin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singin& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singin* internal_default_instance() {
    return reinterpret_cast<const S2C_Singin*>(
               &_S2C_Singin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S2C_Singin& a, S2C_Singin& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singin& from) {
    S2C_Singin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singin";
  }
  protected:
  explicit S2C_Singin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // string ticket = 2;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_NODISCARD std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Singup) */ {
 public:
  inline C2S_Singup() : C2S_Singup(nullptr) {}
  ~C2S_Singup() override;
  explicit PROTOBUF_CONSTEXPR C2S_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Singup(const C2S_Singup& from);
  C2S_Singup(C2S_Singup&& from) noexcept
    : C2S_Singup() {
    *this = ::std::move(from);
  }

  inline C2S_Singup& operator=(const C2S_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Singup& operator=(C2S_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Singup* internal_default_instance() {
    return reinterpret_cast<const C2S_Singup*>(
               &_C2S_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C2S_Singup& a, C2S_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Singup& from) {
    C2S_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Singup";
  }
  protected:
  explicit C2S_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kEmailFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string email = 3;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Singup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Singup) */ {
 public:
  inline S2C_Singup() : S2C_Singup(nullptr) {}
  ~S2C_Singup() override;
  explicit PROTOBUF_CONSTEXPR S2C_Singup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Singup(const S2C_Singup& from);
  S2C_Singup(S2C_Singup&& from) noexcept
    : S2C_Singup() {
    *this = ::std::move(from);
  }

  inline S2C_Singup& operator=(const S2C_Singup& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Singup& operator=(S2C_Singup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Singup& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Singup* internal_default_instance() {
    return reinterpret_cast<const S2C_Singup*>(
               &_S2C_Singup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S2C_Singup& a, S2C_Singup& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Singup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Singup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Singup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Singup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Singup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Singup& from) {
    S2C_Singup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Singup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Singup";
  }
  protected:
  explicit S2C_Singup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Singup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EmailVerified) */ {
 public:
  inline C2S_EmailVerified() : C2S_EmailVerified(nullptr) {}
  ~C2S_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EmailVerified(const C2S_EmailVerified& from);
  C2S_EmailVerified(C2S_EmailVerified&& from) noexcept
    : C2S_EmailVerified() {
    *this = ::std::move(from);
  }

  inline C2S_EmailVerified& operator=(const C2S_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EmailVerified& operator=(C2S_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const C2S_EmailVerified*>(
               &_C2S_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C2S_EmailVerified& a, C2S_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EmailVerified& from) {
    C2S_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EmailVerified";
  }
  protected:
  explicit C2S_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifiedFieldNumber = 1,
  };
  // string verified = 1;
  void clear_verified();
  const std::string& verified() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verified(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verified();
  PROTOBUF_NODISCARD std::string* release_verified();
  void set_allocated_verified(std::string* verified);
  private:
  const std::string& _internal_verified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verified(const std::string& value);
  std::string* _internal_mutable_verified();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EmailVerified final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EmailVerified) */ {
 public:
  inline S2C_EmailVerified() : S2C_EmailVerified(nullptr) {}
  ~S2C_EmailVerified() override;
  explicit PROTOBUF_CONSTEXPR S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EmailVerified(const S2C_EmailVerified& from);
  S2C_EmailVerified(S2C_EmailVerified&& from) noexcept
    : S2C_EmailVerified() {
    *this = ::std::move(from);
  }

  inline S2C_EmailVerified& operator=(const S2C_EmailVerified& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EmailVerified& operator=(S2C_EmailVerified&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EmailVerified& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EmailVerified* internal_default_instance() {
    return reinterpret_cast<const S2C_EmailVerified*>(
               &_S2C_EmailVerified_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S2C_EmailVerified& a, S2C_EmailVerified& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EmailVerified* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EmailVerified* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EmailVerified* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EmailVerified>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EmailVerified& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EmailVerified& from) {
    S2C_EmailVerified::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EmailVerified* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EmailVerified";
  }
  protected:
  explicit S2C_EmailVerified(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EmailVerified)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadServer) */ {
 public:
  inline C2S_LoadServer() : C2S_LoadServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LoadServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadServer(const C2S_LoadServer& from);
  C2S_LoadServer(C2S_LoadServer&& from) noexcept
    : C2S_LoadServer() {
    *this = ::std::move(from);
  }

  inline C2S_LoadServer& operator=(const C2S_LoadServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadServer& operator=(C2S_LoadServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadServer*>(
               &_C2S_LoadServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C2S_LoadServer& a, C2S_LoadServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LoadServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LoadServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadServer";
  }
  protected:
  explicit C2S_LoadServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadServer) */ {
 public:
  inline S2C_LoadServer() : S2C_LoadServer(nullptr) {}
  ~S2C_LoadServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadServer(const S2C_LoadServer& from);
  S2C_LoadServer(S2C_LoadServer&& from) noexcept
    : S2C_LoadServer() {
    *this = ::std::move(from);
  }

  inline S2C_LoadServer& operator=(const S2C_LoadServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadServer& operator=(S2C_LoadServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadServer*>(
               &_S2C_LoadServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S2C_LoadServer& a, S2C_LoadServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadServer& from) {
    S2C_LoadServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadServer";
  }
  protected:
  explicit S2C_LoadServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // repeated int32 port = 1;
  int port_size() const;
  private:
  int _internal_port_size() const;
  public:
  void clear_port();
  private:
  int32_t _internal_port(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_port() const;
  void _internal_add_port(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_port();
  public:
  int32_t port(int index) const;
  void set_port(int index, int32_t value);
  void add_port(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      port() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_port();

  // repeated string ip = 2;
  int ip_size() const;
  private:
  int _internal_ip_size() const;
  public:
  void clear_ip();
  const std::string& ip(int index) const;
  std::string* mutable_ip(int index);
  void set_ip(int index, const std::string& value);
  void set_ip(int index, std::string&& value);
  void set_ip(int index, const char* value);
  void set_ip(int index, const char* value, size_t size);
  std::string* add_ip();
  void add_ip(const std::string& value);
  void add_ip(std::string&& value);
  void add_ip(const char* value);
  void add_ip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ip();
  private:
  const std::string& _internal_ip(int index) const;
  std::string* _internal_add_ip();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > port_;
    mutable std::atomic<int> _port_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadCharacters final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadCharacters) */ {
 public:
  inline C2S_LoadCharacters() : C2S_LoadCharacters(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LoadCharacters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadCharacters(const C2S_LoadCharacters& from);
  C2S_LoadCharacters(C2S_LoadCharacters&& from) noexcept
    : C2S_LoadCharacters() {
    *this = ::std::move(from);
  }

  inline C2S_LoadCharacters& operator=(const C2S_LoadCharacters& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadCharacters& operator=(C2S_LoadCharacters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadCharacters& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadCharacters* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadCharacters*>(
               &_C2S_LoadCharacters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C2S_LoadCharacters& a, C2S_LoadCharacters& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadCharacters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadCharacters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadCharacters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadCharacters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LoadCharacters& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LoadCharacters& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadCharacters";
  }
  protected:
  explicit C2S_LoadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadCharacters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadCharacters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadCharacters) */ {
 public:
  inline S2C_LoadCharacters() : S2C_LoadCharacters(nullptr) {}
  ~S2C_LoadCharacters() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadCharacters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadCharacters(const S2C_LoadCharacters& from);
  S2C_LoadCharacters(S2C_LoadCharacters&& from) noexcept
    : S2C_LoadCharacters() {
    *this = ::std::move(from);
  }

  inline S2C_LoadCharacters& operator=(const S2C_LoadCharacters& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadCharacters& operator=(S2C_LoadCharacters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadCharacters& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadCharacters* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadCharacters*>(
               &_S2C_LoadCharacters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S2C_LoadCharacters& a, S2C_LoadCharacters& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadCharacters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadCharacters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadCharacters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadCharacters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadCharacters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadCharacters& from) {
    S2C_LoadCharacters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadCharacters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadCharacters";
  }
  protected:
  explicit S2C_LoadCharacters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
    kAppearanceFieldNumber = 2,
  };
  // repeated .Protocol.SCharacterData character = 1;
  int character_size() const;
  private:
  int _internal_character_size() const;
  public:
  void clear_character();
  ::Protocol::SCharacterData* mutable_character(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >*
      mutable_character();
  private:
  const ::Protocol::SCharacterData& _internal_character(int index) const;
  ::Protocol::SCharacterData* _internal_add_character();
  public:
  const ::Protocol::SCharacterData& character(int index) const;
  ::Protocol::SCharacterData* add_character();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >&
      character() const;

  // repeated .Protocol.SCharacterAppearance appearance = 2;
  int appearance_size() const;
  private:
  int _internal_appearance_size() const;
  public:
  void clear_appearance();
  ::Protocol::SCharacterAppearance* mutable_appearance(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterAppearance >*
      mutable_appearance();
  private:
  const ::Protocol::SCharacterAppearance& _internal_appearance(int index) const;
  ::Protocol::SCharacterAppearance* _internal_add_appearance();
  public:
  const ::Protocol::SCharacterAppearance& appearance(int index) const;
  ::Protocol::SCharacterAppearance* add_appearance();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterAppearance >&
      appearance() const;

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadCharacters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData > character_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterAppearance > appearance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_SelectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_SelectServer) */ {
 public:
  inline C2S_SelectServer() : C2S_SelectServer(nullptr) {}
  ~C2S_SelectServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_SelectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_SelectServer(const C2S_SelectServer& from);
  C2S_SelectServer(C2S_SelectServer&& from) noexcept
    : C2S_SelectServer() {
    *this = ::std::move(from);
  }

  inline C2S_SelectServer& operator=(const C2S_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_SelectServer& operator=(C2S_SelectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_SelectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_SelectServer* internal_default_instance() {
    return reinterpret_cast<const C2S_SelectServer*>(
               &_C2S_SelectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C2S_SelectServer& a, C2S_SelectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_SelectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_SelectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_SelectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_SelectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_SelectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_SelectServer& from) {
    C2S_SelectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_SelectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_SelectServer";
  }
  protected:
  explicit C2S_SelectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNumFieldNumber = 1,
  };
  // int32 server_num = 1;
  void clear_server_num();
  int32_t server_num() const;
  void set_server_num(int32_t value);
  private:
  int32_t _internal_server_num() const;
  void _internal_set_server_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_SelectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_SelectServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_SelectServer) */ {
 public:
  inline S2C_SelectServer() : S2C_SelectServer(nullptr) {}
  ~S2C_SelectServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_SelectServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SelectServer(const S2C_SelectServer& from);
  S2C_SelectServer(S2C_SelectServer&& from) noexcept
    : S2C_SelectServer() {
    *this = ::std::move(from);
  }

  inline S2C_SelectServer& operator=(const S2C_SelectServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SelectServer& operator=(S2C_SelectServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SelectServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SelectServer* internal_default_instance() {
    return reinterpret_cast<const S2C_SelectServer*>(
               &_S2C_SelectServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S2C_SelectServer& a, S2C_SelectServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SelectServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SelectServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SelectServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SelectServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_SelectServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_SelectServer& from) {
    S2C_SelectServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_SelectServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SelectServer";
  }
  protected:
  explicit S2C_SelectServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SelectServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_CreateCharacter) */ {
 public:
  inline C2S_CreateCharacter() : C2S_CreateCharacter(nullptr) {}
  ~C2S_CreateCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CreateCharacter(const C2S_CreateCharacter& from);
  C2S_CreateCharacter(C2S_CreateCharacter&& from) noexcept
    : C2S_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_CreateCharacter& operator=(const C2S_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CreateCharacter& operator=(C2S_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_CreateCharacter*>(
               &_C2S_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(C2S_CreateCharacter& a, C2S_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_CreateCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_CreateCharacter& from) {
    C2S_CreateCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CreateCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CreateCharacter";
  }
  protected:
  explicit C2S_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kAppearanceFieldNumber = 2,
  };
  // .Protocol.SCharacterData data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::Protocol::SCharacterData& data() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_data();
  ::Protocol::SCharacterData* mutable_data();
  void set_allocated_data(::Protocol::SCharacterData* data);
  private:
  const ::Protocol::SCharacterData& _internal_data() const;
  ::Protocol::SCharacterData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::Protocol::SCharacterData* data);
  ::Protocol::SCharacterData* unsafe_arena_release_data();

  // .Protocol.SCharacterAppearance appearance = 2;
  bool has_appearance() const;
  private:
  bool _internal_has_appearance() const;
  public:
  void clear_appearance();
  const ::Protocol::SCharacterAppearance& appearance() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterAppearance* release_appearance();
  ::Protocol::SCharacterAppearance* mutable_appearance();
  void set_allocated_appearance(::Protocol::SCharacterAppearance* appearance);
  private:
  const ::Protocol::SCharacterAppearance& _internal_appearance() const;
  ::Protocol::SCharacterAppearance* _internal_mutable_appearance();
  public:
  void unsafe_arena_set_allocated_appearance(
      ::Protocol::SCharacterAppearance* appearance);
  ::Protocol::SCharacterAppearance* unsafe_arena_release_appearance();

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SCharacterData* data_;
    ::Protocol::SCharacterAppearance* appearance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_CreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CreateCharacter) */ {
 public:
  inline S2C_CreateCharacter() : S2C_CreateCharacter(nullptr) {}
  ~S2C_CreateCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CreateCharacter(const S2C_CreateCharacter& from);
  S2C_CreateCharacter(S2C_CreateCharacter&& from) noexcept
    : S2C_CreateCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_CreateCharacter& operator=(const S2C_CreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CreateCharacter& operator=(S2C_CreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CreateCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_CreateCharacter*>(
               &_S2C_CreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S2C_CreateCharacter& a, S2C_CreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CreateCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CreateCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CreateCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_CreateCharacter& from) {
    S2C_CreateCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CreateCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CreateCharacter";
  }
  protected:
  explicit S2C_CreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_AppearanceCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_AppearanceCharacter) */ {
 public:
  inline C2S_AppearanceCharacter() : C2S_AppearanceCharacter(nullptr) {}
  ~C2S_AppearanceCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_AppearanceCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_AppearanceCharacter(const C2S_AppearanceCharacter& from);
  C2S_AppearanceCharacter(C2S_AppearanceCharacter&& from) noexcept
    : C2S_AppearanceCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_AppearanceCharacter& operator=(const C2S_AppearanceCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_AppearanceCharacter& operator=(C2S_AppearanceCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_AppearanceCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_AppearanceCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_AppearanceCharacter*>(
               &_C2S_AppearanceCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(C2S_AppearanceCharacter& a, C2S_AppearanceCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_AppearanceCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_AppearanceCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_AppearanceCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_AppearanceCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_AppearanceCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_AppearanceCharacter& from) {
    C2S_AppearanceCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_AppearanceCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_AppearanceCharacter";
  }
  protected:
  explicit C2S_AppearanceCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 1,
  };
  // .Protocol.SCharacterData character = 1;
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  const ::Protocol::SCharacterData& character() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_character();
  ::Protocol::SCharacterData* mutable_character();
  void set_allocated_character(::Protocol::SCharacterData* character);
  private:
  const ::Protocol::SCharacterData& _internal_character() const;
  ::Protocol::SCharacterData* _internal_mutable_character();
  public:
  void unsafe_arena_set_allocated_character(
      ::Protocol::SCharacterData* character);
  ::Protocol::SCharacterData* unsafe_arena_release_character();

  // @@protoc_insertion_point(class_scope:Protocol.C2S_AppearanceCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SCharacterData* character_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearanceCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearanceCharacter) */ {
 public:
  inline S2C_AppearanceCharacter() : S2C_AppearanceCharacter(nullptr) {}
  ~S2C_AppearanceCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearanceCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearanceCharacter(const S2C_AppearanceCharacter& from);
  S2C_AppearanceCharacter(S2C_AppearanceCharacter&& from) noexcept
    : S2C_AppearanceCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_AppearanceCharacter& operator=(const S2C_AppearanceCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearanceCharacter& operator=(S2C_AppearanceCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearanceCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearanceCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearanceCharacter*>(
               &_S2C_AppearanceCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S2C_AppearanceCharacter& a, S2C_AppearanceCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearanceCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearanceCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearanceCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearanceCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearanceCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearanceCharacter& from) {
    S2C_AppearanceCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearanceCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearanceCharacter";
  }
  protected:
  explicit S2C_AppearanceCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearanceCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_DeleteCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_DeleteCharacter) */ {
 public:
  inline C2S_DeleteCharacter() : C2S_DeleteCharacter(nullptr) {}
  ~C2S_DeleteCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_DeleteCharacter(const C2S_DeleteCharacter& from);
  C2S_DeleteCharacter(C2S_DeleteCharacter&& from) noexcept
    : C2S_DeleteCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_DeleteCharacter& operator=(const C2S_DeleteCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_DeleteCharacter& operator=(C2S_DeleteCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_DeleteCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_DeleteCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_DeleteCharacter*>(
               &_C2S_DeleteCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(C2S_DeleteCharacter& a, C2S_DeleteCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_DeleteCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_DeleteCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_DeleteCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_DeleteCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_DeleteCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_DeleteCharacter& from) {
    C2S_DeleteCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_DeleteCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_DeleteCharacter";
  }
  protected:
  explicit C2S_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_DeleteCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DeleteCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DeleteCharacter) */ {
 public:
  inline S2C_DeleteCharacter() : S2C_DeleteCharacter(nullptr) {}
  ~S2C_DeleteCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DeleteCharacter(const S2C_DeleteCharacter& from);
  S2C_DeleteCharacter(S2C_DeleteCharacter&& from) noexcept
    : S2C_DeleteCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_DeleteCharacter& operator=(const S2C_DeleteCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DeleteCharacter& operator=(S2C_DeleteCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DeleteCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DeleteCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_DeleteCharacter*>(
               &_S2C_DeleteCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S2C_DeleteCharacter& a, S2C_DeleteCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DeleteCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DeleteCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DeleteCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DeleteCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DeleteCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DeleteCharacter& from) {
    S2C_DeleteCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DeleteCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DeleteCharacter";
  }
  protected:
  explicit S2C_DeleteCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DeleteCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_UpdateNickName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_UpdateNickName) */ {
 public:
  inline C2S_UpdateNickName() : C2S_UpdateNickName(nullptr) {}
  ~C2S_UpdateNickName() override;
  explicit PROTOBUF_CONSTEXPR C2S_UpdateNickName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_UpdateNickName(const C2S_UpdateNickName& from);
  C2S_UpdateNickName(C2S_UpdateNickName&& from) noexcept
    : C2S_UpdateNickName() {
    *this = ::std::move(from);
  }

  inline C2S_UpdateNickName& operator=(const C2S_UpdateNickName& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_UpdateNickName& operator=(C2S_UpdateNickName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_UpdateNickName& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_UpdateNickName* internal_default_instance() {
    return reinterpret_cast<const C2S_UpdateNickName*>(
               &_C2S_UpdateNickName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(C2S_UpdateNickName& a, C2S_UpdateNickName& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_UpdateNickName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_UpdateNickName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_UpdateNickName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_UpdateNickName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_UpdateNickName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_UpdateNickName& from) {
    C2S_UpdateNickName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_UpdateNickName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_UpdateNickName";
  }
  protected:
  explicit C2S_UpdateNickName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 1,
    kNewNameFieldNumber = 2,
  };
  // bytes old_name = 1;
  void clear_old_name();
  const std::string& old_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_name();
  PROTOBUF_NODISCARD std::string* release_old_name();
  void set_allocated_old_name(std::string* old_name);
  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(const std::string& value);
  std::string* _internal_mutable_old_name();
  public:

  // bytes new_name = 2;
  void clear_new_name();
  const std::string& new_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* new_name);
  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(const std::string& value);
  std::string* _internal_mutable_new_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_UpdateNickName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_UpdateNickName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_UpdateNickName) */ {
 public:
  inline S2C_UpdateNickName() : S2C_UpdateNickName(nullptr) {}
  ~S2C_UpdateNickName() override;
  explicit PROTOBUF_CONSTEXPR S2C_UpdateNickName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_UpdateNickName(const S2C_UpdateNickName& from);
  S2C_UpdateNickName(S2C_UpdateNickName&& from) noexcept
    : S2C_UpdateNickName() {
    *this = ::std::move(from);
  }

  inline S2C_UpdateNickName& operator=(const S2C_UpdateNickName& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_UpdateNickName& operator=(S2C_UpdateNickName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_UpdateNickName& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_UpdateNickName* internal_default_instance() {
    return reinterpret_cast<const S2C_UpdateNickName*>(
               &_S2C_UpdateNickName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(S2C_UpdateNickName& a, S2C_UpdateNickName& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_UpdateNickName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_UpdateNickName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_UpdateNickName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_UpdateNickName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_UpdateNickName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_UpdateNickName& from) {
    S2C_UpdateNickName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_UpdateNickName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_UpdateNickName";
  }
  protected:
  explicit S2C_UpdateNickName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_UpdateNickName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_TravelServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_TravelServer) */ {
 public:
  inline C2S_TravelServer() : C2S_TravelServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_TravelServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_TravelServer(const C2S_TravelServer& from);
  C2S_TravelServer(C2S_TravelServer&& from) noexcept
    : C2S_TravelServer() {
    *this = ::std::move(from);
  }

  inline C2S_TravelServer& operator=(const C2S_TravelServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_TravelServer& operator=(C2S_TravelServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_TravelServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_TravelServer* internal_default_instance() {
    return reinterpret_cast<const C2S_TravelServer*>(
               &_C2S_TravelServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(C2S_TravelServer& a, C2S_TravelServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_TravelServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_TravelServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_TravelServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_TravelServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_TravelServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_TravelServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_TravelServer";
  }
  protected:
  explicit C2S_TravelServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_TravelServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_TravelServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_TravelServer) */ {
 public:
  inline S2C_TravelServer() : S2C_TravelServer(nullptr) {}
  ~S2C_TravelServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_TravelServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_TravelServer(const S2C_TravelServer& from);
  S2C_TravelServer(S2C_TravelServer&& from) noexcept
    : S2C_TravelServer() {
    *this = ::std::move(from);
  }

  inline S2C_TravelServer& operator=(const S2C_TravelServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_TravelServer& operator=(S2C_TravelServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_TravelServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_TravelServer* internal_default_instance() {
    return reinterpret_cast<const S2C_TravelServer*>(
               &_S2C_TravelServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(S2C_TravelServer& a, S2C_TravelServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_TravelServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_TravelServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_TravelServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_TravelServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_TravelServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_TravelServer& from) {
    S2C_TravelServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_TravelServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_TravelServer";
  }
  protected:
  explicit S2C_TravelServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_TravelServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_IdentityPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserData

// string id = 1;
inline void UserData::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& UserData::id() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.id)
}
inline std::string* UserData::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.id)
  return _s;
}
inline const std::string& UserData::_internal_id() const {
  return _impl_.id_.Get();
}
inline void UserData::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.id)
  return _impl_.id_.Release();
}
inline void UserData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.id)
}

// string password = 2;
inline void UserData::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserData::password() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.password)
}
inline std::string* UserData::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.password)
  return _s;
}
inline const std::string& UserData::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserData::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.password)
  return _impl_.password_.Release();
}
inline void UserData::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.password)
}

// bool activate = 3;
inline void UserData::clear_activate() {
  _impl_.activate_ = false;
}
inline bool UserData::_internal_activate() const {
  return _impl_.activate_;
}
inline bool UserData::activate() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.activate)
  return _internal_activate();
}
inline void UserData::_internal_set_activate(bool value) {
  
  _impl_.activate_ = value;
}
inline void UserData::set_activate(bool value) {
  _internal_set_activate(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.activate)
}

// bool confirmed = 4;
inline void UserData::clear_confirmed() {
  _impl_.confirmed_ = false;
}
inline bool UserData::_internal_confirmed() const {
  return _impl_.confirmed_;
}
inline bool UserData::confirmed() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.confirmed)
  return _internal_confirmed();
}
inline void UserData::_internal_set_confirmed(bool value) {
  
  _impl_.confirmed_ = value;
}
inline void UserData::set_confirmed(bool value) {
  _internal_set_confirmed(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.confirmed)
}

// string email = 5;
inline void UserData::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& UserData::email() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.email)
}
inline std::string* UserData::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.email)
  return _s;
}
inline const std::string& UserData::_internal_email() const {
  return _impl_.email_.Get();
}
inline void UserData::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.email)
  return _impl_.email_.Release();
}
inline void UserData::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.email)
}

// bool verified = 6;
inline void UserData::clear_verified() {
  _impl_.verified_ = false;
}
inline bool UserData::_internal_verified() const {
  return _impl_.verified_;
}
inline bool UserData::verified() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.verified)
  return _internal_verified();
}
inline void UserData::_internal_set_verified(bool value) {
  
  _impl_.verified_ = value;
}
inline void UserData::set_verified(bool value) {
  _internal_set_verified(value);
  // @@protoc_insertion_point(field_set:Protocol.UserData.verified)
}

// string update_date = 7;
inline void UserData::clear_update_date() {
  _impl_.update_date_.ClearToEmpty();
}
inline const std::string& UserData::update_date() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.update_date)
  return _internal_update_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_update_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.update_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.update_date)
}
inline std::string* UserData::mutable_update_date() {
  std::string* _s = _internal_mutable_update_date();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.update_date)
  return _s;
}
inline const std::string& UserData::_internal_update_date() const {
  return _impl_.update_date_.Get();
}
inline void UserData::_internal_set_update_date(const std::string& value) {
  
  _impl_.update_date_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_update_date() {
  
  return _impl_.update_date_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_update_date() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.update_date)
  return _impl_.update_date_.Release();
}
inline void UserData::set_allocated_update_date(std::string* update_date) {
  if (update_date != nullptr) {
    
  } else {
    
  }
  _impl_.update_date_.SetAllocated(update_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.update_date_.IsDefault()) {
    _impl_.update_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.update_date)
}

// string create_date = 8;
inline void UserData::clear_create_date() {
  _impl_.create_date_.ClearToEmpty();
}
inline const std::string& UserData::create_date() const {
  // @@protoc_insertion_point(field_get:Protocol.UserData.create_date)
  return _internal_create_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserData::set_create_date(ArgT0&& arg0, ArgT... args) {
 
 _impl_.create_date_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.UserData.create_date)
}
inline std::string* UserData::mutable_create_date() {
  std::string* _s = _internal_mutable_create_date();
  // @@protoc_insertion_point(field_mutable:Protocol.UserData.create_date)
  return _s;
}
inline const std::string& UserData::_internal_create_date() const {
  return _impl_.create_date_.Get();
}
inline void UserData::_internal_set_create_date(const std::string& value) {
  
  _impl_.create_date_.Set(value, GetArenaForAllocation());
}
inline std::string* UserData::_internal_mutable_create_date() {
  
  return _impl_.create_date_.Mutable(GetArenaForAllocation());
}
inline std::string* UserData::release_create_date() {
  // @@protoc_insertion_point(field_release:Protocol.UserData.create_date)
  return _impl_.create_date_.Release();
}
inline void UserData::set_allocated_create_date(std::string* create_date) {
  if (create_date != nullptr) {
    
  } else {
    
  }
  _impl_.create_date_.SetAllocated(create_date, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.create_date_.IsDefault()) {
    _impl_.create_date_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.UserData.create_date)
}

// -------------------------------------------------------------------

// SCharacterData

// bytes name = 1;
inline void SCharacterData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SCharacterData::name() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SCharacterData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.name)
}
inline std::string* SCharacterData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.SCharacterData.name)
  return _s;
}
inline const std::string& SCharacterData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SCharacterData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SCharacterData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SCharacterData::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.SCharacterData.name)
  return _impl_.name_.Release();
}
inline void SCharacterData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.SCharacterData.name)
}

// int32 level = 2;
inline void SCharacterData::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SCharacterData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SCharacterData::level() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.level)
  return _internal_level();
}
inline void SCharacterData::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SCharacterData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.level)
}

// int32 job = 3;
inline void SCharacterData::clear_job() {
  _impl_.job_ = 0;
}
inline int32_t SCharacterData::_internal_job() const {
  return _impl_.job_;
}
inline int32_t SCharacterData::job() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.job)
  return _internal_job();
}
inline void SCharacterData::_internal_set_job(int32_t value) {
  
  _impl_.job_ = value;
}
inline void SCharacterData::set_job(int32_t value) {
  _internal_set_job(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.job)
}

// int32 tribe = 4;
inline void SCharacterData::clear_tribe() {
  _impl_.tribe_ = 0;
}
inline int32_t SCharacterData::_internal_tribe() const {
  return _impl_.tribe_;
}
inline int32_t SCharacterData::tribe() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.tribe)
  return _internal_tribe();
}
inline void SCharacterData::_internal_set_tribe(int32_t value) {
  
  _impl_.tribe_ = value;
}
inline void SCharacterData::set_tribe(int32_t value) {
  _internal_set_tribe(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.tribe)
}

// int32 position = 5;
inline void SCharacterData::clear_position() {
  _impl_.position_ = 0;
}
inline int32_t SCharacterData::_internal_position() const {
  return _impl_.position_;
}
inline int32_t SCharacterData::position() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterData.position)
  return _internal_position();
}
inline void SCharacterData::_internal_set_position(int32_t value) {
  
  _impl_.position_ = value;
}
inline void SCharacterData::set_position(int32_t value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterData.position)
}

// -------------------------------------------------------------------

// SCharacterAppearance

// uint32 body_color = 1;
inline void SCharacterAppearance::clear_body_color() {
  _impl_.body_color_ = 0u;
}
inline uint32_t SCharacterAppearance::_internal_body_color() const {
  return _impl_.body_color_;
}
inline uint32_t SCharacterAppearance::body_color() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.body_color)
  return _internal_body_color();
}
inline void SCharacterAppearance::_internal_set_body_color(uint32_t value) {
  
  _impl_.body_color_ = value;
}
inline void SCharacterAppearance::set_body_color(uint32_t value) {
  _internal_set_body_color(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.body_color)
}

// uint32 hair_color = 2;
inline void SCharacterAppearance::clear_hair_color() {
  _impl_.hair_color_ = 0u;
}
inline uint32_t SCharacterAppearance::_internal_hair_color() const {
  return _impl_.hair_color_;
}
inline uint32_t SCharacterAppearance::hair_color() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.hair_color)
  return _internal_hair_color();
}
inline void SCharacterAppearance::_internal_set_hair_color(uint32_t value) {
  
  _impl_.hair_color_ = value;
}
inline void SCharacterAppearance::set_hair_color(uint32_t value) {
  _internal_set_hair_color(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.hair_color)
}

// uint32 eye_color = 3;
inline void SCharacterAppearance::clear_eye_color() {
  _impl_.eye_color_ = 0u;
}
inline uint32_t SCharacterAppearance::_internal_eye_color() const {
  return _impl_.eye_color_;
}
inline uint32_t SCharacterAppearance::eye_color() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.eye_color)
  return _internal_eye_color();
}
inline void SCharacterAppearance::_internal_set_eye_color(uint32_t value) {
  
  _impl_.eye_color_ = value;
}
inline void SCharacterAppearance::set_eye_color(uint32_t value) {
  _internal_set_eye_color(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.eye_color)
}

// int32 head = 4;
inline void SCharacterAppearance::clear_head() {
  _impl_.head_ = 0;
}
inline int32_t SCharacterAppearance::_internal_head() const {
  return _impl_.head_;
}
inline int32_t SCharacterAppearance::head() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.head)
  return _internal_head();
}
inline void SCharacterAppearance::_internal_set_head(int32_t value) {
  
  _impl_.head_ = value;
}
inline void SCharacterAppearance::set_head(int32_t value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.head)
}

// int32 ears = 5;
inline void SCharacterAppearance::clear_ears() {
  _impl_.ears_ = 0;
}
inline int32_t SCharacterAppearance::_internal_ears() const {
  return _impl_.ears_;
}
inline int32_t SCharacterAppearance::ears() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.ears)
  return _internal_ears();
}
inline void SCharacterAppearance::_internal_set_ears(int32_t value) {
  
  _impl_.ears_ = value;
}
inline void SCharacterAppearance::set_ears(int32_t value) {
  _internal_set_ears(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.ears)
}

// int32 feet = 6;
inline void SCharacterAppearance::clear_feet() {
  _impl_.feet_ = 0;
}
inline int32_t SCharacterAppearance::_internal_feet() const {
  return _impl_.feet_;
}
inline int32_t SCharacterAppearance::feet() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.feet)
  return _internal_feet();
}
inline void SCharacterAppearance::_internal_set_feet(int32_t value) {
  
  _impl_.feet_ = value;
}
inline void SCharacterAppearance::set_feet(int32_t value) {
  _internal_set_feet(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.feet)
}

// int32 hair = 7;
inline void SCharacterAppearance::clear_hair() {
  _impl_.hair_ = 0;
}
inline int32_t SCharacterAppearance::_internal_hair() const {
  return _impl_.hair_;
}
inline int32_t SCharacterAppearance::hair() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.hair)
  return _internal_hair();
}
inline void SCharacterAppearance::_internal_set_hair(int32_t value) {
  
  _impl_.hair_ = value;
}
inline void SCharacterAppearance::set_hair(int32_t value) {
  _internal_set_hair(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.hair)
}

// int32 facials_01 = 8;
inline void SCharacterAppearance::clear_facials_01() {
  _impl_.facials_01_ = 0;
}
inline int32_t SCharacterAppearance::_internal_facials_01() const {
  return _impl_.facials_01_;
}
inline int32_t SCharacterAppearance::facials_01() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.facials_01)
  return _internal_facials_01();
}
inline void SCharacterAppearance::_internal_set_facials_01(int32_t value) {
  
  _impl_.facials_01_ = value;
}
inline void SCharacterAppearance::set_facials_01(int32_t value) {
  _internal_set_facials_01(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.facials_01)
}

// int32 facials_02 = 9;
inline void SCharacterAppearance::clear_facials_02() {
  _impl_.facials_02_ = 0;
}
inline int32_t SCharacterAppearance::_internal_facials_02() const {
  return _impl_.facials_02_;
}
inline int32_t SCharacterAppearance::facials_02() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.facials_02)
  return _internal_facials_02();
}
inline void SCharacterAppearance::_internal_set_facials_02(int32_t value) {
  
  _impl_.facials_02_ = value;
}
inline void SCharacterAppearance::set_facials_02(int32_t value) {
  _internal_set_facials_02(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.facials_02)
}

// int32 helmet = 10;
inline void SCharacterAppearance::clear_helmet() {
  _impl_.helmet_ = 0;
}
inline int32_t SCharacterAppearance::_internal_helmet() const {
  return _impl_.helmet_;
}
inline int32_t SCharacterAppearance::helmet() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.helmet)
  return _internal_helmet();
}
inline void SCharacterAppearance::_internal_set_helmet(int32_t value) {
  
  _impl_.helmet_ = value;
}
inline void SCharacterAppearance::set_helmet(int32_t value) {
  _internal_set_helmet(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.helmet)
}

// int32 shoulders = 11;
inline void SCharacterAppearance::clear_shoulders() {
  _impl_.shoulders_ = 0;
}
inline int32_t SCharacterAppearance::_internal_shoulders() const {
  return _impl_.shoulders_;
}
inline int32_t SCharacterAppearance::shoulders() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.shoulders)
  return _internal_shoulders();
}
inline void SCharacterAppearance::_internal_set_shoulders(int32_t value) {
  
  _impl_.shoulders_ = value;
}
inline void SCharacterAppearance::set_shoulders(int32_t value) {
  _internal_set_shoulders(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.shoulders)
}

// int32 skirt = 12;
inline void SCharacterAppearance::clear_skirt() {
  _impl_.skirt_ = 0;
}
inline int32_t SCharacterAppearance::_internal_skirt() const {
  return _impl_.skirt_;
}
inline int32_t SCharacterAppearance::skirt() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.skirt)
  return _internal_skirt();
}
inline void SCharacterAppearance::_internal_set_skirt(int32_t value) {
  
  _impl_.skirt_ = value;
}
inline void SCharacterAppearance::set_skirt(int32_t value) {
  _internal_set_skirt(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.skirt)
}

// int32 legs = 13;
inline void SCharacterAppearance::clear_legs() {
  _impl_.legs_ = 0;
}
inline int32_t SCharacterAppearance::_internal_legs() const {
  return _impl_.legs_;
}
inline int32_t SCharacterAppearance::legs() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.legs)
  return _internal_legs();
}
inline void SCharacterAppearance::_internal_set_legs(int32_t value) {
  
  _impl_.legs_ = value;
}
inline void SCharacterAppearance::set_legs(int32_t value) {
  _internal_set_legs(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.legs)
}

// int32 legs_add = 14;
inline void SCharacterAppearance::clear_legs_add() {
  _impl_.legs_add_ = 0;
}
inline int32_t SCharacterAppearance::_internal_legs_add() const {
  return _impl_.legs_add_;
}
inline int32_t SCharacterAppearance::legs_add() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.legs_add)
  return _internal_legs_add();
}
inline void SCharacterAppearance::_internal_set_legs_add(int32_t value) {
  
  _impl_.legs_add_ = value;
}
inline void SCharacterAppearance::set_legs_add(int32_t value) {
  _internal_set_legs_add(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.legs_add)
}

// int32 hands = 15;
inline void SCharacterAppearance::clear_hands() {
  _impl_.hands_ = 0;
}
inline int32_t SCharacterAppearance::_internal_hands() const {
  return _impl_.hands_;
}
inline int32_t SCharacterAppearance::hands() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.hands)
  return _internal_hands();
}
inline void SCharacterAppearance::_internal_set_hands(int32_t value) {
  
  _impl_.hands_ = value;
}
inline void SCharacterAppearance::set_hands(int32_t value) {
  _internal_set_hands(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.hands)
}

// int32 hands_add = 16;
inline void SCharacterAppearance::clear_hands_add() {
  _impl_.hands_add_ = 0;
}
inline int32_t SCharacterAppearance::_internal_hands_add() const {
  return _impl_.hands_add_;
}
inline int32_t SCharacterAppearance::hands_add() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.hands_add)
  return _internal_hands_add();
}
inline void SCharacterAppearance::_internal_set_hands_add(int32_t value) {
  
  _impl_.hands_add_ = value;
}
inline void SCharacterAppearance::set_hands_add(int32_t value) {
  _internal_set_hands_add(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.hands_add)
}

// int32 chest = 17;
inline void SCharacterAppearance::clear_chest() {
  _impl_.chest_ = 0;
}
inline int32_t SCharacterAppearance::_internal_chest() const {
  return _impl_.chest_;
}
inline int32_t SCharacterAppearance::chest() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.chest)
  return _internal_chest();
}
inline void SCharacterAppearance::_internal_set_chest(int32_t value) {
  
  _impl_.chest_ = value;
}
inline void SCharacterAppearance::set_chest(int32_t value) {
  _internal_set_chest(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.chest)
}

// int32 chest_add = 18;
inline void SCharacterAppearance::clear_chest_add() {
  _impl_.chest_add_ = 0;
}
inline int32_t SCharacterAppearance::_internal_chest_add() const {
  return _impl_.chest_add_;
}
inline int32_t SCharacterAppearance::chest_add() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.chest_add)
  return _internal_chest_add();
}
inline void SCharacterAppearance::_internal_set_chest_add(int32_t value) {
  
  _impl_.chest_add_ = value;
}
inline void SCharacterAppearance::set_chest_add(int32_t value) {
  _internal_set_chest_add(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.chest_add)
}

// int32 cape = 19;
inline void SCharacterAppearance::clear_cape() {
  _impl_.cape_ = 0;
}
inline int32_t SCharacterAppearance::_internal_cape() const {
  return _impl_.cape_;
}
inline int32_t SCharacterAppearance::cape() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.cape)
  return _internal_cape();
}
inline void SCharacterAppearance::_internal_set_cape(int32_t value) {
  
  _impl_.cape_ = value;
}
inline void SCharacterAppearance::set_cape(int32_t value) {
  _internal_set_cape(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.cape)
}

// int32 bracers = 20;
inline void SCharacterAppearance::clear_bracers() {
  _impl_.bracers_ = 0;
}
inline int32_t SCharacterAppearance::_internal_bracers() const {
  return _impl_.bracers_;
}
inline int32_t SCharacterAppearance::bracers() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.bracers)
  return _internal_bracers();
}
inline void SCharacterAppearance::_internal_set_bracers(int32_t value) {
  
  _impl_.bracers_ = value;
}
inline void SCharacterAppearance::set_bracers(int32_t value) {
  _internal_set_bracers(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.bracers)
}

// int32 bracers_add = 21;
inline void SCharacterAppearance::clear_bracers_add() {
  _impl_.bracers_add_ = 0;
}
inline int32_t SCharacterAppearance::_internal_bracers_add() const {
  return _impl_.bracers_add_;
}
inline int32_t SCharacterAppearance::bracers_add() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.bracers_add)
  return _internal_bracers_add();
}
inline void SCharacterAppearance::_internal_set_bracers_add(int32_t value) {
  
  _impl_.bracers_add_ = value;
}
inline void SCharacterAppearance::set_bracers_add(int32_t value) {
  _internal_set_bracers_add(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.bracers_add)
}

// int32 boots = 22;
inline void SCharacterAppearance::clear_boots() {
  _impl_.boots_ = 0;
}
inline int32_t SCharacterAppearance::_internal_boots() const {
  return _impl_.boots_;
}
inline int32_t SCharacterAppearance::boots() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.boots)
  return _internal_boots();
}
inline void SCharacterAppearance::_internal_set_boots(int32_t value) {
  
  _impl_.boots_ = value;
}
inline void SCharacterAppearance::set_boots(int32_t value) {
  _internal_set_boots(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.boots)
}

// int32 belt = 23;
inline void SCharacterAppearance::clear_belt() {
  _impl_.belt_ = 0;
}
inline int32_t SCharacterAppearance::_internal_belt() const {
  return _impl_.belt_;
}
inline int32_t SCharacterAppearance::belt() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.belt)
  return _internal_belt();
}
inline void SCharacterAppearance::_internal_set_belt(int32_t value) {
  
  _impl_.belt_ = value;
}
inline void SCharacterAppearance::set_belt(int32_t value) {
  _internal_set_belt(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.belt)
}

// int32 tabard = 24;
inline void SCharacterAppearance::clear_tabard() {
  _impl_.tabard_ = 0;
}
inline int32_t SCharacterAppearance::_internal_tabard() const {
  return _impl_.tabard_;
}
inline int32_t SCharacterAppearance::tabard() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.tabard)
  return _internal_tabard();
}
inline void SCharacterAppearance::_internal_set_tabard(int32_t value) {
  
  _impl_.tabard_ = value;
}
inline void SCharacterAppearance::set_tabard(int32_t value) {
  _internal_set_tabard(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.tabard)
}

// int32 back_2hl = 25;
inline void SCharacterAppearance::clear_back_2hl() {
  _impl_.back_2hl_ = 0;
}
inline int32_t SCharacterAppearance::_internal_back_2hl() const {
  return _impl_.back_2hl_;
}
inline int32_t SCharacterAppearance::back_2hl() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.back_2hl)
  return _internal_back_2hl();
}
inline void SCharacterAppearance::_internal_set_back_2hl(int32_t value) {
  
  _impl_.back_2hl_ = value;
}
inline void SCharacterAppearance::set_back_2hl(int32_t value) {
  _internal_set_back_2hl(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.back_2hl)
}

// int32 back_shield = 26;
inline void SCharacterAppearance::clear_back_shield() {
  _impl_.back_shield_ = 0;
}
inline int32_t SCharacterAppearance::_internal_back_shield() const {
  return _impl_.back_shield_;
}
inline int32_t SCharacterAppearance::back_shield() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.back_shield)
  return _internal_back_shield();
}
inline void SCharacterAppearance::_internal_set_back_shield(int32_t value) {
  
  _impl_.back_shield_ = value;
}
inline void SCharacterAppearance::set_back_shield(int32_t value) {
  _internal_set_back_shield(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.back_shield)
}

// int32 back_weapon_l = 27;
inline void SCharacterAppearance::clear_back_weapon_l() {
  _impl_.back_weapon_l_ = 0;
}
inline int32_t SCharacterAppearance::_internal_back_weapon_l() const {
  return _impl_.back_weapon_l_;
}
inline int32_t SCharacterAppearance::back_weapon_l() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.back_weapon_l)
  return _internal_back_weapon_l();
}
inline void SCharacterAppearance::_internal_set_back_weapon_l(int32_t value) {
  
  _impl_.back_weapon_l_ = value;
}
inline void SCharacterAppearance::set_back_weapon_l(int32_t value) {
  _internal_set_back_weapon_l(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.back_weapon_l)
}

// int32 back_weapon_r = 28;
inline void SCharacterAppearance::clear_back_weapon_r() {
  _impl_.back_weapon_r_ = 0;
}
inline int32_t SCharacterAppearance::_internal_back_weapon_r() const {
  return _impl_.back_weapon_r_;
}
inline int32_t SCharacterAppearance::back_weapon_r() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.back_weapon_r)
  return _internal_back_weapon_r();
}
inline void SCharacterAppearance::_internal_set_back_weapon_r(int32_t value) {
  
  _impl_.back_weapon_r_ = value;
}
inline void SCharacterAppearance::set_back_weapon_r(int32_t value) {
  _internal_set_back_weapon_r(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.back_weapon_r)
}

// int32 back_bow = 29;
inline void SCharacterAppearance::clear_back_bow() {
  _impl_.back_bow_ = 0;
}
inline int32_t SCharacterAppearance::_internal_back_bow() const {
  return _impl_.back_bow_;
}
inline int32_t SCharacterAppearance::back_bow() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.back_bow)
  return _internal_back_bow();
}
inline void SCharacterAppearance::_internal_set_back_bow(int32_t value) {
  
  _impl_.back_bow_ = value;
}
inline void SCharacterAppearance::set_back_bow(int32_t value) {
  _internal_set_back_bow(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.back_bow)
}

// int32 quiver = 30;
inline void SCharacterAppearance::clear_quiver() {
  _impl_.quiver_ = 0;
}
inline int32_t SCharacterAppearance::_internal_quiver() const {
  return _impl_.quiver_;
}
inline int32_t SCharacterAppearance::quiver() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.quiver)
  return _internal_quiver();
}
inline void SCharacterAppearance::_internal_set_quiver(int32_t value) {
  
  _impl_.quiver_ = value;
}
inline void SCharacterAppearance::set_quiver(int32_t value) {
  _internal_set_quiver(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.quiver)
}

// int32 weapon_r_arrow = 31;
inline void SCharacterAppearance::clear_weapon_r_arrow() {
  _impl_.weapon_r_arrow_ = 0;
}
inline int32_t SCharacterAppearance::_internal_weapon_r_arrow() const {
  return _impl_.weapon_r_arrow_;
}
inline int32_t SCharacterAppearance::weapon_r_arrow() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.weapon_r_arrow)
  return _internal_weapon_r_arrow();
}
inline void SCharacterAppearance::_internal_set_weapon_r_arrow(int32_t value) {
  
  _impl_.weapon_r_arrow_ = value;
}
inline void SCharacterAppearance::set_weapon_r_arrow(int32_t value) {
  _internal_set_weapon_r_arrow(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.weapon_r_arrow)
}

// int32 weapon_shield = 32;
inline void SCharacterAppearance::clear_weapon_shield() {
  _impl_.weapon_shield_ = 0;
}
inline int32_t SCharacterAppearance::_internal_weapon_shield() const {
  return _impl_.weapon_shield_;
}
inline int32_t SCharacterAppearance::weapon_shield() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.weapon_shield)
  return _internal_weapon_shield();
}
inline void SCharacterAppearance::_internal_set_weapon_shield(int32_t value) {
  
  _impl_.weapon_shield_ = value;
}
inline void SCharacterAppearance::set_weapon_shield(int32_t value) {
  _internal_set_weapon_shield(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.weapon_shield)
}

// int32 weapon_l = 33;
inline void SCharacterAppearance::clear_weapon_l() {
  _impl_.weapon_l_ = 0;
}
inline int32_t SCharacterAppearance::_internal_weapon_l() const {
  return _impl_.weapon_l_;
}
inline int32_t SCharacterAppearance::weapon_l() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.weapon_l)
  return _internal_weapon_l();
}
inline void SCharacterAppearance::_internal_set_weapon_l(int32_t value) {
  
  _impl_.weapon_l_ = value;
}
inline void SCharacterAppearance::set_weapon_l(int32_t value) {
  _internal_set_weapon_l(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.weapon_l)
}

// int32 weapon_r = 34;
inline void SCharacterAppearance::clear_weapon_r() {
  _impl_.weapon_r_ = 0;
}
inline int32_t SCharacterAppearance::_internal_weapon_r() const {
  return _impl_.weapon_r_;
}
inline int32_t SCharacterAppearance::weapon_r() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.weapon_r)
  return _internal_weapon_r();
}
inline void SCharacterAppearance::_internal_set_weapon_r(int32_t value) {
  
  _impl_.weapon_r_ = value;
}
inline void SCharacterAppearance::set_weapon_r(int32_t value) {
  _internal_set_weapon_r(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.weapon_r)
}

// int32 hip_l = 35;
inline void SCharacterAppearance::clear_hip_l() {
  _impl_.hip_l_ = 0;
}
inline int32_t SCharacterAppearance::_internal_hip_l() const {
  return _impl_.hip_l_;
}
inline int32_t SCharacterAppearance::hip_l() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.hip_l)
  return _internal_hip_l();
}
inline void SCharacterAppearance::_internal_set_hip_l(int32_t value) {
  
  _impl_.hip_l_ = value;
}
inline void SCharacterAppearance::set_hip_l(int32_t value) {
  _internal_set_hip_l(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.hip_l)
}

// int32 hip_r = 36;
inline void SCharacterAppearance::clear_hip_r() {
  _impl_.hip_r_ = 0;
}
inline int32_t SCharacterAppearance::_internal_hip_r() const {
  return _impl_.hip_r_;
}
inline int32_t SCharacterAppearance::hip_r() const {
  // @@protoc_insertion_point(field_get:Protocol.SCharacterAppearance.hip_r)
  return _internal_hip_r();
}
inline void SCharacterAppearance::_internal_set_hip_r(int32_t value) {
  
  _impl_.hip_r_ = value;
}
inline void SCharacterAppearance::set_hip_r(int32_t value) {
  _internal_set_hip_r(value);
  // @@protoc_insertion_point(field_set:Protocol.SCharacterAppearance.hip_r)
}

// -------------------------------------------------------------------

// C2S_EnterServer

// int32 error = 1;
inline void C2S_EnterServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t C2S_EnterServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t C2S_EnterServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EnterServer.error)
  return _internal_error();
}
inline void C2S_EnterServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void C2S_EnterServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_EnterServer.error)
}

// -------------------------------------------------------------------

// S2C_EnterServer

// int32 error = 1;
inline void S2C_EnterServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EnterServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EnterServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterServer.error)
  return _internal_error();
}
inline void S2C_EnterServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EnterServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterServer.error)
}

// -------------------------------------------------------------------

// C2S_LeaveServer

// int32 error = 1;
inline void C2S_LeaveServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t C2S_LeaveServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t C2S_LeaveServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LeaveServer.error)
  return _internal_error();
}
inline void C2S_LeaveServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void C2S_LeaveServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LeaveServer.error)
}

// -------------------------------------------------------------------

// S2C_LeaveServer

// int32 error = 1;
inline void S2C_LeaveServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LeaveServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LeaveServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveServer.error)
  return _internal_error();
}
inline void S2C_LeaveServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LeaveServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveServer.error)
}

// -------------------------------------------------------------------

// C2S_Singin

// string id = 1;
inline void C2S_Singin::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C2S_Singin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.id)
}
inline std::string* C2S_Singin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.id)
  return _s;
}
inline const std::string& C2S_Singin::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C2S_Singin::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.id)
  return _impl_.id_.Release();
}
inline void C2S_Singin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.id)
}

// string password = 2;
inline void C2S_Singin::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C2S_Singin::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singin::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singin.password)
}
inline std::string* C2S_Singin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singin.password)
  return _s;
}
inline const std::string& C2S_Singin::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C2S_Singin::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singin::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singin::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singin.password)
  return _impl_.password_.Release();
}
inline void C2S_Singin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singin.password)
}

// -------------------------------------------------------------------

// S2C_Singin

// int32 error = 1;
inline void S2C_Singin::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singin::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singin::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.error)
  return _internal_error();
}
inline void S2C_Singin::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singin::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.error)
}

// string ticket = 2;
inline void S2C_Singin::clear_ticket() {
  _impl_.ticket_.ClearToEmpty();
}
inline const std::string& S2C_Singin::ticket() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singin.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_Singin::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ticket_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singin.ticket)
}
inline std::string* S2C_Singin::mutable_ticket() {
  std::string* _s = _internal_mutable_ticket();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_Singin.ticket)
  return _s;
}
inline const std::string& S2C_Singin::_internal_ticket() const {
  return _impl_.ticket_.Get();
}
inline void S2C_Singin::_internal_set_ticket(const std::string& value) {
  
  _impl_.ticket_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_Singin::_internal_mutable_ticket() {
  
  return _impl_.ticket_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_Singin::release_ticket() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_Singin.ticket)
  return _impl_.ticket_.Release();
}
inline void S2C_Singin::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  _impl_.ticket_.SetAllocated(ticket, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ticket_.IsDefault()) {
    _impl_.ticket_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_Singin.ticket)
}

// -------------------------------------------------------------------

// C2S_Singup

// string id = 1;
inline void C2S_Singup::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& C2S_Singup::id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.id)
}
inline std::string* C2S_Singup::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.id)
  return _s;
}
inline const std::string& C2S_Singup::_internal_id() const {
  return _impl_.id_.Get();
}
inline void C2S_Singup::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.id)
  return _impl_.id_.Release();
}
inline void C2S_Singup::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.id)
}

// string password = 2;
inline void C2S_Singup::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& C2S_Singup::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.password)
}
inline std::string* C2S_Singup::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.password)
  return _s;
}
inline const std::string& C2S_Singup::_internal_password() const {
  return _impl_.password_.Get();
}
inline void C2S_Singup::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.password)
  return _impl_.password_.Release();
}
inline void C2S_Singup::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.password)
}

// string email = 3;
inline void C2S_Singup::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& C2S_Singup::email() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Singup.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Singup::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Singup.email)
}
inline std::string* C2S_Singup::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Singup.email)
  return _s;
}
inline const std::string& C2S_Singup::_internal_email() const {
  return _impl_.email_.Get();
}
inline void C2S_Singup::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Singup::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Singup::release_email() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Singup.email)
  return _impl_.email_.Release();
}
inline void C2S_Singup::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Singup.email)
}

// -------------------------------------------------------------------

// S2C_Singup

// int32 error = 1;
inline void S2C_Singup::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_Singup::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_Singup::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Singup.error)
  return _internal_error();
}
inline void S2C_Singup::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_Singup::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Singup.error)
}

// -------------------------------------------------------------------

// C2S_EmailVerified

// string verified = 1;
inline void C2S_EmailVerified::clear_verified() {
  _impl_.verified_.ClearToEmpty();
}
inline const std::string& C2S_EmailVerified::verified() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EmailVerified.verified)
  return _internal_verified();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_EmailVerified::set_verified(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verified_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_EmailVerified.verified)
}
inline std::string* C2S_EmailVerified::mutable_verified() {
  std::string* _s = _internal_mutable_verified();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_EmailVerified.verified)
  return _s;
}
inline const std::string& C2S_EmailVerified::_internal_verified() const {
  return _impl_.verified_.Get();
}
inline void C2S_EmailVerified::_internal_set_verified(const std::string& value) {
  
  _impl_.verified_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::_internal_mutable_verified() {
  
  return _impl_.verified_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_EmailVerified::release_verified() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_EmailVerified.verified)
  return _impl_.verified_.Release();
}
inline void C2S_EmailVerified::set_allocated_verified(std::string* verified) {
  if (verified != nullptr) {
    
  } else {
    
  }
  _impl_.verified_.SetAllocated(verified, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verified_.IsDefault()) {
    _impl_.verified_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_EmailVerified.verified)
}

// -------------------------------------------------------------------

// S2C_EmailVerified

// int32 error = 1;
inline void S2C_EmailVerified::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EmailVerified::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EmailVerified::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EmailVerified.error)
  return _internal_error();
}
inline void S2C_EmailVerified::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EmailVerified::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EmailVerified.error)
}

// -------------------------------------------------------------------

// C2S_LoadServer

// -------------------------------------------------------------------

// S2C_LoadServer

// repeated int32 port = 1;
inline int S2C_LoadServer::_internal_port_size() const {
  return _impl_.port_.size();
}
inline int S2C_LoadServer::port_size() const {
  return _internal_port_size();
}
inline void S2C_LoadServer::clear_port() {
  _impl_.port_.Clear();
}
inline int32_t S2C_LoadServer::_internal_port(int index) const {
  return _impl_.port_.Get(index);
}
inline int32_t S2C_LoadServer::port(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.port)
  return _internal_port(index);
}
inline void S2C_LoadServer::set_port(int index, int32_t value) {
  _impl_.port_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.port)
}
inline void S2C_LoadServer::_internal_add_port(int32_t value) {
  _impl_.port_.Add(value);
}
inline void S2C_LoadServer::add_port(int32_t value) {
  _internal_add_port(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.port)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::_internal_port() const {
  return _impl_.port_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadServer::port() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.port)
  return _internal_port();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::_internal_mutable_port() {
  return &_impl_.port_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadServer::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.port)
  return _internal_mutable_port();
}

// repeated string ip = 2;
inline int S2C_LoadServer::_internal_ip_size() const {
  return _impl_.ip_.size();
}
inline int S2C_LoadServer::ip_size() const {
  return _internal_ip_size();
}
inline void S2C_LoadServer::clear_ip() {
  _impl_.ip_.Clear();
}
inline std::string* S2C_LoadServer::add_ip() {
  std::string* _s = _internal_add_ip();
  // @@protoc_insertion_point(field_add_mutable:Protocol.S2C_LoadServer.ip)
  return _s;
}
inline const std::string& S2C_LoadServer::_internal_ip(int index) const {
  return _impl_.ip_.Get(index);
}
inline const std::string& S2C_LoadServer::ip(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadServer.ip)
  return _internal_ip(index);
}
inline std::string* S2C_LoadServer::mutable_ip(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadServer.ip)
  return _impl_.ip_.Mutable(index);
}
inline void S2C_LoadServer::set_ip(int index, const std::string& value) {
  _impl_.ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::set_ip(int index, std::string&& value) {
  _impl_.ip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::set_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::set_ip(int index, const char* value, size_t size) {
  _impl_.ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2C_LoadServer.ip)
}
inline std::string* S2C_LoadServer::_internal_add_ip() {
  return _impl_.ip_.Add();
}
inline void S2C_LoadServer::add_ip(const std::string& value) {
  _impl_.ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::add_ip(std::string&& value) {
  _impl_.ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::add_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S2C_LoadServer.ip)
}
inline void S2C_LoadServer::add_ip(const char* value, size_t size) {
  _impl_.ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S2C_LoadServer.ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S2C_LoadServer::ip() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadServer.ip)
  return _impl_.ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S2C_LoadServer::mutable_ip() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadServer.ip)
  return &_impl_.ip_;
}

// -------------------------------------------------------------------

// C2S_LoadCharacters

// -------------------------------------------------------------------

// S2C_LoadCharacters

// repeated .Protocol.SCharacterData character = 1;
inline int S2C_LoadCharacters::_internal_character_size() const {
  return _impl_.character_.size();
}
inline int S2C_LoadCharacters::character_size() const {
  return _internal_character_size();
}
inline void S2C_LoadCharacters::clear_character() {
  _impl_.character_.Clear();
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::mutable_character(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadCharacters.character)
  return _impl_.character_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >*
S2C_LoadCharacters::mutable_character() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadCharacters.character)
  return &_impl_.character_;
}
inline const ::Protocol::SCharacterData& S2C_LoadCharacters::_internal_character(int index) const {
  return _impl_.character_.Get(index);
}
inline const ::Protocol::SCharacterData& S2C_LoadCharacters::character(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadCharacters.character)
  return _internal_character(index);
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::_internal_add_character() {
  return _impl_.character_.Add();
}
inline ::Protocol::SCharacterData* S2C_LoadCharacters::add_character() {
  ::Protocol::SCharacterData* _add = _internal_add_character();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadCharacters.character)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterData >&
S2C_LoadCharacters::character() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadCharacters.character)
  return _impl_.character_;
}

// repeated .Protocol.SCharacterAppearance appearance = 2;
inline int S2C_LoadCharacters::_internal_appearance_size() const {
  return _impl_.appearance_.size();
}
inline int S2C_LoadCharacters::appearance_size() const {
  return _internal_appearance_size();
}
inline void S2C_LoadCharacters::clear_appearance() {
  _impl_.appearance_.Clear();
}
inline ::Protocol::SCharacterAppearance* S2C_LoadCharacters::mutable_appearance(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadCharacters.appearance)
  return _impl_.appearance_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterAppearance >*
S2C_LoadCharacters::mutable_appearance() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadCharacters.appearance)
  return &_impl_.appearance_;
}
inline const ::Protocol::SCharacterAppearance& S2C_LoadCharacters::_internal_appearance(int index) const {
  return _impl_.appearance_.Get(index);
}
inline const ::Protocol::SCharacterAppearance& S2C_LoadCharacters::appearance(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadCharacters.appearance)
  return _internal_appearance(index);
}
inline ::Protocol::SCharacterAppearance* S2C_LoadCharacters::_internal_add_appearance() {
  return _impl_.appearance_.Add();
}
inline ::Protocol::SCharacterAppearance* S2C_LoadCharacters::add_appearance() {
  ::Protocol::SCharacterAppearance* _add = _internal_add_appearance();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadCharacters.appearance)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SCharacterAppearance >&
S2C_LoadCharacters::appearance() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadCharacters.appearance)
  return _impl_.appearance_;
}

// -------------------------------------------------------------------

// C2S_SelectServer

// int32 server_num = 1;
inline void C2S_SelectServer::clear_server_num() {
  _impl_.server_num_ = 0;
}
inline int32_t C2S_SelectServer::_internal_server_num() const {
  return _impl_.server_num_;
}
inline int32_t C2S_SelectServer::server_num() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SelectServer.server_num)
  return _internal_server_num();
}
inline void C2S_SelectServer::_internal_set_server_num(int32_t value) {
  
  _impl_.server_num_ = value;
}
inline void C2S_SelectServer::set_server_num(int32_t value) {
  _internal_set_server_num(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SelectServer.server_num)
}

// -------------------------------------------------------------------

// S2C_SelectServer

// int32 error = 1;
inline void S2C_SelectServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_SelectServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_SelectServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SelectServer.error)
  return _internal_error();
}
inline void S2C_SelectServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_SelectServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SelectServer.error)
}

// -------------------------------------------------------------------

// C2S_CreateCharacter

// .Protocol.SCharacterData data = 1;
inline bool C2S_CreateCharacter::_internal_has_data() const {
  return this != internal_default_instance() && _impl_.data_ != nullptr;
}
inline bool C2S_CreateCharacter::has_data() const {
  return _internal_has_data();
}
inline void C2S_CreateCharacter::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
inline const ::Protocol::SCharacterData& C2S_CreateCharacter::_internal_data() const {
  const ::Protocol::SCharacterData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& C2S_CreateCharacter::data() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CreateCharacter.data)
  return _internal_data();
}
inline void C2S_CreateCharacter::unsafe_arena_set_allocated_data(
    ::Protocol::SCharacterData* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_CreateCharacter.data)
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::release_data() {
  
  ::Protocol::SCharacterData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_CreateCharacter.data)
  
  ::Protocol::SCharacterData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::_internal_mutable_data() {
  
  if (_impl_.data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.data_ = p;
  }
  return _impl_.data_;
}
inline ::Protocol::SCharacterData* C2S_CreateCharacter::mutable_data() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_CreateCharacter.data)
  return _msg;
}
inline void C2S_CreateCharacter::set_allocated_data(::Protocol::SCharacterData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.data_ = data;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_CreateCharacter.data)
}

// .Protocol.SCharacterAppearance appearance = 2;
inline bool C2S_CreateCharacter::_internal_has_appearance() const {
  return this != internal_default_instance() && _impl_.appearance_ != nullptr;
}
inline bool C2S_CreateCharacter::has_appearance() const {
  return _internal_has_appearance();
}
inline void C2S_CreateCharacter::clear_appearance() {
  if (GetArenaForAllocation() == nullptr && _impl_.appearance_ != nullptr) {
    delete _impl_.appearance_;
  }
  _impl_.appearance_ = nullptr;
}
inline const ::Protocol::SCharacterAppearance& C2S_CreateCharacter::_internal_appearance() const {
  const ::Protocol::SCharacterAppearance* p = _impl_.appearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterAppearance&>(
      ::Protocol::_SCharacterAppearance_default_instance_);
}
inline const ::Protocol::SCharacterAppearance& C2S_CreateCharacter::appearance() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CreateCharacter.appearance)
  return _internal_appearance();
}
inline void C2S_CreateCharacter::unsafe_arena_set_allocated_appearance(
    ::Protocol::SCharacterAppearance* appearance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appearance_);
  }
  _impl_.appearance_ = appearance;
  if (appearance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_CreateCharacter.appearance)
}
inline ::Protocol::SCharacterAppearance* C2S_CreateCharacter::release_appearance() {
  
  ::Protocol::SCharacterAppearance* temp = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterAppearance* C2S_CreateCharacter::unsafe_arena_release_appearance() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_CreateCharacter.appearance)
  
  ::Protocol::SCharacterAppearance* temp = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterAppearance* C2S_CreateCharacter::_internal_mutable_appearance() {
  
  if (_impl_.appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterAppearance>(GetArenaForAllocation());
    _impl_.appearance_ = p;
  }
  return _impl_.appearance_;
}
inline ::Protocol::SCharacterAppearance* C2S_CreateCharacter::mutable_appearance() {
  ::Protocol::SCharacterAppearance* _msg = _internal_mutable_appearance();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_CreateCharacter.appearance)
  return _msg;
}
inline void C2S_CreateCharacter::set_allocated_appearance(::Protocol::SCharacterAppearance* appearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.appearance_;
  }
  if (appearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(appearance);
    if (message_arena != submessage_arena) {
      appearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appearance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.appearance_ = appearance;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_CreateCharacter.appearance)
}

// -------------------------------------------------------------------

// S2C_CreateCharacter

// int32 error = 1;
inline void S2C_CreateCharacter::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_CreateCharacter::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_CreateCharacter::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateCharacter.error)
  return _internal_error();
}
inline void S2C_CreateCharacter::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_CreateCharacter::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_CreateCharacter.error)
}

// -------------------------------------------------------------------

// C2S_AppearanceCharacter

// .Protocol.SCharacterData character = 1;
inline bool C2S_AppearanceCharacter::_internal_has_character() const {
  return this != internal_default_instance() && _impl_.character_ != nullptr;
}
inline bool C2S_AppearanceCharacter::has_character() const {
  return _internal_has_character();
}
inline void C2S_AppearanceCharacter::clear_character() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_ != nullptr) {
    delete _impl_.character_;
  }
  _impl_.character_ = nullptr;
}
inline const ::Protocol::SCharacterData& C2S_AppearanceCharacter::_internal_character() const {
  const ::Protocol::SCharacterData* p = _impl_.character_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& C2S_AppearanceCharacter::character() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_AppearanceCharacter.character)
  return _internal_character();
}
inline void C2S_AppearanceCharacter::unsafe_arena_set_allocated_character(
    ::Protocol::SCharacterData* character) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_);
  }
  _impl_.character_ = character;
  if (character) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_AppearanceCharacter.character)
}
inline ::Protocol::SCharacterData* C2S_AppearanceCharacter::release_character() {
  
  ::Protocol::SCharacterData* temp = _impl_.character_;
  _impl_.character_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* C2S_AppearanceCharacter::unsafe_arena_release_character() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_AppearanceCharacter.character)
  
  ::Protocol::SCharacterData* temp = _impl_.character_;
  _impl_.character_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* C2S_AppearanceCharacter::_internal_mutable_character() {
  
  if (_impl_.character_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.character_ = p;
  }
  return _impl_.character_;
}
inline ::Protocol::SCharacterData* C2S_AppearanceCharacter::mutable_character() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_AppearanceCharacter.character)
  return _msg;
}
inline void C2S_AppearanceCharacter::set_allocated_character(::Protocol::SCharacterData* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.character_;
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character);
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_ = character;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_AppearanceCharacter.character)
}

// -------------------------------------------------------------------

// S2C_AppearanceCharacter

// int32 error = 1;
inline void S2C_AppearanceCharacter::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_AppearanceCharacter::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_AppearanceCharacter::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearanceCharacter.error)
  return _internal_error();
}
inline void S2C_AppearanceCharacter::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_AppearanceCharacter::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearanceCharacter.error)
}

// -------------------------------------------------------------------

// C2S_DeleteCharacter

// bytes name = 1;
inline void C2S_DeleteCharacter::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& C2S_DeleteCharacter::name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteCharacter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_DeleteCharacter::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_DeleteCharacter.name)
}
inline std::string* C2S_DeleteCharacter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_DeleteCharacter.name)
  return _s;
}
inline const std::string& C2S_DeleteCharacter::_internal_name() const {
  return _impl_.name_.Get();
}
inline void C2S_DeleteCharacter::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_DeleteCharacter::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_DeleteCharacter::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_DeleteCharacter.name)
  return _impl_.name_.Release();
}
inline void C2S_DeleteCharacter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_DeleteCharacter.name)
}

// -------------------------------------------------------------------

// S2C_DeleteCharacter

// int32 error = 1;
inline void S2C_DeleteCharacter::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_DeleteCharacter::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_DeleteCharacter::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteCharacter.error)
  return _internal_error();
}
inline void S2C_DeleteCharacter::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_DeleteCharacter::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeleteCharacter.error)
}

// -------------------------------------------------------------------

// C2S_UpdateNickName

// bytes old_name = 1;
inline void C2S_UpdateNickName::clear_old_name() {
  _impl_.old_name_.ClearToEmpty();
}
inline const std::string& C2S_UpdateNickName::old_name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateNickName.old_name)
  return _internal_old_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_UpdateNickName::set_old_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.old_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_UpdateNickName.old_name)
}
inline std::string* C2S_UpdateNickName::mutable_old_name() {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_UpdateNickName.old_name)
  return _s;
}
inline const std::string& C2S_UpdateNickName::_internal_old_name() const {
  return _impl_.old_name_.Get();
}
inline void C2S_UpdateNickName::_internal_set_old_name(const std::string& value) {
  
  _impl_.old_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_UpdateNickName::_internal_mutable_old_name() {
  
  return _impl_.old_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_UpdateNickName::release_old_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_UpdateNickName.old_name)
  return _impl_.old_name_.Release();
}
inline void C2S_UpdateNickName::set_allocated_old_name(std::string* old_name) {
  if (old_name != nullptr) {
    
  } else {
    
  }
  _impl_.old_name_.SetAllocated(old_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_name_.IsDefault()) {
    _impl_.old_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_UpdateNickName.old_name)
}

// bytes new_name = 2;
inline void C2S_UpdateNickName::clear_new_name() {
  _impl_.new_name_.ClearToEmpty();
}
inline const std::string& C2S_UpdateNickName::new_name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateNickName.new_name)
  return _internal_new_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_UpdateNickName::set_new_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_UpdateNickName.new_name)
}
inline std::string* C2S_UpdateNickName::mutable_new_name() {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_UpdateNickName.new_name)
  return _s;
}
inline const std::string& C2S_UpdateNickName::_internal_new_name() const {
  return _impl_.new_name_.Get();
}
inline void C2S_UpdateNickName::_internal_set_new_name(const std::string& value) {
  
  _impl_.new_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_UpdateNickName::_internal_mutable_new_name() {
  
  return _impl_.new_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_UpdateNickName::release_new_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_UpdateNickName.new_name)
  return _impl_.new_name_.Release();
}
inline void C2S_UpdateNickName::set_allocated_new_name(std::string* new_name) {
  if (new_name != nullptr) {
    
  } else {
    
  }
  _impl_.new_name_.SetAllocated(new_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_name_.IsDefault()) {
    _impl_.new_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_UpdateNickName.new_name)
}

// -------------------------------------------------------------------

// S2C_UpdateNickName

// int32 error = 1;
inline void S2C_UpdateNickName::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_UpdateNickName::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_UpdateNickName::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateNickName.error)
  return _internal_error();
}
inline void S2C_UpdateNickName::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_UpdateNickName::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateNickName.error)
}

// -------------------------------------------------------------------

// C2S_TravelServer

// -------------------------------------------------------------------

// S2C_TravelServer

// int32 error = 1;
inline void S2C_TravelServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_TravelServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_TravelServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.error)
  return _internal_error();
}
inline void S2C_TravelServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_TravelServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_IdentityPacket_2eproto
