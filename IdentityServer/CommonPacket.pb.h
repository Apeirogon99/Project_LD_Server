#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonPacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CommonPacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CommonPacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CommonPacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CommonPacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CommonPacket_2eproto;
namespace Protocol {
class C2S_ReplicatedServerTimeStamp;
struct C2S_ReplicatedServerTimeStampDefaultTypeInternal;
extern C2S_ReplicatedServerTimeStampDefaultTypeInternal _C2S_ReplicatedServerTimeStamp_default_instance_;
class C2S_TravelLevel;
struct C2S_TravelLevelDefaultTypeInternal;
extern C2S_TravelLevelDefaultTypeInternal _C2S_TravelLevel_default_instance_;
class C2S_TravelServer;
struct C2S_TravelServerDefaultTypeInternal;
extern C2S_TravelServerDefaultTypeInternal _C2S_TravelServer_default_instance_;
class S2C_ReplicatedServerTimeStamp;
struct S2C_ReplicatedServerTimeStampDefaultTypeInternal;
extern S2C_ReplicatedServerTimeStampDefaultTypeInternal _S2C_ReplicatedServerTimeStamp_default_instance_;
class S2C_TravelLevel;
struct S2C_TravelLevelDefaultTypeInternal;
extern S2C_TravelLevelDefaultTypeInternal _S2C_TravelLevel_default_instance_;
class S2C_TravelServer;
struct S2C_TravelServerDefaultTypeInternal;
extern S2C_TravelServerDefaultTypeInternal _S2C_TravelServer_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_ReplicatedServerTimeStamp* Arena::CreateMaybeMessage<::Protocol::C2S_ReplicatedServerTimeStamp>(Arena*);
template<> ::Protocol::C2S_TravelLevel* Arena::CreateMaybeMessage<::Protocol::C2S_TravelLevel>(Arena*);
template<> ::Protocol::C2S_TravelServer* Arena::CreateMaybeMessage<::Protocol::C2S_TravelServer>(Arena*);
template<> ::Protocol::S2C_ReplicatedServerTimeStamp* Arena::CreateMaybeMessage<::Protocol::S2C_ReplicatedServerTimeStamp>(Arena*);
template<> ::Protocol::S2C_TravelLevel* Arena::CreateMaybeMessage<::Protocol::S2C_TravelLevel>(Arena*);
template<> ::Protocol::S2C_TravelServer* Arena::CreateMaybeMessage<::Protocol::S2C_TravelServer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2S_ReplicatedServerTimeStamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_ReplicatedServerTimeStamp) */ {
 public:
  inline C2S_ReplicatedServerTimeStamp() : C2S_ReplicatedServerTimeStamp(nullptr) {}
  ~C2S_ReplicatedServerTimeStamp() override;
  explicit PROTOBUF_CONSTEXPR C2S_ReplicatedServerTimeStamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_ReplicatedServerTimeStamp(const C2S_ReplicatedServerTimeStamp& from);
  C2S_ReplicatedServerTimeStamp(C2S_ReplicatedServerTimeStamp&& from) noexcept
    : C2S_ReplicatedServerTimeStamp() {
    *this = ::std::move(from);
  }

  inline C2S_ReplicatedServerTimeStamp& operator=(const C2S_ReplicatedServerTimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ReplicatedServerTimeStamp& operator=(C2S_ReplicatedServerTimeStamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_ReplicatedServerTimeStamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_ReplicatedServerTimeStamp* internal_default_instance() {
    return reinterpret_cast<const C2S_ReplicatedServerTimeStamp*>(
               &_C2S_ReplicatedServerTimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_ReplicatedServerTimeStamp& a, C2S_ReplicatedServerTimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ReplicatedServerTimeStamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_ReplicatedServerTimeStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_ReplicatedServerTimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_ReplicatedServerTimeStamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_ReplicatedServerTimeStamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_ReplicatedServerTimeStamp& from) {
    C2S_ReplicatedServerTimeStamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_ReplicatedServerTimeStamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_ReplicatedServerTimeStamp";
  }
  protected:
  explicit C2S_ReplicatedServerTimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtcTimeFieldNumber = 1,
    kRttFieldNumber = 2,
  };
  // int64 utc_time = 1;
  void clear_utc_time();
  int64_t utc_time() const;
  void set_utc_time(int64_t value);
  private:
  int64_t _internal_utc_time() const;
  void _internal_set_utc_time(int64_t value);
  public:

  // int64 rtt = 2;
  void clear_rtt();
  int64_t rtt() const;
  void set_rtt(int64_t value);
  private:
  int64_t _internal_rtt() const;
  void _internal_set_rtt(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_ReplicatedServerTimeStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t utc_time_;
    int64_t rtt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ReplicatedServerTimeStamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ReplicatedServerTimeStamp) */ {
 public:
  inline S2C_ReplicatedServerTimeStamp() : S2C_ReplicatedServerTimeStamp(nullptr) {}
  ~S2C_ReplicatedServerTimeStamp() override;
  explicit PROTOBUF_CONSTEXPR S2C_ReplicatedServerTimeStamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ReplicatedServerTimeStamp(const S2C_ReplicatedServerTimeStamp& from);
  S2C_ReplicatedServerTimeStamp(S2C_ReplicatedServerTimeStamp&& from) noexcept
    : S2C_ReplicatedServerTimeStamp() {
    *this = ::std::move(from);
  }

  inline S2C_ReplicatedServerTimeStamp& operator=(const S2C_ReplicatedServerTimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ReplicatedServerTimeStamp& operator=(S2C_ReplicatedServerTimeStamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ReplicatedServerTimeStamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ReplicatedServerTimeStamp* internal_default_instance() {
    return reinterpret_cast<const S2C_ReplicatedServerTimeStamp*>(
               &_S2C_ReplicatedServerTimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_ReplicatedServerTimeStamp& a, S2C_ReplicatedServerTimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ReplicatedServerTimeStamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ReplicatedServerTimeStamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ReplicatedServerTimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ReplicatedServerTimeStamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ReplicatedServerTimeStamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ReplicatedServerTimeStamp& from) {
    S2C_ReplicatedServerTimeStamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ReplicatedServerTimeStamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ReplicatedServerTimeStamp";
  }
  protected:
  explicit S2C_ReplicatedServerTimeStamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtcTimeFieldNumber = 1,
    kTimeStampFieldNumber = 2,
  };
  // int64 utc_time = 1;
  void clear_utc_time();
  int64_t utc_time() const;
  void set_utc_time(int64_t value);
  private:
  int64_t _internal_utc_time() const;
  void _internal_set_utc_time(int64_t value);
  public:

  // int64 time_stamp = 2;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ReplicatedServerTimeStamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t utc_time_;
    int64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_TravelLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_TravelLevel) */ {
 public:
  inline C2S_TravelLevel() : C2S_TravelLevel(nullptr) {}
  ~C2S_TravelLevel() override;
  explicit PROTOBUF_CONSTEXPR C2S_TravelLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_TravelLevel(const C2S_TravelLevel& from);
  C2S_TravelLevel(C2S_TravelLevel&& from) noexcept
    : C2S_TravelLevel() {
    *this = ::std::move(from);
  }

  inline C2S_TravelLevel& operator=(const C2S_TravelLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_TravelLevel& operator=(C2S_TravelLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_TravelLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_TravelLevel* internal_default_instance() {
    return reinterpret_cast<const C2S_TravelLevel*>(
               &_C2S_TravelLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_TravelLevel& a, C2S_TravelLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_TravelLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_TravelLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_TravelLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_TravelLevel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_TravelLevel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_TravelLevel& from) {
    C2S_TravelLevel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_TravelLevel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_TravelLevel";
  }
  protected:
  explicit C2S_TravelLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // int64 time_stamp = 2;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // int32 level = 1;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_TravelLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t time_stamp_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_TravelLevel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_TravelLevel) */ {
 public:
  inline S2C_TravelLevel() : S2C_TravelLevel(nullptr) {}
  ~S2C_TravelLevel() override;
  explicit PROTOBUF_CONSTEXPR S2C_TravelLevel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_TravelLevel(const S2C_TravelLevel& from);
  S2C_TravelLevel(S2C_TravelLevel&& from) noexcept
    : S2C_TravelLevel() {
    *this = ::std::move(from);
  }

  inline S2C_TravelLevel& operator=(const S2C_TravelLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_TravelLevel& operator=(S2C_TravelLevel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_TravelLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_TravelLevel* internal_default_instance() {
    return reinterpret_cast<const S2C_TravelLevel*>(
               &_S2C_TravelLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_TravelLevel& a, S2C_TravelLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_TravelLevel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_TravelLevel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_TravelLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_TravelLevel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_TravelLevel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_TravelLevel& from) {
    S2C_TravelLevel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_TravelLevel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_TravelLevel";
  }
  protected:
  explicit S2C_TravelLevel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_TravelLevel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonPacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_TravelServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_TravelServer) */ {
 public:
  inline C2S_TravelServer() : C2S_TravelServer(nullptr) {}
  ~C2S_TravelServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_TravelServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_TravelServer(const C2S_TravelServer& from);
  C2S_TravelServer(C2S_TravelServer&& from) noexcept
    : C2S_TravelServer() {
    *this = ::std::move(from);
  }

  inline C2S_TravelServer& operator=(const C2S_TravelServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_TravelServer& operator=(C2S_TravelServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_TravelServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_TravelServer* internal_default_instance() {
    return reinterpret_cast<const C2S_TravelServer*>(
               &_C2S_TravelServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_TravelServer& a, C2S_TravelServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_TravelServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_TravelServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_TravelServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_TravelServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_TravelServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_TravelServer& from) {
    C2S_TravelServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_TravelServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_TravelServer";
  }
  protected:
  explicit C2S_TravelServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kGlobalIdFieldNumber = 2,
    kCharacterIdFieldNumber = 3,
    kTimeStampFieldNumber = 4,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 global_id = 2;
  void clear_global_id();
  int32_t global_id() const;
  void set_global_id(int32_t value);
  private:
  int32_t _internal_global_id() const;
  void _internal_set_global_id(int32_t value);
  public:

  // int32 character_id = 3;
  void clear_character_id();
  int32_t character_id() const;
  void set_character_id(int32_t value);
  private:
  int32_t _internal_character_id() const;
  void _internal_set_character_id(int32_t value);
  public:

  // int64 time_stamp = 4;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_TravelServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t global_id_;
    int32_t character_id_;
    int64_t time_stamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonPacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_TravelServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_TravelServer) */ {
 public:
  inline S2C_TravelServer() : S2C_TravelServer(nullptr) {}
  ~S2C_TravelServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_TravelServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_TravelServer(const S2C_TravelServer& from);
  S2C_TravelServer(S2C_TravelServer&& from) noexcept
    : S2C_TravelServer() {
    *this = ::std::move(from);
  }

  inline S2C_TravelServer& operator=(const S2C_TravelServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_TravelServer& operator=(S2C_TravelServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_TravelServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_TravelServer* internal_default_instance() {
    return reinterpret_cast<const S2C_TravelServer*>(
               &_S2C_TravelServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_TravelServer& a, S2C_TravelServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_TravelServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_TravelServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_TravelServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_TravelServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_TravelServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_TravelServer& from) {
    S2C_TravelServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_TravelServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_TravelServer";
  }
  protected:
  explicit S2C_TravelServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTravelLevelFieldNumber = 3,
    kIpFieldNumber = 4,
    kServerIdFieldNumber = 2,
    kPortFieldNumber = 5,
    kErrorFieldNumber = 6,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // bytes travel_level = 3;
  void clear_travel_level();
  const std::string& travel_level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_travel_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_travel_level();
  PROTOBUF_NODISCARD std::string* release_travel_level();
  void set_allocated_travel_level(std::string* travel_level);
  private:
  const std::string& _internal_travel_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_travel_level(const std::string& value);
  std::string* _internal_mutable_travel_level();
  public:

  // bytes ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int32 port = 5;
  void clear_port();
  int32_t port() const;
  void set_port(int32_t value);
  private:
  int32_t _internal_port() const;
  void _internal_set_port(int32_t value);
  public:

  // int32 error = 6;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_TravelServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr travel_level_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    int32_t server_id_;
    int32_t port_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_CommonPacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_ReplicatedServerTimeStamp

// int64 utc_time = 1;
inline void C2S_ReplicatedServerTimeStamp::clear_utc_time() {
  _impl_.utc_time_ = int64_t{0};
}
inline int64_t C2S_ReplicatedServerTimeStamp::_internal_utc_time() const {
  return _impl_.utc_time_;
}
inline int64_t C2S_ReplicatedServerTimeStamp::utc_time() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplicatedServerTimeStamp.utc_time)
  return _internal_utc_time();
}
inline void C2S_ReplicatedServerTimeStamp::_internal_set_utc_time(int64_t value) {
  
  _impl_.utc_time_ = value;
}
inline void C2S_ReplicatedServerTimeStamp::set_utc_time(int64_t value) {
  _internal_set_utc_time(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReplicatedServerTimeStamp.utc_time)
}

// int64 rtt = 2;
inline void C2S_ReplicatedServerTimeStamp::clear_rtt() {
  _impl_.rtt_ = int64_t{0};
}
inline int64_t C2S_ReplicatedServerTimeStamp::_internal_rtt() const {
  return _impl_.rtt_;
}
inline int64_t C2S_ReplicatedServerTimeStamp::rtt() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplicatedServerTimeStamp.rtt)
  return _internal_rtt();
}
inline void C2S_ReplicatedServerTimeStamp::_internal_set_rtt(int64_t value) {
  
  _impl_.rtt_ = value;
}
inline void C2S_ReplicatedServerTimeStamp::set_rtt(int64_t value) {
  _internal_set_rtt(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReplicatedServerTimeStamp.rtt)
}

// -------------------------------------------------------------------

// S2C_ReplicatedServerTimeStamp

// int64 utc_time = 1;
inline void S2C_ReplicatedServerTimeStamp::clear_utc_time() {
  _impl_.utc_time_ = int64_t{0};
}
inline int64_t S2C_ReplicatedServerTimeStamp::_internal_utc_time() const {
  return _impl_.utc_time_;
}
inline int64_t S2C_ReplicatedServerTimeStamp::utc_time() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplicatedServerTimeStamp.utc_time)
  return _internal_utc_time();
}
inline void S2C_ReplicatedServerTimeStamp::_internal_set_utc_time(int64_t value) {
  
  _impl_.utc_time_ = value;
}
inline void S2C_ReplicatedServerTimeStamp::set_utc_time(int64_t value) {
  _internal_set_utc_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReplicatedServerTimeStamp.utc_time)
}

// int64 time_stamp = 2;
inline void S2C_ReplicatedServerTimeStamp::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t S2C_ReplicatedServerTimeStamp::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t S2C_ReplicatedServerTimeStamp::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplicatedServerTimeStamp.time_stamp)
  return _internal_time_stamp();
}
inline void S2C_ReplicatedServerTimeStamp::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void S2C_ReplicatedServerTimeStamp::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReplicatedServerTimeStamp.time_stamp)
}

// -------------------------------------------------------------------

// C2S_TravelLevel

// int32 level = 1;
inline void C2S_TravelLevel::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t C2S_TravelLevel::_internal_level() const {
  return _impl_.level_;
}
inline int32_t C2S_TravelLevel::level() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_TravelLevel.level)
  return _internal_level();
}
inline void C2S_TravelLevel::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void C2S_TravelLevel::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_TravelLevel.level)
}

// int64 time_stamp = 2;
inline void C2S_TravelLevel::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t C2S_TravelLevel::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t C2S_TravelLevel::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_TravelLevel.time_stamp)
  return _internal_time_stamp();
}
inline void C2S_TravelLevel::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void C2S_TravelLevel::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_TravelLevel.time_stamp)
}

// -------------------------------------------------------------------

// S2C_TravelLevel

// int32 error = 1;
inline void S2C_TravelLevel::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_TravelLevel::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_TravelLevel::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelLevel.error)
  return _internal_error();
}
inline void S2C_TravelLevel::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_TravelLevel::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelLevel.error)
}

// -------------------------------------------------------------------

// C2S_TravelServer

// bytes token = 1;
inline void C2S_TravelServer::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& C2S_TravelServer::token() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_TravelServer.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_TravelServer::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_TravelServer.token)
}
inline std::string* C2S_TravelServer::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_TravelServer.token)
  return _s;
}
inline const std::string& C2S_TravelServer::_internal_token() const {
  return _impl_.token_.Get();
}
inline void C2S_TravelServer::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_TravelServer::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_TravelServer::release_token() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_TravelServer.token)
  return _impl_.token_.Release();
}
inline void C2S_TravelServer::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_TravelServer.token)
}

// int32 global_id = 2;
inline void C2S_TravelServer::clear_global_id() {
  _impl_.global_id_ = 0;
}
inline int32_t C2S_TravelServer::_internal_global_id() const {
  return _impl_.global_id_;
}
inline int32_t C2S_TravelServer::global_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_TravelServer.global_id)
  return _internal_global_id();
}
inline void C2S_TravelServer::_internal_set_global_id(int32_t value) {
  
  _impl_.global_id_ = value;
}
inline void C2S_TravelServer::set_global_id(int32_t value) {
  _internal_set_global_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_TravelServer.global_id)
}

// int32 character_id = 3;
inline void C2S_TravelServer::clear_character_id() {
  _impl_.character_id_ = 0;
}
inline int32_t C2S_TravelServer::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int32_t C2S_TravelServer::character_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_TravelServer.character_id)
  return _internal_character_id();
}
inline void C2S_TravelServer::_internal_set_character_id(int32_t value) {
  
  _impl_.character_id_ = value;
}
inline void C2S_TravelServer::set_character_id(int32_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_TravelServer.character_id)
}

// int64 time_stamp = 4;
inline void C2S_TravelServer::clear_time_stamp() {
  _impl_.time_stamp_ = int64_t{0};
}
inline int64_t C2S_TravelServer::_internal_time_stamp() const {
  return _impl_.time_stamp_;
}
inline int64_t C2S_TravelServer::time_stamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_TravelServer.time_stamp)
  return _internal_time_stamp();
}
inline void C2S_TravelServer::_internal_set_time_stamp(int64_t value) {
  
  _impl_.time_stamp_ = value;
}
inline void C2S_TravelServer::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_TravelServer.time_stamp)
}

// -------------------------------------------------------------------

// S2C_TravelServer

// bytes token = 1;
inline void S2C_TravelServer::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& S2C_TravelServer::token() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_TravelServer::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.token)
}
inline std::string* S2C_TravelServer::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_TravelServer.token)
  return _s;
}
inline const std::string& S2C_TravelServer::_internal_token() const {
  return _impl_.token_.Get();
}
inline void S2C_TravelServer::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_TravelServer::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_TravelServer::release_token() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_TravelServer.token)
  return _impl_.token_.Release();
}
inline void S2C_TravelServer::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_TravelServer.token)
}

// int32 server_id = 2;
inline void S2C_TravelServer::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t S2C_TravelServer::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t S2C_TravelServer::server_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.server_id)
  return _internal_server_id();
}
inline void S2C_TravelServer::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void S2C_TravelServer::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.server_id)
}

// bytes travel_level = 3;
inline void S2C_TravelServer::clear_travel_level() {
  _impl_.travel_level_.ClearToEmpty();
}
inline const std::string& S2C_TravelServer::travel_level() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.travel_level)
  return _internal_travel_level();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_TravelServer::set_travel_level(ArgT0&& arg0, ArgT... args) {
 
 _impl_.travel_level_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.travel_level)
}
inline std::string* S2C_TravelServer::mutable_travel_level() {
  std::string* _s = _internal_mutable_travel_level();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_TravelServer.travel_level)
  return _s;
}
inline const std::string& S2C_TravelServer::_internal_travel_level() const {
  return _impl_.travel_level_.Get();
}
inline void S2C_TravelServer::_internal_set_travel_level(const std::string& value) {
  
  _impl_.travel_level_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_TravelServer::_internal_mutable_travel_level() {
  
  return _impl_.travel_level_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_TravelServer::release_travel_level() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_TravelServer.travel_level)
  return _impl_.travel_level_.Release();
}
inline void S2C_TravelServer::set_allocated_travel_level(std::string* travel_level) {
  if (travel_level != nullptr) {
    
  } else {
    
  }
  _impl_.travel_level_.SetAllocated(travel_level, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.travel_level_.IsDefault()) {
    _impl_.travel_level_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_TravelServer.travel_level)
}

// bytes ip = 4;
inline void S2C_TravelServer::clear_ip() {
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& S2C_TravelServer::ip() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_TravelServer::set_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.ip)
}
inline std::string* S2C_TravelServer::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_TravelServer.ip)
  return _s;
}
inline const std::string& S2C_TravelServer::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void S2C_TravelServer::_internal_set_ip(const std::string& value) {
  
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_TravelServer::_internal_mutable_ip() {
  
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_TravelServer::release_ip() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_TravelServer.ip)
  return _impl_.ip_.Release();
}
inline void S2C_TravelServer::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_TravelServer.ip)
}

// int32 port = 5;
inline void S2C_TravelServer::clear_port() {
  _impl_.port_ = 0;
}
inline int32_t S2C_TravelServer::_internal_port() const {
  return _impl_.port_;
}
inline int32_t S2C_TravelServer::port() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.port)
  return _internal_port();
}
inline void S2C_TravelServer::_internal_set_port(int32_t value) {
  
  _impl_.port_ = value;
}
inline void S2C_TravelServer::set_port(int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.port)
}

// int32 error = 6;
inline void S2C_TravelServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_TravelServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_TravelServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_TravelServer.error)
  return _internal_error();
}
inline void S2C_TravelServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_TravelServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_TravelServer.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CommonPacket_2eproto
