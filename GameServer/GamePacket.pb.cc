#if defined(_MSC_VER)
        #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
        #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
        #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
        #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
        #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used byclient of class 'type2'
        #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
        #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
        #pragma warning (disable:4307) // 'operator' : integral constant overflow
        #pragma warning (disable:4309) // 'conversion' : truncation of constant value
        #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was64bit shift intended?)
        #pragma warning (disable:4355) // 'this' : used in base member initializer list
        #pragma warning (disable:4506) // no definition for inline function 'function'
        #pragma warning (disable:4800) // 'type' : forcing value to bool 'true' or 'false' (performance warning)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
        #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
        #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePacket.proto

#include "GamePacket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C2S_EnterGameServer::C2S_EnterGameServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_EnterGameServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_EnterGameServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_EnterGameServerDefaultTypeInternal() {}
  union {
    C2S_EnterGameServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_EnterGameServerDefaultTypeInternal _C2S_EnterGameServer_default_instance_;
PROTOBUF_CONSTEXPR S2C_EnterGameServer::S2C_EnterGameServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.eqipment_)*/{}
  , /*decltype(_impl_.character_data_)*/nullptr
  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.money_)*/0
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_EnterGameServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_EnterGameServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_EnterGameServerDefaultTypeInternal() {}
  union {
    S2C_EnterGameServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_EnterGameServerDefaultTypeInternal _S2C_EnterGameServer_default_instance_;
PROTOBUF_CONSTEXPR C2S_LeaveGameServer::C2S_LeaveGameServer(
    ::_pbi::ConstantInitialized) {}
struct C2S_LeaveGameServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_LeaveGameServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_LeaveGameServerDefaultTypeInternal() {}
  union {
    C2S_LeaveGameServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_LeaveGameServerDefaultTypeInternal _C2S_LeaveGameServer_default_instance_;
PROTOBUF_CONSTEXPR S2C_LeaveGameServer::S2C_LeaveGameServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_LeaveGameServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_LeaveGameServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_LeaveGameServerDefaultTypeInternal() {}
  union {
    S2C_LeaveGameServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_LeaveGameServerDefaultTypeInternal _S2C_LeaveGameServer_default_instance_;
PROTOBUF_CONSTEXPR C2S_Tick::C2S_Tick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cur_location_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_TickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_TickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_TickDefaultTypeInternal() {}
  union {
    C2S_Tick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_TickDefaultTypeInternal _C2S_Tick_default_instance_;
PROTOBUF_CONSTEXPR S2C_Tick::S2C_Tick(
    ::_pbi::ConstantInitialized) {}
struct S2C_TickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_TickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_TickDefaultTypeInternal() {}
  union {
    S2C_Tick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_TickDefaultTypeInternal _S2C_Tick_default_instance_;
PROTOBUF_CONSTEXPR S2C_AppearCharacter::S2C_AppearCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cur_location_)*/nullptr
  , /*decltype(_impl_.move_location_)*/nullptr
  , /*decltype(_impl_.character_data_)*/nullptr
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_AppearCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_AppearCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_AppearCharacterDefaultTypeInternal() {}
  union {
    S2C_AppearCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_AppearCharacterDefaultTypeInternal _S2C_AppearCharacter_default_instance_;
PROTOBUF_CONSTEXPR S2C_DisAppearCharacter::S2C_DisAppearCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_DisAppearCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_DisAppearCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_DisAppearCharacterDefaultTypeInternal() {}
  union {
    S2C_DisAppearCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_DisAppearCharacterDefaultTypeInternal _S2C_DisAppearCharacter_default_instance_;
PROTOBUF_CONSTEXPR C2S_MovementCharacter::C2S_MovementCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cur_location_)*/nullptr
  , /*decltype(_impl_.move_location_)*/nullptr
  , /*decltype(_impl_.move_velocity_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_MovementCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_MovementCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_MovementCharacterDefaultTypeInternal() {}
  union {
    C2S_MovementCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_MovementCharacterDefaultTypeInternal _C2S_MovementCharacter_default_instance_;
PROTOBUF_CONSTEXPR S2C_MovementCharacter::S2C_MovementCharacter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cur_location_)*/nullptr
  , /*decltype(_impl_.move_location_)*/nullptr
  , /*decltype(_impl_.move_velocity_)*/nullptr
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_MovementCharacterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_MovementCharacterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_MovementCharacterDefaultTypeInternal() {}
  union {
    S2C_MovementCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_MovementCharacterDefaultTypeInternal _S2C_MovementCharacter_default_instance_;
PROTOBUF_CONSTEXPR C2S_PlayAnimation::C2S_PlayAnimation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_PlayAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_PlayAnimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_PlayAnimationDefaultTypeInternal() {}
  union {
    C2S_PlayAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_PlayAnimationDefaultTypeInternal _C2S_PlayAnimation_default_instance_;
PROTOBUF_CONSTEXPR S2C_PlayAnimation::S2C_PlayAnimation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_PlayAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_PlayAnimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_PlayAnimationDefaultTypeInternal() {}
  union {
    S2C_PlayAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_PlayAnimationDefaultTypeInternal _S2C_PlayAnimation_default_instance_;
PROTOBUF_CONSTEXPR S2C_DetectChangePlayer::S2C_DetectChangePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_DetectChangePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_DetectChangePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_DetectChangePlayerDefaultTypeInternal() {}
  union {
    S2C_DetectChangePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_DetectChangePlayerDefaultTypeInternal _S2C_DetectChangePlayer_default_instance_;
PROTOBUF_CONSTEXPR C2S_PlayerAutoAttack::C2S_PlayerAutoAttack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_PlayerAutoAttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_PlayerAutoAttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_PlayerAutoAttackDefaultTypeInternal() {}
  union {
    C2S_PlayerAutoAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_PlayerAutoAttackDefaultTypeInternal _C2S_PlayerAutoAttack_default_instance_;
PROTOBUF_CONSTEXPR S2C_PlayerAutoAttack::S2C_PlayerAutoAttack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.combo_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_PlayerAutoAttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_PlayerAutoAttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_PlayerAutoAttackDefaultTypeInternal() {}
  union {
    S2C_PlayerAutoAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_PlayerAutoAttackDefaultTypeInternal _S2C_PlayerAutoAttack_default_instance_;
PROTOBUF_CONSTEXPR S2C_UpdateExperience::S2C_UpdateExperience(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.experience_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_UpdateExperienceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_UpdateExperienceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_UpdateExperienceDefaultTypeInternal() {}
  union {
    S2C_UpdateExperience _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_UpdateExperienceDefaultTypeInternal _S2C_UpdateExperience_default_instance_;
PROTOBUF_CONSTEXPR S2C_LevelUp::S2C_LevelUp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.experience_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_LevelUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_LevelUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_LevelUpDefaultTypeInternal() {}
  union {
    S2C_LevelUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_LevelUpDefaultTypeInternal _S2C_LevelUp_default_instance_;
PROTOBUF_CONSTEXPR C2S_Chat::C2S_Chat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_ChatDefaultTypeInternal() {}
  union {
    C2S_Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_ChatDefaultTypeInternal _C2S_Chat_default_instance_;
PROTOBUF_CONSTEXPR S2C_Chat::S2C_Chat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.chat_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_ChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_ChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_ChatDefaultTypeInternal() {}
  union {
    S2C_Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_ChatDefaultTypeInternal _S2C_Chat_default_instance_;
PROTOBUF_CONSTEXPR C2S_LoadFriendList::C2S_LoadFriendList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.list_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_LoadFriendListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_LoadFriendListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_LoadFriendListDefaultTypeInternal() {}
  union {
    C2S_LoadFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_LoadFriendListDefaultTypeInternal _C2S_LoadFriendList_default_instance_;
PROTOBUF_CONSTEXPR S2C_LoadFriendList::S2C_LoadFriendList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friends_)*/{}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.list_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_LoadFriendListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_LoadFriendListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_LoadFriendListDefaultTypeInternal() {}
  union {
    S2C_LoadFriendList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_LoadFriendListDefaultTypeInternal _S2C_LoadFriendList_default_instance_;
PROTOBUF_CONSTEXPR C2S_RequestFriend::C2S_RequestFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nick_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_RequestFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_RequestFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_RequestFriendDefaultTypeInternal() {}
  union {
    C2S_RequestFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_RequestFriendDefaultTypeInternal _C2S_RequestFriend_default_instance_;
PROTOBUF_CONSTEXPR S2C_RequestFriend::S2C_RequestFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_RequestFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_RequestFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_RequestFriendDefaultTypeInternal() {}
  union {
    S2C_RequestFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_RequestFriendDefaultTypeInternal _S2C_RequestFriend_default_instance_;
PROTOBUF_CONSTEXPR C2S_BlockFriend::C2S_BlockFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nick_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_BlockFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_BlockFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_BlockFriendDefaultTypeInternal() {}
  union {
    C2S_BlockFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_BlockFriendDefaultTypeInternal _C2S_BlockFriend_default_instance_;
PROTOBUF_CONSTEXPR S2C_BlockFriend::S2C_BlockFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.action_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_BlockFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_BlockFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_BlockFriendDefaultTypeInternal() {}
  union {
    S2C_BlockFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_BlockFriendDefaultTypeInternal _S2C_BlockFriend_default_instance_;
PROTOBUF_CONSTEXPR S2C_ConnectFriend::S2C_ConnectFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nick_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_ConnectFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_ConnectFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_ConnectFriendDefaultTypeInternal() {}
  union {
    S2C_ConnectFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_ConnectFriendDefaultTypeInternal _S2C_ConnectFriend_default_instance_;
PROTOBUF_CONSTEXPR S2C_DisConnectFriend::S2C_DisConnectFriend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nick_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_DisConnectFriendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_DisConnectFriendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_DisConnectFriendDefaultTypeInternal() {}
  union {
    S2C_DisConnectFriend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_DisConnectFriendDefaultTypeInternal _S2C_DisConnectFriend_default_instance_;
PROTOBUF_CONSTEXPR S2C_AppearItem::S2C_AppearItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_AppearItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_AppearItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_AppearItemDefaultTypeInternal() {}
  union {
    S2C_AppearItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_AppearItemDefaultTypeInternal _S2C_AppearItem_default_instance_;
PROTOBUF_CONSTEXPR S2C_AppearArrow::S2C_AppearArrow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_AppearArrowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_AppearArrowDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_AppearArrowDefaultTypeInternal() {}
  union {
    S2C_AppearArrow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_AppearArrowDefaultTypeInternal _S2C_AppearArrow_default_instance_;
PROTOBUF_CONSTEXPR S2C_MovementProjectile::S2C_MovementProjectile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_MovementProjectileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_MovementProjectileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_MovementProjectileDefaultTypeInternal() {}
  union {
    S2C_MovementProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_MovementProjectileDefaultTypeInternal _S2C_MovementProjectile_default_instance_;
PROTOBUF_CONSTEXPR S2C_AppearEnemy::S2C_AppearEnemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.cur_location_)*/nullptr
  , /*decltype(_impl_.move_location_)*/nullptr
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.enemy_id_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_AppearEnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_AppearEnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_AppearEnemyDefaultTypeInternal() {}
  union {
    S2C_AppearEnemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_AppearEnemyDefaultTypeInternal _S2C_AppearEnemy_default_instance_;
PROTOBUF_CONSTEXPR S2C_DetectChangeEnemy::S2C_DetectChangeEnemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_DetectChangeEnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_DetectChangeEnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_DetectChangeEnemyDefaultTypeInternal() {}
  union {
    S2C_DetectChangeEnemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_DetectChangeEnemyDefaultTypeInternal _S2C_DetectChangeEnemy_default_instance_;
PROTOBUF_CONSTEXPR S2C_MovementEnemy::S2C_MovementEnemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cur_location_)*/nullptr
  , /*decltype(_impl_.move_location_)*/nullptr
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_MovementEnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_MovementEnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_MovementEnemyDefaultTypeInternal() {}
  union {
    S2C_MovementEnemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_MovementEnemyDefaultTypeInternal _S2C_MovementEnemy_default_instance_;
PROTOBUF_CONSTEXPR S2C_EnemyAutoAttack::S2C_EnemyAutoAttack(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_EnemyAutoAttackDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_EnemyAutoAttackDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_EnemyAutoAttackDefaultTypeInternal() {}
  union {
    S2C_EnemyAutoAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_EnemyAutoAttackDefaultTypeInternal _S2C_EnemyAutoAttack_default_instance_;
PROTOBUF_CONSTEXPR S2C_HitEnemy::S2C_HitEnemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_HitEnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_HitEnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_HitEnemyDefaultTypeInternal() {}
  union {
    S2C_HitEnemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_HitEnemyDefaultTypeInternal _S2C_HitEnemy_default_instance_;
PROTOBUF_CONSTEXPR S2C_DeathEnemy::S2C_DeathEnemy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_DeathEnemyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_DeathEnemyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_DeathEnemyDefaultTypeInternal() {}
  union {
    S2C_DeathEnemy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_DeathEnemyDefaultTypeInternal _S2C_DeathEnemy_default_instance_;
PROTOBUF_CONSTEXPR S2C_DisAppearGameObject::S2C_DisAppearGameObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_DisAppearGameObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_DisAppearGameObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_DisAppearGameObjectDefaultTypeInternal() {}
  union {
    S2C_DisAppearGameObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_DisAppearGameObjectDefaultTypeInternal _S2C_DisAppearGameObject_default_instance_;
PROTOBUF_CONSTEXPR C2S_LoadInventory::C2S_LoadInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_LoadInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_LoadInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_LoadInventoryDefaultTypeInternal() {}
  union {
    C2S_LoadInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_LoadInventoryDefaultTypeInternal _C2S_LoadInventory_default_instance_;
PROTOBUF_CONSTEXPR S2C_LoadInventory::S2C_LoadInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_.eqipment_)*/{}
  , /*decltype(_impl_.money_)*/0
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_LoadInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_LoadInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_LoadInventoryDefaultTypeInternal() {}
  union {
    S2C_LoadInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_LoadInventoryDefaultTypeInternal _S2C_LoadInventory_default_instance_;
PROTOBUF_CONSTEXPR C2S_InsertInventory::C2S_InsertInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_InsertInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_InsertInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_InsertInventoryDefaultTypeInternal() {}
  union {
    C2S_InsertInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_InsertInventoryDefaultTypeInternal _C2S_InsertInventory_default_instance_;
PROTOBUF_CONSTEXPR S2C_InsertInventory::S2C_InsertInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_InsertInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_InsertInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_InsertInventoryDefaultTypeInternal() {}
  union {
    S2C_InsertInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_InsertInventoryDefaultTypeInternal _S2C_InsertInventory_default_instance_;
PROTOBUF_CONSTEXPR C2S_UpdateInventory::C2S_UpdateInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_UpdateInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_UpdateInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_UpdateInventoryDefaultTypeInternal() {}
  union {
    C2S_UpdateInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_UpdateInventoryDefaultTypeInternal _C2S_UpdateInventory_default_instance_;
PROTOBUF_CONSTEXPR S2C_UpdateInventory::S2C_UpdateInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_UpdateInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_UpdateInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_UpdateInventoryDefaultTypeInternal() {}
  union {
    S2C_UpdateInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_UpdateInventoryDefaultTypeInternal _S2C_UpdateInventory_default_instance_;
PROTOBUF_CONSTEXPR C2S_DeleteInventory::C2S_DeleteInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_DeleteInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_DeleteInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_DeleteInventoryDefaultTypeInternal() {}
  union {
    C2S_DeleteInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_DeleteInventoryDefaultTypeInternal _C2S_DeleteInventory_default_instance_;
PROTOBUF_CONSTEXPR S2C_DeleteInventory::S2C_DeleteInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_DeleteInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_DeleteInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_DeleteInventoryDefaultTypeInternal() {}
  union {
    S2C_DeleteInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_DeleteInventoryDefaultTypeInternal _S2C_DeleteInventory_default_instance_;
PROTOBUF_CONSTEXPR S2C_RollbackInventory::S2C_RollbackInventory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_RollbackInventoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_RollbackInventoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_RollbackInventoryDefaultTypeInternal() {}
  union {
    S2C_RollbackInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_RollbackInventoryDefaultTypeInternal _S2C_RollbackInventory_default_instance_;
PROTOBUF_CONSTEXPR C2S_ReplaceEqipment::C2S_ReplaceEqipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.insert_inven_item_)*/nullptr
  , /*decltype(_impl_.insert_eqip_item_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.part_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C2S_ReplaceEqipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2S_ReplaceEqipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2S_ReplaceEqipmentDefaultTypeInternal() {}
  union {
    C2S_ReplaceEqipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2S_ReplaceEqipmentDefaultTypeInternal _C2S_ReplaceEqipment_default_instance_;
PROTOBUF_CONSTEXPR S2C_ReplaceEqipment::S2C_ReplaceEqipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.eqipment_)*/nullptr
  , /*decltype(_impl_.remote_id_)*/int64_t{0}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S2C_ReplaceEqipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S2C_ReplaceEqipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S2C_ReplaceEqipmentDefaultTypeInternal() {}
  union {
    S2C_ReplaceEqipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S2C_ReplaceEqipmentDefaultTypeInternal _S2C_ReplaceEqipment_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_GamePacket_2eproto[48];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_GamePacket_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_GamePacket_2eproto = nullptr;

const uint32_t TableStruct_GamePacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_EnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_EnterGameServer, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _impl_.character_data_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _impl_.eqipment_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _impl_.transform_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnterGameServer, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LeaveGameServer, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LeaveGameServer, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_Tick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_Tick, _impl_.cur_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_Tick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearCharacter, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearCharacter, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearCharacter, _impl_.cur_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearCharacter, _impl_.move_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearCharacter, _impl_.character_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DisAppearCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DisAppearCharacter, _impl_.remote_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MovementCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MovementCharacter, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MovementCharacter, _impl_.cur_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MovementCharacter, _impl_.move_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_MovementCharacter, _impl_.move_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementCharacter, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementCharacter, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementCharacter, _impl_.cur_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementCharacter, _impl_.move_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementCharacter, _impl_.move_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_PlayAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_PlayAnimation, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayAnimation, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayAnimation, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayAnimation, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangePlayer, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangePlayer, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangePlayer, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_PlayerAutoAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_PlayerAutoAttack, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_PlayerAutoAttack, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayerAutoAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayerAutoAttack, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayerAutoAttack, _impl_.combo_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayerAutoAttack, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayerAutoAttack, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_PlayerAutoAttack, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_UpdateExperience, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_UpdateExperience, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_UpdateExperience, _impl_.experience_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_UpdateExperience, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LevelUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LevelUp, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LevelUp, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LevelUp, _impl_.experience_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LevelUp, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_Chat, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_Chat, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_Chat, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_Chat, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_Chat, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_Chat, _impl_.chat_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_Chat, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LoadFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LoadFriendList, _impl_.list_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LoadFriendList, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadFriendList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadFriendList, _impl_.friends_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadFriendList, _impl_.list_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadFriendList, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RequestFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RequestFriend, _impl_.nick_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RequestFriend, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_RequestFriend, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RequestFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RequestFriend, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RequestFriend, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RequestFriend, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_BlockFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_BlockFriend, _impl_.nick_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_BlockFriend, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_BlockFriend, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_BlockFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_BlockFriend, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_BlockFriend, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_BlockFriend, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ConnectFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ConnectFriend, _impl_.nick_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ConnectFriend, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DisConnectFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DisConnectFriend, _impl_.nick_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DisConnectFriend, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearItem, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearArrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearArrow, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearArrow, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearArrow, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearArrow, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementProjectile, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementProjectile, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementProjectile, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _impl_.enemy_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _impl_.cur_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _impl_.move_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_AppearEnemy, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangeEnemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangeEnemy, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangeEnemy, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangeEnemy, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DetectChangeEnemy, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementEnemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementEnemy, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementEnemy, _impl_.cur_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementEnemy, _impl_.move_location_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_MovementEnemy, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnemyAutoAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnemyAutoAttack, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnemyAutoAttack, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_EnemyAutoAttack, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_HitEnemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_HitEnemy, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_HitEnemy, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DeathEnemy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DeathEnemy, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DeathEnemy, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DisAppearGameObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DisAppearGameObject, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LoadInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_LoadInventory, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadInventory, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadInventory, _impl_.eqipment_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadInventory, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_LoadInventory, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_InsertInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_InsertInventory, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_InsertInventory, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_InsertInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_InsertInventory, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_InsertInventory, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_InsertInventory, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_UpdateInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_UpdateInventory, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_UpdateInventory, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_UpdateInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_UpdateInventory, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_DeleteInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_DeleteInventory, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_DeleteInventory, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_DeleteInventory, _impl_.location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DeleteInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DeleteInventory, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DeleteInventory, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_DeleteInventory, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RollbackInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RollbackInventory, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_RollbackInventory, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_ReplaceEqipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_ReplaceEqipment, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_ReplaceEqipment, _impl_.insert_inven_item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_ReplaceEqipment, _impl_.insert_eqip_item_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C2S_ReplaceEqipment, _impl_.part_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ReplaceEqipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ReplaceEqipment, _impl_.remote_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ReplaceEqipment, _impl_.eqipment_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S2C_ReplaceEqipment, _impl_.error_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C2S_EnterGameServer)},
  { 7, -1, -1, sizeof(::Protocol::S2C_EnterGameServer)},
  { 20, -1, -1, sizeof(::Protocol::C2S_LeaveGameServer)},
  { 26, -1, -1, sizeof(::Protocol::S2C_LeaveGameServer)},
  { 34, -1, -1, sizeof(::Protocol::C2S_Tick)},
  { 41, -1, -1, sizeof(::Protocol::S2C_Tick)},
  { 47, -1, -1, sizeof(::Protocol::S2C_AppearCharacter)},
  { 58, -1, -1, sizeof(::Protocol::S2C_DisAppearCharacter)},
  { 65, -1, -1, sizeof(::Protocol::C2S_MovementCharacter)},
  { 75, -1, -1, sizeof(::Protocol::S2C_MovementCharacter)},
  { 86, -1, -1, sizeof(::Protocol::C2S_PlayAnimation)},
  { 93, -1, -1, sizeof(::Protocol::S2C_PlayAnimation)},
  { 102, -1, -1, sizeof(::Protocol::S2C_DetectChangePlayer)},
  { 111, -1, -1, sizeof(::Protocol::C2S_PlayerAutoAttack)},
  { 119, -1, -1, sizeof(::Protocol::S2C_PlayerAutoAttack)},
  { 130, -1, -1, sizeof(::Protocol::S2C_UpdateExperience)},
  { 139, -1, -1, sizeof(::Protocol::S2C_LevelUp)},
  { 149, -1, -1, sizeof(::Protocol::C2S_Chat)},
  { 157, -1, -1, sizeof(::Protocol::S2C_Chat)},
  { 168, -1, -1, sizeof(::Protocol::C2S_LoadFriendList)},
  { 176, -1, -1, sizeof(::Protocol::S2C_LoadFriendList)},
  { 185, -1, -1, sizeof(::Protocol::C2S_RequestFriend)},
  { 194, -1, -1, sizeof(::Protocol::S2C_RequestFriend)},
  { 203, -1, -1, sizeof(::Protocol::C2S_BlockFriend)},
  { 212, -1, -1, sizeof(::Protocol::S2C_BlockFriend)},
  { 221, -1, -1, sizeof(::Protocol::S2C_ConnectFriend)},
  { 229, -1, -1, sizeof(::Protocol::S2C_DisConnectFriend)},
  { 237, -1, -1, sizeof(::Protocol::S2C_AppearItem)},
  { 244, -1, -1, sizeof(::Protocol::S2C_AppearArrow)},
  { 254, -1, -1, sizeof(::Protocol::S2C_MovementProjectile)},
  { 263, -1, -1, sizeof(::Protocol::S2C_AppearEnemy)},
  { 276, -1, -1, sizeof(::Protocol::S2C_DetectChangeEnemy)},
  { 286, -1, -1, sizeof(::Protocol::S2C_MovementEnemy)},
  { 296, -1, -1, sizeof(::Protocol::S2C_EnemyAutoAttack)},
  { 305, -1, -1, sizeof(::Protocol::S2C_HitEnemy)},
  { 313, -1, -1, sizeof(::Protocol::S2C_DeathEnemy)},
  { 321, -1, -1, sizeof(::Protocol::S2C_DisAppearGameObject)},
  { 328, -1, -1, sizeof(::Protocol::C2S_LoadInventory)},
  { 335, -1, -1, sizeof(::Protocol::S2C_LoadInventory)},
  { 345, -1, -1, sizeof(::Protocol::C2S_InsertInventory)},
  { 353, -1, -1, sizeof(::Protocol::S2C_InsertInventory)},
  { 362, -1, -1, sizeof(::Protocol::C2S_UpdateInventory)},
  { 370, -1, -1, sizeof(::Protocol::S2C_UpdateInventory)},
  { 377, -1, -1, sizeof(::Protocol::C2S_DeleteInventory)},
  { 386, -1, -1, sizeof(::Protocol::S2C_DeleteInventory)},
  { 395, -1, -1, sizeof(::Protocol::S2C_RollbackInventory)},
  { 403, -1, -1, sizeof(::Protocol::C2S_ReplaceEqipment)},
  { 413, -1, -1, sizeof(::Protocol::S2C_ReplaceEqipment)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C2S_EnterGameServer_default_instance_._instance,
  &::Protocol::_S2C_EnterGameServer_default_instance_._instance,
  &::Protocol::_C2S_LeaveGameServer_default_instance_._instance,
  &::Protocol::_S2C_LeaveGameServer_default_instance_._instance,
  &::Protocol::_C2S_Tick_default_instance_._instance,
  &::Protocol::_S2C_Tick_default_instance_._instance,
  &::Protocol::_S2C_AppearCharacter_default_instance_._instance,
  &::Protocol::_S2C_DisAppearCharacter_default_instance_._instance,
  &::Protocol::_C2S_MovementCharacter_default_instance_._instance,
  &::Protocol::_S2C_MovementCharacter_default_instance_._instance,
  &::Protocol::_C2S_PlayAnimation_default_instance_._instance,
  &::Protocol::_S2C_PlayAnimation_default_instance_._instance,
  &::Protocol::_S2C_DetectChangePlayer_default_instance_._instance,
  &::Protocol::_C2S_PlayerAutoAttack_default_instance_._instance,
  &::Protocol::_S2C_PlayerAutoAttack_default_instance_._instance,
  &::Protocol::_S2C_UpdateExperience_default_instance_._instance,
  &::Protocol::_S2C_LevelUp_default_instance_._instance,
  &::Protocol::_C2S_Chat_default_instance_._instance,
  &::Protocol::_S2C_Chat_default_instance_._instance,
  &::Protocol::_C2S_LoadFriendList_default_instance_._instance,
  &::Protocol::_S2C_LoadFriendList_default_instance_._instance,
  &::Protocol::_C2S_RequestFriend_default_instance_._instance,
  &::Protocol::_S2C_RequestFriend_default_instance_._instance,
  &::Protocol::_C2S_BlockFriend_default_instance_._instance,
  &::Protocol::_S2C_BlockFriend_default_instance_._instance,
  &::Protocol::_S2C_ConnectFriend_default_instance_._instance,
  &::Protocol::_S2C_DisConnectFriend_default_instance_._instance,
  &::Protocol::_S2C_AppearItem_default_instance_._instance,
  &::Protocol::_S2C_AppearArrow_default_instance_._instance,
  &::Protocol::_S2C_MovementProjectile_default_instance_._instance,
  &::Protocol::_S2C_AppearEnemy_default_instance_._instance,
  &::Protocol::_S2C_DetectChangeEnemy_default_instance_._instance,
  &::Protocol::_S2C_MovementEnemy_default_instance_._instance,
  &::Protocol::_S2C_EnemyAutoAttack_default_instance_._instance,
  &::Protocol::_S2C_HitEnemy_default_instance_._instance,
  &::Protocol::_S2C_DeathEnemy_default_instance_._instance,
  &::Protocol::_S2C_DisAppearGameObject_default_instance_._instance,
  &::Protocol::_C2S_LoadInventory_default_instance_._instance,
  &::Protocol::_S2C_LoadInventory_default_instance_._instance,
  &::Protocol::_C2S_InsertInventory_default_instance_._instance,
  &::Protocol::_S2C_InsertInventory_default_instance_._instance,
  &::Protocol::_C2S_UpdateInventory_default_instance_._instance,
  &::Protocol::_S2C_UpdateInventory_default_instance_._instance,
  &::Protocol::_C2S_DeleteInventory_default_instance_._instance,
  &::Protocol::_S2C_DeleteInventory_default_instance_._instance,
  &::Protocol::_S2C_RollbackInventory_default_instance_._instance,
  &::Protocol::_C2S_ReplaceEqipment_default_instance_._instance,
  &::Protocol::_S2C_ReplaceEqipment_default_instance_._instance,
};

const char descriptor_table_protodef_GamePacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020GamePacket.proto\022\010Protocol\032\022PacketStru"
  "ct.proto\032\020PacketEnum.proto\"$\n\023C2S_EnterG"
  "ameServer\022\r\n\005token\030\001 \001(\014\"\343\001\n\023S2C_EnterGa"
  "meServer\022\021\n\tremote_id\030\001 \001(\003\0220\n\016character"
  "_data\030\002 \001(\0132\030.Protocol.SCharacterData\022\035\n"
  "\004item\030\003 \003(\0132\017.Protocol.SItem\022!\n\010eqipment"
  "\030\004 \003(\0132\017.Protocol.SItem\022\r\n\005money\030\005 \001(\005\022\'"
  "\n\ttransform\030\006 \001(\0132\024.Protocol.STransform\022"
  "\r\n\005error\030\007 \001(\005\"\025\n\023C2S_LeaveGameServer\"7\n"
  "\023S2C_LeaveGameServer\022\021\n\tremote_id\030\001 \001(\003\022"
  "\r\n\005error\030\002 \001(\005\"3\n\010C2S_Tick\022\'\n\014cur_locati"
  "on\030\002 \001(\0132\021.Protocol.SVector\"\n\n\010S2C_Tick\""
  "\300\001\n\023S2C_AppearCharacter\022\021\n\tremote_id\030\001 \001"
  "(\003\022\021\n\ttimestamp\030\002 \001(\003\022\'\n\014cur_location\030\003 "
  "\001(\0132\021.Protocol.SVector\022(\n\rmove_location\030"
  "\004 \001(\0132\021.Protocol.SVector\0220\n\016character_da"
  "ta\030\005 \001(\0132\030.Protocol.SCharacterData\"+\n\026S2"
  "C_DisAppearCharacter\022\021\n\tremote_id\030\001 \001(\003\""
  "\247\001\n\025C2S_MovementCharacter\022\021\n\ttimestamp\030\001"
  " \001(\003\022\'\n\014cur_location\030\002 \001(\0132\021.Protocol.SV"
  "ector\022(\n\rmove_location\030\003 \001(\0132\021.Protocol."
  "SVector\022(\n\rmove_velocity\030\004 \001(\0132\021.Protoco"
  "l.SVector\"\272\001\n\025S2C_MovementCharacter\022\021\n\tr"
  "emote_id\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\003\022\'\n\014cur"
  "_location\030\003 \001(\0132\021.Protocol.SVector\022(\n\rmo"
  "ve_location\030\004 \001(\0132\021.Protocol.SVector\022(\n\r"
  "move_velocity\030\005 \001(\0132\021.Protocol.SVector\"&"
  "\n\021C2S_PlayAnimation\022\021\n\ttimestamp\030\001 \001(\003\"G"
  "\n\021S2C_PlayAnimation\022\021\n\tremote_id\030\001 \001(\003\022\021"
  "\n\ttimestamp\030\002 \001(\003\022\014\n\004type\030\003 \001(\005\"^\n\026S2C_D"
  "etectChangePlayer\022\021\n\tremote_id\030\001 \001(\003\022\036\n\005"
  "stats\030\002 \003(\0132\017.Protocol.SStat\022\021\n\ttimestam"
  "p\030\003 \001(\003\"<\n\024C2S_PlayerAutoAttack\022\021\n\ttimes"
  "tamp\030\001 \001(\003\022\021\n\tobject_id\030\002 \001(\003\"\226\001\n\024S2C_Pl"
  "ayerAutoAttack\022\021\n\tremote_id\030\001 \001(\003\022\r\n\005com"
  "bo\030\002 \001(\005\022#\n\010location\030\003 \001(\0132\021.Protocol.SV"
  "ector\022$\n\010rotation\030\004 \001(\0132\022.Protocol.SRota"
  "tor\022\021\n\ttimestamp\030\005 \001(\003\"P\n\024S2C_UpdateExpe"
  "rience\022\021\n\tremote_id\030\001 \001(\003\022\022\n\nexperience\030"
  "\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\003\"V\n\013S2C_LevelUp\022"
  "\021\n\tremote_id\030\001 \001(\003\022\r\n\005level\030\002 \001(\005\022\022\n\nexp"
  "erience\030\003 \001(\005\022\021\n\ttimestamp\030\004 \001(\003\".\n\010C2S_"
  "Chat\022\017\n\007message\030\001 \001(\014\022\021\n\ttimestamp\030\002 \001(\003"
  "\"s\n\010S2C_Chat\022\021\n\tremote_id\030\001 \001(\003\022\014\n\004name\030"
  "\002 \001(\014\022\017\n\007message\030\003 \001(\014\022\"\n\tchat_type\030\004 \001("
  "\0162\017.Protocol.EChat\022\021\n\ttimestamp\030\005 \001(\003\":\n"
  "\022C2S_LoadFriendList\022\021\n\tlist_type\030\001 \001(\005\022\021"
  "\n\ttimestamp\030\002 \001(\003\"^\n\022S2C_LoadFriendList\022"
  "\"\n\007friends\030\001 \003(\0132\021.Protocol.SFriend\022\021\n\tl"
  "ist_type\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\003\"I\n\021C2S"
  "_RequestFriend\022\021\n\tnick_name\030\001 \001(\014\022\016\n\006act"
  "ion\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\003\"E\n\021S2C_Requ"
  "estFriend\022\r\n\005error\030\001 \001(\005\022\016\n\006action\030\002 \001(\005"
  "\022\021\n\ttimestamp\030\003 \001(\003\"G\n\017C2S_BlockFriend\022\021"
  "\n\tnick_name\030\001 \001(\014\022\016\n\006action\030\002 \001(\005\022\021\n\ttim"
  "estamp\030\003 \001(\003\"C\n\017S2C_BlockFriend\022\r\n\005error"
  "\030\001 \001(\005\022\016\n\006action\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001("
  "\003\"9\n\021S2C_ConnectFriend\022\021\n\tnick_name\030\001 \001("
  "\014\022\021\n\ttimestamp\030\002 \001(\003\"<\n\024S2C_DisConnectFr"
  "iend\022\021\n\tnick_name\030\001 \001(\014\022\021\n\ttimestamp\030\002 \001"
  "(\003\"/\n\016S2C_AppearItem\022\035\n\004item\030\001 \001(\0132\017.Pro"
  "tocol.SItem\"\202\001\n\017S2C_AppearArrow\022\021\n\tobjec"
  "t_id\030\001 \001(\003\022#\n\010location\030\002 \001(\0132\021.Protocol."
  "SVector\022$\n\010rotation\030\003 \001(\0132\022.Protocol.SRo"
  "tator\022\021\n\ttimestamp\030\004 \001(\003\"c\n\026S2C_Movement"
  "Projectile\022\021\n\tobject_id\030\001 \001(\003\022#\n\010locatio"
  "n\030\002 \001(\0132\021.Protocol.SVector\022\021\n\ttimestamp\030"
  "\003 \001(\003\"\342\001\n\017S2C_AppearEnemy\022\021\n\tobject_id\030\001"
  " \001(\003\022\020\n\010enemy_id\030\002 \001(\005\022$\n\005state\030\003 \001(\0162\025."
  "Protocol.EEnemyState\022\036\n\005stats\030\004 \003(\0132\017.Pr"
  "otocol.SStat\022\'\n\014cur_location\030\005 \001(\0132\021.Pro"
  "tocol.SVector\022(\n\rmove_location\030\006 \001(\0132\021.P"
  "rotocol.SVector\022\021\n\ttimestamp\030\007 \001(\003\"\203\001\n\025S"
  "2C_DetectChangeEnemy\022\021\n\tobject_id\030\001 \001(\003\022"
  "\036\n\005stats\030\002 \003(\0132\017.Protocol.SStat\022$\n\005state"
  "\030\003 \001(\0162\025.Protocol.EEnemyState\022\021\n\ttimesta"
  "mp\030\004 \001(\003\"\214\001\n\021S2C_MovementEnemy\022\021\n\tobject"
  "_id\030\001 \001(\003\022\'\n\014cur_location\030\002 \001(\0132\021.Protoc"
  "ol.SVector\022(\n\rmove_location\030\003 \001(\0132\021.Prot"
  "ocol.SVector\022\021\n\ttimestamp\030\004 \001(\003\"a\n\023S2C_E"
  "nemyAutoAttack\022\021\n\tobject_id\030\001 \001(\003\022$\n\010rot"
  "ation\030\002 \001(\0132\022.Protocol.SRotator\022\021\n\ttimes"
  "tamp\030\003 \001(\003\"4\n\014S2C_HitEnemy\022\021\n\tobject_id\030"
  "\001 \001(\003\022\021\n\ttimestamp\030\003 \001(\003\"6\n\016S2C_DeathEne"
  "my\022\021\n\tobject_id\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\003"
  "\",\n\027S2C_DisAppearGameObject\022\021\n\tobject_id"
  "\030\001 \001(\003\"&\n\021C2S_LoadInventory\022\021\n\ttimestamp"
  "\030\001 \001(\003\"s\n\021S2C_LoadInventory\022\035\n\004item\030\001 \003("
  "\0132\017.Protocol.SItem\022!\n\010eqipment\030\002 \003(\0132\017.P"
  "rotocol.SItem\022\r\n\005money\030\003 \001(\005\022\r\n\005error\030\004 "
  "\001(\005\"G\n\023C2S_InsertInventory\022\021\n\ttimestamp\030"
  "\001 \001(\003\022\035\n\004item\030\002 \001(\0132\017.Protocol.SItem\"J\n\023"
  "S2C_InsertInventory\022\021\n\tremote_id\030\001 \001(\003\022\021"
  "\n\tobject_id\030\002 \001(\003\022\r\n\005error\030\003 \001(\005\"G\n\023C2S_"
  "UpdateInventory\022\021\n\ttimestamp\030\001 \001(\003\022\035\n\004it"
  "em\030\002 \001(\0132\017.Protocol.SItem\"$\n\023S2C_UpdateI"
  "nventory\022\r\n\005error\030\001 \001(\005\"l\n\023C2S_DeleteInv"
  "entory\022\021\n\ttimestamp\030\001 \001(\003\022\035\n\004item\030\002 \001(\0132"
  "\017.Protocol.SItem\022#\n\010location\030\003 \001(\0132\021.Pro"
  "tocol.SVector\"V\n\023S2C_DeleteInventory\022\021\n\t"
  "remote_id\030\001 \001(\003\022\035\n\004item\030\002 \001(\0132\017.Protocol"
  ".SItem\022\r\n\005error\030\003 \001(\005\"I\n\025S2C_RollbackInv"
  "entory\022\021\n\tremote_id\030\001 \001(\003\022\035\n\004item\030\002 \001(\0132"
  "\017.Protocol.SItem\"\247\001\n\023C2S_ReplaceEqipment"
  "\022\021\n\ttimestamp\030\001 \001(\003\022*\n\021insert_inven_item"
  "\030\002 \001(\0132\017.Protocol.SItem\022)\n\020insert_eqip_i"
  "tem\030\003 \001(\0132\017.Protocol.SItem\022&\n\004part\030\004 \001(\016"
  "2\030.Protocol.ECharacterPart\"g\n\023S2C_Replac"
  "eEqipment\022\021\n\tremote_id\030\001 \001(\003\022.\n\010eqipment"
  "\030\002 \001(\0132\034.Protocol.SCharacterEqipment\022\r\n\005"
  "error\030\003 \001(\005b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_GamePacket_2eproto_deps[2] = {
  &::descriptor_table_PacketEnum_2eproto,
  &::descriptor_table_PacketStruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_GamePacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_GamePacket_2eproto = {
    false, false, 4419, descriptor_table_protodef_GamePacket_2eproto,
    "GamePacket.proto",
    &descriptor_table_GamePacket_2eproto_once, descriptor_table_GamePacket_2eproto_deps, 2, 48,
    schemas, file_default_instances, TableStruct_GamePacket_2eproto::offsets,
    file_level_metadata_GamePacket_2eproto, file_level_enum_descriptors_GamePacket_2eproto,
    file_level_service_descriptors_GamePacket_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_GamePacket_2eproto_getter() {
  return &descriptor_table_GamePacket_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_GamePacket_2eproto(&descriptor_table_GamePacket_2eproto);
namespace Protocol {

// ===================================================================

class C2S_EnterGameServer::_Internal {
 public:
};

C2S_EnterGameServer::C2S_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_EnterGameServer)
}
C2S_EnterGameServer::C2S_EnterGameServer(const C2S_EnterGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_EnterGameServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_EnterGameServer)
}

inline void C2S_EnterGameServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2S_EnterGameServer::~C2S_EnterGameServer() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_EnterGameServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_EnterGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void C2S_EnterGameServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_EnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_EnterGameServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_EnterGameServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_EnterGameServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_EnterGameServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes token = 1;
  if (!this->_internal_token().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_EnterGameServer)
  return target;
}

size_t C2S_EnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_EnterGameServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_EnterGameServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_EnterGameServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_EnterGameServer::GetClassData() const { return &_class_data_; }


void C2S_EnterGameServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_EnterGameServer*>(&to_msg);
  auto& from = static_cast<const C2S_EnterGameServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_EnterGameServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_EnterGameServer::CopyFrom(const C2S_EnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_EnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_EnterGameServer::IsInitialized() const {
  return true;
}

void C2S_EnterGameServer::InternalSwap(C2S_EnterGameServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_EnterGameServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[0]);
}

// ===================================================================

class S2C_EnterGameServer::_Internal {
 public:
  static const ::Protocol::SCharacterData& character_data(const S2C_EnterGameServer* msg);
  static const ::Protocol::STransform& transform(const S2C_EnterGameServer* msg);
};

const ::Protocol::SCharacterData&
S2C_EnterGameServer::_Internal::character_data(const S2C_EnterGameServer* msg) {
  return *msg->_impl_.character_data_;
}
const ::Protocol::STransform&
S2C_EnterGameServer::_Internal::transform(const S2C_EnterGameServer* msg) {
  return *msg->_impl_.transform_;
}
void S2C_EnterGameServer::clear_character_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_data_ != nullptr) {
    delete _impl_.character_data_;
  }
  _impl_.character_data_ = nullptr;
}
void S2C_EnterGameServer::clear_item() {
  _impl_.item_.Clear();
}
void S2C_EnterGameServer::clear_eqipment() {
  _impl_.eqipment_.Clear();
}
void S2C_EnterGameServer::clear_transform() {
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
}
S2C_EnterGameServer::S2C_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_EnterGameServer)
}
S2C_EnterGameServer::S2C_EnterGameServer(const S2C_EnterGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_EnterGameServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.eqipment_){from._impl_.eqipment_}
    , decltype(_impl_.character_data_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character_data()) {
    _this->_impl_.character_data_ = new ::Protocol::SCharacterData(*from._impl_.character_data_);
  }
  if (from._internal_has_transform()) {
    _this->_impl_.transform_ = new ::Protocol::STransform(*from._impl_.transform_);
  }
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_EnterGameServer)
}

inline void S2C_EnterGameServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){arena}
    , decltype(_impl_.eqipment_){arena}
    , decltype(_impl_.character_data_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.money_){0}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_EnterGameServer::~S2C_EnterGameServer() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_EnterGameServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_EnterGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
  _impl_.eqipment_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.character_data_;
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void S2C_EnterGameServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_EnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_EnterGameServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.eqipment_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.character_data_ != nullptr) {
    delete _impl_.character_data_;
  }
  _impl_.character_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.transform_ != nullptr) {
    delete _impl_.transform_;
  }
  _impl_.transform_ = nullptr;
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_EnterGameServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SCharacterData character_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.SItem item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.SItem eqipment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eqipment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 money = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.STransform transform = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_EnterGameServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_EnterGameServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // .Protocol.SCharacterData character_data = 2;
  if (this->_internal_has_character_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::character_data(this),
        _Internal::character_data(this).GetCachedSize(), target, stream);
  }

  // repeated .Protocol.SItem item = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protocol.SItem eqipment = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_eqipment_size()); i < n; i++) {
    const auto& repfield = this->_internal_eqipment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 money = 5;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_money(), target);
  }

  // .Protocol.STransform transform = 6;
  if (this->_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // int32 error = 7;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_EnterGameServer)
  return target;
}

size_t S2C_EnterGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_EnterGameServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.SItem item = 3;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.SItem eqipment = 4;
  total_size += 1UL * this->_internal_eqipment_size();
  for (const auto& msg : this->_impl_.eqipment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.SCharacterData character_data = 2;
  if (this->_internal_has_character_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_data_);
  }

  // .Protocol.STransform transform = 6;
  if (this->_internal_has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int32 money = 5;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_money());
  }

  // int32 error = 7;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_EnterGameServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_EnterGameServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_EnterGameServer::GetClassData() const { return &_class_data_; }


void S2C_EnterGameServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_EnterGameServer*>(&to_msg);
  auto& from = static_cast<const S2C_EnterGameServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_EnterGameServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  _this->_impl_.eqipment_.MergeFrom(from._impl_.eqipment_);
  if (from._internal_has_character_data()) {
    _this->_internal_mutable_character_data()->::Protocol::SCharacterData::MergeFrom(
        from._internal_character_data());
  }
  if (from._internal_has_transform()) {
    _this->_internal_mutable_transform()->::Protocol::STransform::MergeFrom(
        from._internal_transform());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_EnterGameServer::CopyFrom(const S2C_EnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_EnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_EnterGameServer::IsInitialized() const {
  return true;
}

void S2C_EnterGameServer::InternalSwap(S2C_EnterGameServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  _impl_.eqipment_.InternalSwap(&other->_impl_.eqipment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_EnterGameServer, _impl_.error_)
      + sizeof(S2C_EnterGameServer::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(S2C_EnterGameServer, _impl_.character_data_)>(
          reinterpret_cast<char*>(&_impl_.character_data_),
          reinterpret_cast<char*>(&other->_impl_.character_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_EnterGameServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[1]);
}

// ===================================================================

class C2S_LeaveGameServer::_Internal {
 public:
};

C2S_LeaveGameServer::C2S_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_LeaveGameServer)
}
C2S_LeaveGameServer::C2S_LeaveGameServer(const C2S_LeaveGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C2S_LeaveGameServer* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_LeaveGameServer)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_LeaveGameServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_LeaveGameServer::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C2S_LeaveGameServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[2]);
}

// ===================================================================

class S2C_LeaveGameServer::_Internal {
 public:
};

S2C_LeaveGameServer::S2C_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_LeaveGameServer)
}
S2C_LeaveGameServer::S2C_LeaveGameServer(const S2C_LeaveGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_LeaveGameServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_LeaveGameServer)
}

inline void S2C_LeaveGameServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_LeaveGameServer::~S2C_LeaveGameServer() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_LeaveGameServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_LeaveGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_LeaveGameServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_LeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_LeaveGameServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LeaveGameServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_LeaveGameServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_LeaveGameServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int32 error = 2;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_LeaveGameServer)
  return target;
}

size_t S2C_LeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_LeaveGameServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int32 error = 2;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_LeaveGameServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_LeaveGameServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_LeaveGameServer::GetClassData() const { return &_class_data_; }


void S2C_LeaveGameServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_LeaveGameServer*>(&to_msg);
  auto& from = static_cast<const S2C_LeaveGameServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_LeaveGameServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_LeaveGameServer::CopyFrom(const S2C_LeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_LeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LeaveGameServer::IsInitialized() const {
  return true;
}

void S2C_LeaveGameServer::InternalSwap(S2C_LeaveGameServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_LeaveGameServer, _impl_.error_)
      + sizeof(S2C_LeaveGameServer::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(S2C_LeaveGameServer, _impl_.remote_id_)>(
          reinterpret_cast<char*>(&_impl_.remote_id_),
          reinterpret_cast<char*>(&other->_impl_.remote_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LeaveGameServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[3]);
}

// ===================================================================

class C2S_Tick::_Internal {
 public:
  static const ::Protocol::SVector& cur_location(const C2S_Tick* msg);
};

const ::Protocol::SVector&
C2S_Tick::_Internal::cur_location(const C2S_Tick* msg) {
  return *msg->_impl_.cur_location_;
}
void C2S_Tick::clear_cur_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
}
C2S_Tick::C2S_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_Tick)
}
C2S_Tick::C2S_Tick(const C2S_Tick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_Tick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_location()) {
    _this->_impl_.cur_location_ = new ::Protocol::SVector(*from._impl_.cur_location_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_Tick)
}

inline void C2S_Tick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_Tick::~C2S_Tick() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_Tick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_Tick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cur_location_;
}

void C2S_Tick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_Tick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_Tick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.SVector cur_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_Tick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_Tick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.SVector cur_location = 2;
  if (this->_internal_has_cur_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cur_location(this),
        _Internal::cur_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_Tick)
  return target;
}

size_t C2S_Tick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_Tick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector cur_location = 2;
  if (this->_internal_has_cur_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_Tick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_Tick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_Tick::GetClassData() const { return &_class_data_; }


void C2S_Tick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_Tick*>(&to_msg);
  auto& from = static_cast<const C2S_Tick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_Tick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cur_location()) {
    _this->_internal_mutable_cur_location()->::Protocol::SVector::MergeFrom(
        from._internal_cur_location());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_Tick::CopyFrom(const C2S_Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Tick::IsInitialized() const {
  return true;
}

void C2S_Tick::InternalSwap(C2S_Tick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cur_location_, other->_impl_.cur_location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_Tick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[4]);
}

// ===================================================================

class S2C_Tick::_Internal {
 public:
};

S2C_Tick::S2C_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_Tick)
}
S2C_Tick::S2C_Tick(const S2C_Tick& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S2C_Tick* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_Tick)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_Tick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_Tick::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S2C_Tick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[5]);
}

// ===================================================================

class S2C_AppearCharacter::_Internal {
 public:
  static const ::Protocol::SVector& cur_location(const S2C_AppearCharacter* msg);
  static const ::Protocol::SVector& move_location(const S2C_AppearCharacter* msg);
  static const ::Protocol::SCharacterData& character_data(const S2C_AppearCharacter* msg);
};

const ::Protocol::SVector&
S2C_AppearCharacter::_Internal::cur_location(const S2C_AppearCharacter* msg) {
  return *msg->_impl_.cur_location_;
}
const ::Protocol::SVector&
S2C_AppearCharacter::_Internal::move_location(const S2C_AppearCharacter* msg) {
  return *msg->_impl_.move_location_;
}
const ::Protocol::SCharacterData&
S2C_AppearCharacter::_Internal::character_data(const S2C_AppearCharacter* msg) {
  return *msg->_impl_.character_data_;
}
void S2C_AppearCharacter::clear_cur_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
}
void S2C_AppearCharacter::clear_move_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
}
void S2C_AppearCharacter::clear_character_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_data_ != nullptr) {
    delete _impl_.character_data_;
  }
  _impl_.character_data_ = nullptr;
}
S2C_AppearCharacter::S2C_AppearCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_AppearCharacter)
}
S2C_AppearCharacter::S2C_AppearCharacter(const S2C_AppearCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_AppearCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.character_data_){nullptr}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_location()) {
    _this->_impl_.cur_location_ = new ::Protocol::SVector(*from._impl_.cur_location_);
  }
  if (from._internal_has_move_location()) {
    _this->_impl_.move_location_ = new ::Protocol::SVector(*from._impl_.move_location_);
  }
  if (from._internal_has_character_data()) {
    _this->_impl_.character_data_ = new ::Protocol::SCharacterData(*from._impl_.character_data_);
  }
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AppearCharacter)
}

inline void S2C_AppearCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.character_data_){nullptr}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_AppearCharacter::~S2C_AppearCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AppearCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_AppearCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cur_location_;
  if (this != internal_default_instance()) delete _impl_.move_location_;
  if (this != internal_default_instance()) delete _impl_.character_data_;
}

void S2C_AppearCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_AppearCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AppearCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.character_data_ != nullptr) {
    delete _impl_.character_data_;
  }
  _impl_.character_data_ = nullptr;
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_AppearCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector cur_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector move_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SCharacterData character_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_AppearCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AppearCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .Protocol.SVector cur_location = 3;
  if (this->_internal_has_cur_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cur_location(this),
        _Internal::cur_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector move_location = 4;
  if (this->_internal_has_move_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::move_location(this),
        _Internal::move_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SCharacterData character_data = 5;
  if (this->_internal_has_character_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::character_data(this),
        _Internal::character_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AppearCharacter)
  return target;
}

size_t S2C_AppearCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AppearCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector cur_location = 3;
  if (this->_internal_has_cur_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_location_);
  }

  // .Protocol.SVector move_location = 4;
  if (this->_internal_has_move_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_location_);
  }

  // .Protocol.SCharacterData character_data = 5;
  if (this->_internal_has_character_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_data_);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_AppearCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_AppearCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_AppearCharacter::GetClassData() const { return &_class_data_; }


void S2C_AppearCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_AppearCharacter*>(&to_msg);
  auto& from = static_cast<const S2C_AppearCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AppearCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cur_location()) {
    _this->_internal_mutable_cur_location()->::Protocol::SVector::MergeFrom(
        from._internal_cur_location());
  }
  if (from._internal_has_move_location()) {
    _this->_internal_mutable_move_location()->::Protocol::SVector::MergeFrom(
        from._internal_move_location());
  }
  if (from._internal_has_character_data()) {
    _this->_internal_mutable_character_data()->::Protocol::SCharacterData::MergeFrom(
        from._internal_character_data());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_AppearCharacter::CopyFrom(const S2C_AppearCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AppearCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AppearCharacter::IsInitialized() const {
  return true;
}

void S2C_AppearCharacter::InternalSwap(S2C_AppearCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_AppearCharacter, _impl_.timestamp_)
      + sizeof(S2C_AppearCharacter::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_AppearCharacter, _impl_.cur_location_)>(
          reinterpret_cast<char*>(&_impl_.cur_location_),
          reinterpret_cast<char*>(&other->_impl_.cur_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AppearCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[6]);
}

// ===================================================================

class S2C_DisAppearCharacter::_Internal {
 public:
};

S2C_DisAppearCharacter::S2C_DisAppearCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_DisAppearCharacter)
}
S2C_DisAppearCharacter::S2C_DisAppearCharacter(const S2C_DisAppearCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_DisAppearCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.remote_id_ = from._impl_.remote_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_DisAppearCharacter)
}

inline void S2C_DisAppearCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_DisAppearCharacter::~S2C_DisAppearCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_DisAppearCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_DisAppearCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_DisAppearCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_DisAppearCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_DisAppearCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.remote_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_DisAppearCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_DisAppearCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_DisAppearCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_DisAppearCharacter)
  return target;
}

size_t S2C_DisAppearCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_DisAppearCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_DisAppearCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_DisAppearCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_DisAppearCharacter::GetClassData() const { return &_class_data_; }


void S2C_DisAppearCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_DisAppearCharacter*>(&to_msg);
  auto& from = static_cast<const S2C_DisAppearCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_DisAppearCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_DisAppearCharacter::CopyFrom(const S2C_DisAppearCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_DisAppearCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DisAppearCharacter::IsInitialized() const {
  return true;
}

void S2C_DisAppearCharacter::InternalSwap(S2C_DisAppearCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.remote_id_, other->_impl_.remote_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_DisAppearCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[7]);
}

// ===================================================================

class C2S_MovementCharacter::_Internal {
 public:
  static const ::Protocol::SVector& cur_location(const C2S_MovementCharacter* msg);
  static const ::Protocol::SVector& move_location(const C2S_MovementCharacter* msg);
  static const ::Protocol::SVector& move_velocity(const C2S_MovementCharacter* msg);
};

const ::Protocol::SVector&
C2S_MovementCharacter::_Internal::cur_location(const C2S_MovementCharacter* msg) {
  return *msg->_impl_.cur_location_;
}
const ::Protocol::SVector&
C2S_MovementCharacter::_Internal::move_location(const C2S_MovementCharacter* msg) {
  return *msg->_impl_.move_location_;
}
const ::Protocol::SVector&
C2S_MovementCharacter::_Internal::move_velocity(const C2S_MovementCharacter* msg) {
  return *msg->_impl_.move_velocity_;
}
void C2S_MovementCharacter::clear_cur_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
}
void C2S_MovementCharacter::clear_move_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
}
void C2S_MovementCharacter::clear_move_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.move_velocity_ != nullptr) {
    delete _impl_.move_velocity_;
  }
  _impl_.move_velocity_ = nullptr;
}
C2S_MovementCharacter::C2S_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_MovementCharacter)
}
C2S_MovementCharacter::C2S_MovementCharacter(const C2S_MovementCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_MovementCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.move_velocity_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_location()) {
    _this->_impl_.cur_location_ = new ::Protocol::SVector(*from._impl_.cur_location_);
  }
  if (from._internal_has_move_location()) {
    _this->_impl_.move_location_ = new ::Protocol::SVector(*from._impl_.move_location_);
  }
  if (from._internal_has_move_velocity()) {
    _this->_impl_.move_velocity_ = new ::Protocol::SVector(*from._impl_.move_velocity_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_MovementCharacter)
}

inline void C2S_MovementCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.move_velocity_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_MovementCharacter::~C2S_MovementCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_MovementCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_MovementCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cur_location_;
  if (this != internal_default_instance()) delete _impl_.move_location_;
  if (this != internal_default_instance()) delete _impl_.move_velocity_;
}

void C2S_MovementCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_MovementCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_MovementCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.move_velocity_ != nullptr) {
    delete _impl_.move_velocity_;
  }
  _impl_.move_velocity_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_MovementCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector cur_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector move_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector move_velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_MovementCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_MovementCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .Protocol.SVector cur_location = 2;
  if (this->_internal_has_cur_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cur_location(this),
        _Internal::cur_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector move_location = 3;
  if (this->_internal_has_move_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::move_location(this),
        _Internal::move_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector move_velocity = 4;
  if (this->_internal_has_move_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::move_velocity(this),
        _Internal::move_velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_MovementCharacter)
  return target;
}

size_t C2S_MovementCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_MovementCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector cur_location = 2;
  if (this->_internal_has_cur_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_location_);
  }

  // .Protocol.SVector move_location = 3;
  if (this->_internal_has_move_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_location_);
  }

  // .Protocol.SVector move_velocity = 4;
  if (this->_internal_has_move_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_velocity_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_MovementCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_MovementCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_MovementCharacter::GetClassData() const { return &_class_data_; }


void C2S_MovementCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_MovementCharacter*>(&to_msg);
  auto& from = static_cast<const C2S_MovementCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_MovementCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cur_location()) {
    _this->_internal_mutable_cur_location()->::Protocol::SVector::MergeFrom(
        from._internal_cur_location());
  }
  if (from._internal_has_move_location()) {
    _this->_internal_mutable_move_location()->::Protocol::SVector::MergeFrom(
        from._internal_move_location());
  }
  if (from._internal_has_move_velocity()) {
    _this->_internal_mutable_move_velocity()->::Protocol::SVector::MergeFrom(
        from._internal_move_velocity());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_MovementCharacter::CopyFrom(const C2S_MovementCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_MovementCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_MovementCharacter::IsInitialized() const {
  return true;
}

void C2S_MovementCharacter::InternalSwap(C2S_MovementCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_MovementCharacter, _impl_.timestamp_)
      + sizeof(C2S_MovementCharacter::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(C2S_MovementCharacter, _impl_.cur_location_)>(
          reinterpret_cast<char*>(&_impl_.cur_location_),
          reinterpret_cast<char*>(&other->_impl_.cur_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_MovementCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[8]);
}

// ===================================================================

class S2C_MovementCharacter::_Internal {
 public:
  static const ::Protocol::SVector& cur_location(const S2C_MovementCharacter* msg);
  static const ::Protocol::SVector& move_location(const S2C_MovementCharacter* msg);
  static const ::Protocol::SVector& move_velocity(const S2C_MovementCharacter* msg);
};

const ::Protocol::SVector&
S2C_MovementCharacter::_Internal::cur_location(const S2C_MovementCharacter* msg) {
  return *msg->_impl_.cur_location_;
}
const ::Protocol::SVector&
S2C_MovementCharacter::_Internal::move_location(const S2C_MovementCharacter* msg) {
  return *msg->_impl_.move_location_;
}
const ::Protocol::SVector&
S2C_MovementCharacter::_Internal::move_velocity(const S2C_MovementCharacter* msg) {
  return *msg->_impl_.move_velocity_;
}
void S2C_MovementCharacter::clear_cur_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
}
void S2C_MovementCharacter::clear_move_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
}
void S2C_MovementCharacter::clear_move_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.move_velocity_ != nullptr) {
    delete _impl_.move_velocity_;
  }
  _impl_.move_velocity_ = nullptr;
}
S2C_MovementCharacter::S2C_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_MovementCharacter)
}
S2C_MovementCharacter::S2C_MovementCharacter(const S2C_MovementCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_MovementCharacter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.move_velocity_){nullptr}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_location()) {
    _this->_impl_.cur_location_ = new ::Protocol::SVector(*from._impl_.cur_location_);
  }
  if (from._internal_has_move_location()) {
    _this->_impl_.move_location_ = new ::Protocol::SVector(*from._impl_.move_location_);
  }
  if (from._internal_has_move_velocity()) {
    _this->_impl_.move_velocity_ = new ::Protocol::SVector(*from._impl_.move_velocity_);
  }
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_MovementCharacter)
}

inline void S2C_MovementCharacter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.move_velocity_){nullptr}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_MovementCharacter::~S2C_MovementCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_MovementCharacter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_MovementCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cur_location_;
  if (this != internal_default_instance()) delete _impl_.move_location_;
  if (this != internal_default_instance()) delete _impl_.move_velocity_;
}

void S2C_MovementCharacter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_MovementCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_MovementCharacter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.move_velocity_ != nullptr) {
    delete _impl_.move_velocity_;
  }
  _impl_.move_velocity_ = nullptr;
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_MovementCharacter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector cur_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector move_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector move_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_MovementCharacter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_MovementCharacter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .Protocol.SVector cur_location = 3;
  if (this->_internal_has_cur_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cur_location(this),
        _Internal::cur_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector move_location = 4;
  if (this->_internal_has_move_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::move_location(this),
        _Internal::move_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector move_velocity = 5;
  if (this->_internal_has_move_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::move_velocity(this),
        _Internal::move_velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_MovementCharacter)
  return target;
}

size_t S2C_MovementCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_MovementCharacter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector cur_location = 3;
  if (this->_internal_has_cur_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_location_);
  }

  // .Protocol.SVector move_location = 4;
  if (this->_internal_has_move_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_location_);
  }

  // .Protocol.SVector move_velocity = 5;
  if (this->_internal_has_move_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_velocity_);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_MovementCharacter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_MovementCharacter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_MovementCharacter::GetClassData() const { return &_class_data_; }


void S2C_MovementCharacter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_MovementCharacter*>(&to_msg);
  auto& from = static_cast<const S2C_MovementCharacter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_MovementCharacter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cur_location()) {
    _this->_internal_mutable_cur_location()->::Protocol::SVector::MergeFrom(
        from._internal_cur_location());
  }
  if (from._internal_has_move_location()) {
    _this->_internal_mutable_move_location()->::Protocol::SVector::MergeFrom(
        from._internal_move_location());
  }
  if (from._internal_has_move_velocity()) {
    _this->_internal_mutable_move_velocity()->::Protocol::SVector::MergeFrom(
        from._internal_move_velocity());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_MovementCharacter::CopyFrom(const S2C_MovementCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_MovementCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_MovementCharacter::IsInitialized() const {
  return true;
}

void S2C_MovementCharacter::InternalSwap(S2C_MovementCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_MovementCharacter, _impl_.timestamp_)
      + sizeof(S2C_MovementCharacter::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_MovementCharacter, _impl_.cur_location_)>(
          reinterpret_cast<char*>(&_impl_.cur_location_),
          reinterpret_cast<char*>(&other->_impl_.cur_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_MovementCharacter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[9]);
}

// ===================================================================

class C2S_PlayAnimation::_Internal {
 public:
};

C2S_PlayAnimation::C2S_PlayAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_PlayAnimation)
}
C2S_PlayAnimation::C2S_PlayAnimation(const C2S_PlayAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_PlayAnimation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_PlayAnimation)
}

inline void C2S_PlayAnimation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_PlayAnimation::~C2S_PlayAnimation() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_PlayAnimation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_PlayAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C2S_PlayAnimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_PlayAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_PlayAnimation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_PlayAnimation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_PlayAnimation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_PlayAnimation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_PlayAnimation)
  return target;
}

size_t C2S_PlayAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_PlayAnimation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_PlayAnimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_PlayAnimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_PlayAnimation::GetClassData() const { return &_class_data_; }


void C2S_PlayAnimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_PlayAnimation*>(&to_msg);
  auto& from = static_cast<const C2S_PlayAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_PlayAnimation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_PlayAnimation::CopyFrom(const C2S_PlayAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_PlayAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PlayAnimation::IsInitialized() const {
  return true;
}

void C2S_PlayAnimation::InternalSwap(C2S_PlayAnimation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_PlayAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[10]);
}

// ===================================================================

class S2C_PlayAnimation::_Internal {
 public:
};

S2C_PlayAnimation::S2C_PlayAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_PlayAnimation)
}
S2C_PlayAnimation::S2C_PlayAnimation(const S2C_PlayAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_PlayAnimation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_PlayAnimation)
}

inline void S2C_PlayAnimation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_PlayAnimation::~S2C_PlayAnimation() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_PlayAnimation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_PlayAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_PlayAnimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_PlayAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_PlayAnimation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_PlayAnimation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_PlayAnimation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_PlayAnimation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_PlayAnimation)
  return target;
}

size_t S2C_PlayAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_PlayAnimation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_PlayAnimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_PlayAnimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_PlayAnimation::GetClassData() const { return &_class_data_; }


void S2C_PlayAnimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_PlayAnimation*>(&to_msg);
  auto& from = static_cast<const S2C_PlayAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_PlayAnimation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_PlayAnimation::CopyFrom(const S2C_PlayAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_PlayAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PlayAnimation::IsInitialized() const {
  return true;
}

void S2C_PlayAnimation::InternalSwap(S2C_PlayAnimation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_PlayAnimation, _impl_.type_)
      + sizeof(S2C_PlayAnimation::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(S2C_PlayAnimation, _impl_.remote_id_)>(
          reinterpret_cast<char*>(&_impl_.remote_id_),
          reinterpret_cast<char*>(&other->_impl_.remote_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_PlayAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[11]);
}

// ===================================================================

class S2C_DetectChangePlayer::_Internal {
 public:
};

void S2C_DetectChangePlayer::clear_stats() {
  _impl_.stats_.Clear();
}
S2C_DetectChangePlayer::S2C_DetectChangePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_DetectChangePlayer)
}
S2C_DetectChangePlayer::S2C_DetectChangePlayer(const S2C_DetectChangePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_DetectChangePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_DetectChangePlayer)
}

inline void S2C_DetectChangePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_DetectChangePlayer::~S2C_DetectChangePlayer() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_DetectChangePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_DetectChangePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void S2C_DetectChangePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_DetectChangePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_DetectChangePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_DetectChangePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.SStat stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_DetectChangePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_DetectChangePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // repeated .Protocol.SStat stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_DetectChangePlayer)
  return target;
}

size_t S2C_DetectChangePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_DetectChangePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.SStat stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_DetectChangePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_DetectChangePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_DetectChangePlayer::GetClassData() const { return &_class_data_; }


void S2C_DetectChangePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_DetectChangePlayer*>(&to_msg);
  auto& from = static_cast<const S2C_DetectChangePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_DetectChangePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_DetectChangePlayer::CopyFrom(const S2C_DetectChangePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_DetectChangePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DetectChangePlayer::IsInitialized() const {
  return true;
}

void S2C_DetectChangePlayer::InternalSwap(S2C_DetectChangePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_DetectChangePlayer, _impl_.timestamp_)
      + sizeof(S2C_DetectChangePlayer::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_DetectChangePlayer, _impl_.remote_id_)>(
          reinterpret_cast<char*>(&_impl_.remote_id_),
          reinterpret_cast<char*>(&other->_impl_.remote_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_DetectChangePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[12]);
}

// ===================================================================

class C2S_PlayerAutoAttack::_Internal {
 public:
};

C2S_PlayerAutoAttack::C2S_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_PlayerAutoAttack)
}
C2S_PlayerAutoAttack::C2S_PlayerAutoAttack(const C2S_PlayerAutoAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_PlayerAutoAttack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_id_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.object_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_PlayerAutoAttack)
}

inline void C2S_PlayerAutoAttack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.object_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_PlayerAutoAttack::~C2S_PlayerAutoAttack() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_PlayerAutoAttack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_PlayerAutoAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C2S_PlayerAutoAttack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_PlayerAutoAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_PlayerAutoAttack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.object_id_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_PlayerAutoAttack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_PlayerAutoAttack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_PlayerAutoAttack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_PlayerAutoAttack)
  return target;
}

size_t C2S_PlayerAutoAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_PlayerAutoAttack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_PlayerAutoAttack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_PlayerAutoAttack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_PlayerAutoAttack::GetClassData() const { return &_class_data_; }


void C2S_PlayerAutoAttack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_PlayerAutoAttack*>(&to_msg);
  auto& from = static_cast<const C2S_PlayerAutoAttack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_PlayerAutoAttack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_PlayerAutoAttack::CopyFrom(const C2S_PlayerAutoAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_PlayerAutoAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PlayerAutoAttack::IsInitialized() const {
  return true;
}

void C2S_PlayerAutoAttack::InternalSwap(C2S_PlayerAutoAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_PlayerAutoAttack, _impl_.object_id_)
      + sizeof(C2S_PlayerAutoAttack::_impl_.object_id_)
      - PROTOBUF_FIELD_OFFSET(C2S_PlayerAutoAttack, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_PlayerAutoAttack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[13]);
}

// ===================================================================

class S2C_PlayerAutoAttack::_Internal {
 public:
  static const ::Protocol::SVector& location(const S2C_PlayerAutoAttack* msg);
  static const ::Protocol::SRotator& rotation(const S2C_PlayerAutoAttack* msg);
};

const ::Protocol::SVector&
S2C_PlayerAutoAttack::_Internal::location(const S2C_PlayerAutoAttack* msg) {
  return *msg->_impl_.location_;
}
const ::Protocol::SRotator&
S2C_PlayerAutoAttack::_Internal::rotation(const S2C_PlayerAutoAttack* msg) {
  return *msg->_impl_.rotation_;
}
void S2C_PlayerAutoAttack::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
void S2C_PlayerAutoAttack::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
S2C_PlayerAutoAttack::S2C_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_PlayerAutoAttack)
}
S2C_PlayerAutoAttack::S2C_PlayerAutoAttack(const S2C_PlayerAutoAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_PlayerAutoAttack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.combo_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Protocol::SVector(*from._impl_.location_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::SRotator(*from._impl_.rotation_);
  }
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.combo_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.combo_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_PlayerAutoAttack)
}

inline void S2C_PlayerAutoAttack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.combo_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_PlayerAutoAttack::~S2C_PlayerAutoAttack() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_PlayerAutoAttack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_PlayerAutoAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S2C_PlayerAutoAttack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_PlayerAutoAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_PlayerAutoAttack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.combo_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.combo_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_PlayerAutoAttack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 combo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.combo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SRotator rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_PlayerAutoAttack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_PlayerAutoAttack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int32 combo = 2;
  if (this->_internal_combo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_combo(), target);
  }

  // .Protocol.SVector location = 3;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SRotator rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_PlayerAutoAttack)
  return target;
}

size_t S2C_PlayerAutoAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_PlayerAutoAttack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector location = 3;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // .Protocol.SRotator rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 combo = 2;
  if (this->_internal_combo() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_combo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_PlayerAutoAttack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_PlayerAutoAttack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_PlayerAutoAttack::GetClassData() const { return &_class_data_; }


void S2C_PlayerAutoAttack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_PlayerAutoAttack*>(&to_msg);
  auto& from = static_cast<const S2C_PlayerAutoAttack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_PlayerAutoAttack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Protocol::SVector::MergeFrom(
        from._internal_location());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::SRotator::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_combo() != 0) {
    _this->_internal_set_combo(from._internal_combo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_PlayerAutoAttack::CopyFrom(const S2C_PlayerAutoAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_PlayerAutoAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PlayerAutoAttack::IsInitialized() const {
  return true;
}

void S2C_PlayerAutoAttack::InternalSwap(S2C_PlayerAutoAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_PlayerAutoAttack, _impl_.combo_)
      + sizeof(S2C_PlayerAutoAttack::_impl_.combo_)
      - PROTOBUF_FIELD_OFFSET(S2C_PlayerAutoAttack, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_PlayerAutoAttack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[14]);
}

// ===================================================================

class S2C_UpdateExperience::_Internal {
 public:
};

S2C_UpdateExperience::S2C_UpdateExperience(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_UpdateExperience)
}
S2C_UpdateExperience::S2C_UpdateExperience(const S2C_UpdateExperience& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_UpdateExperience* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.experience_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.experience_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.experience_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_UpdateExperience)
}

inline void S2C_UpdateExperience::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.experience_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_UpdateExperience::~S2C_UpdateExperience() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_UpdateExperience)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_UpdateExperience::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_UpdateExperience::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_UpdateExperience::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_UpdateExperience)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.experience_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.experience_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_UpdateExperience::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 experience = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_UpdateExperience::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_UpdateExperience)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int32 experience = 2;
  if (this->_internal_experience() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_experience(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_UpdateExperience)
  return target;
}

size_t S2C_UpdateExperience::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_UpdateExperience)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 experience = 2;
  if (this->_internal_experience() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_experience());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_UpdateExperience::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_UpdateExperience::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_UpdateExperience::GetClassData() const { return &_class_data_; }


void S2C_UpdateExperience::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_UpdateExperience*>(&to_msg);
  auto& from = static_cast<const S2C_UpdateExperience&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_UpdateExperience)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_experience() != 0) {
    _this->_internal_set_experience(from._internal_experience());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_UpdateExperience::CopyFrom(const S2C_UpdateExperience& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_UpdateExperience)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_UpdateExperience::IsInitialized() const {
  return true;
}

void S2C_UpdateExperience::InternalSwap(S2C_UpdateExperience* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_UpdateExperience, _impl_.experience_)
      + sizeof(S2C_UpdateExperience::_impl_.experience_)
      - PROTOBUF_FIELD_OFFSET(S2C_UpdateExperience, _impl_.remote_id_)>(
          reinterpret_cast<char*>(&_impl_.remote_id_),
          reinterpret_cast<char*>(&other->_impl_.remote_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_UpdateExperience::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[15]);
}

// ===================================================================

class S2C_LevelUp::_Internal {
 public:
};

S2C_LevelUp::S2C_LevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_LevelUp)
}
S2C_LevelUp::S2C_LevelUp(const S2C_LevelUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_LevelUp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.experience_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_LevelUp)
}

inline void S2C_LevelUp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.experience_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_LevelUp::~S2C_LevelUp() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_LevelUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_LevelUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_LevelUp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_LevelUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_LevelUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LevelUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 experience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.experience_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_LevelUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_LevelUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 experience = 3;
  if (this->_internal_experience() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_experience(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_LevelUp)
  return target;
}

size_t S2C_LevelUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_LevelUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 experience = 3;
  if (this->_internal_experience() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_experience());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_LevelUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_LevelUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_LevelUp::GetClassData() const { return &_class_data_; }


void S2C_LevelUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_LevelUp*>(&to_msg);
  auto& from = static_cast<const S2C_LevelUp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_LevelUp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_experience() != 0) {
    _this->_internal_set_experience(from._internal_experience());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_LevelUp::CopyFrom(const S2C_LevelUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_LevelUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LevelUp::IsInitialized() const {
  return true;
}

void S2C_LevelUp::InternalSwap(S2C_LevelUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_LevelUp, _impl_.timestamp_)
      + sizeof(S2C_LevelUp::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_LevelUp, _impl_.remote_id_)>(
          reinterpret_cast<char*>(&_impl_.remote_id_),
          reinterpret_cast<char*>(&other->_impl_.remote_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LevelUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[16]);
}

// ===================================================================

class C2S_Chat::_Internal {
 public:
};

C2S_Chat::C2S_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_Chat)
}
C2S_Chat::C2S_Chat(const C2S_Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_Chat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_Chat)
}

inline void C2S_Chat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2S_Chat::~C2S_Chat() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void C2S_Chat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_message(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_Chat)
  return target;
}

size_t C2S_Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_Chat::GetClassData() const { return &_class_data_; }


void C2S_Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_Chat*>(&to_msg);
  auto& from = static_cast<const C2S_Chat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_Chat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_Chat::CopyFrom(const C2S_Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_Chat::IsInitialized() const {
  return true;
}

void C2S_Chat::InternalSwap(C2S_Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[17]);
}

// ===================================================================

class S2C_Chat::_Internal {
 public:
};

S2C_Chat::S2C_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_Chat)
}
S2C_Chat::S2C_Chat(const S2C_Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_Chat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.chat_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chat_type_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.chat_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_Chat)
}

inline void S2C_Chat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.chat_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S2C_Chat::~S2C_Chat() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_Chat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.message_.Destroy();
}

void S2C_Chat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_Chat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chat_type_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.chat_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_Chat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EChat chat_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_type(static_cast<::Protocol::EChat>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_Chat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_Chat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .Protocol.EChat chat_type = 4;
  if (this->_internal_chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_chat_type(), target);
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_Chat)
  return target;
}

size_t S2C_Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_Chat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bytes message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .Protocol.EChat chat_type = 4;
  if (this->_internal_chat_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_chat_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_Chat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_Chat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_Chat::GetClassData() const { return &_class_data_; }


void S2C_Chat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_Chat*>(&to_msg);
  auto& from = static_cast<const S2C_Chat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_Chat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_chat_type() != 0) {
    _this->_internal_set_chat_type(from._internal_chat_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_Chat::CopyFrom(const S2C_Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_Chat::IsInitialized() const {
  return true;
}

void S2C_Chat::InternalSwap(S2C_Chat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_Chat, _impl_.chat_type_)
      + sizeof(S2C_Chat::_impl_.chat_type_)
      - PROTOBUF_FIELD_OFFSET(S2C_Chat, _impl_.remote_id_)>(
          reinterpret_cast<char*>(&_impl_.remote_id_),
          reinterpret_cast<char*>(&other->_impl_.remote_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_Chat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[18]);
}

// ===================================================================

class C2S_LoadFriendList::_Internal {
 public:
};

C2S_LoadFriendList::C2S_LoadFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_LoadFriendList)
}
C2S_LoadFriendList::C2S_LoadFriendList(const C2S_LoadFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_LoadFriendList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.list_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.list_type_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.list_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_LoadFriendList)
}

inline void C2S_LoadFriendList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.list_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_LoadFriendList::~C2S_LoadFriendList() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_LoadFriendList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_LoadFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C2S_LoadFriendList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_LoadFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_LoadFriendList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.list_type_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.list_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_LoadFriendList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 list_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.list_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_LoadFriendList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_LoadFriendList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 list_type = 1;
  if (this->_internal_list_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_list_type(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_LoadFriendList)
  return target;
}

size_t C2S_LoadFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_LoadFriendList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 list_type = 1;
  if (this->_internal_list_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_list_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_LoadFriendList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_LoadFriendList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_LoadFriendList::GetClassData() const { return &_class_data_; }


void C2S_LoadFriendList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_LoadFriendList*>(&to_msg);
  auto& from = static_cast<const C2S_LoadFriendList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_LoadFriendList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_list_type() != 0) {
    _this->_internal_set_list_type(from._internal_list_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_LoadFriendList::CopyFrom(const C2S_LoadFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_LoadFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LoadFriendList::IsInitialized() const {
  return true;
}

void C2S_LoadFriendList::InternalSwap(C2S_LoadFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_LoadFriendList, _impl_.list_type_)
      + sizeof(C2S_LoadFriendList::_impl_.list_type_)
      - PROTOBUF_FIELD_OFFSET(C2S_LoadFriendList, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LoadFriendList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[19]);
}

// ===================================================================

class S2C_LoadFriendList::_Internal {
 public:
};

void S2C_LoadFriendList::clear_friends() {
  _impl_.friends_.Clear();
}
S2C_LoadFriendList::S2C_LoadFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_LoadFriendList)
}
S2C_LoadFriendList::S2C_LoadFriendList(const S2C_LoadFriendList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_LoadFriendList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friends_){from._impl_.friends_}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.list_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.list_type_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.list_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_LoadFriendList)
}

inline void S2C_LoadFriendList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friends_){arena}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.list_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_LoadFriendList::~S2C_LoadFriendList() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_LoadFriendList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_LoadFriendList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friends_.~RepeatedPtrField();
}

void S2C_LoadFriendList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_LoadFriendList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_LoadFriendList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friends_.Clear();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.list_type_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.list_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LoadFriendList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.SFriend friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friends(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 list_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.list_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_LoadFriendList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_LoadFriendList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.SFriend friends = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friends_size()); i < n; i++) {
    const auto& repfield = this->_internal_friends(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 list_type = 2;
  if (this->_internal_list_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_list_type(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_LoadFriendList)
  return target;
}

size_t S2C_LoadFriendList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_LoadFriendList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.SFriend friends = 1;
  total_size += 1UL * this->_internal_friends_size();
  for (const auto& msg : this->_impl_.friends_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 list_type = 2;
  if (this->_internal_list_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_list_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_LoadFriendList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_LoadFriendList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_LoadFriendList::GetClassData() const { return &_class_data_; }


void S2C_LoadFriendList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_LoadFriendList*>(&to_msg);
  auto& from = static_cast<const S2C_LoadFriendList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_LoadFriendList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friends_.MergeFrom(from._impl_.friends_);
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_list_type() != 0) {
    _this->_internal_set_list_type(from._internal_list_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_LoadFriendList::CopyFrom(const S2C_LoadFriendList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_LoadFriendList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LoadFriendList::IsInitialized() const {
  return true;
}

void S2C_LoadFriendList::InternalSwap(S2C_LoadFriendList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.friends_.InternalSwap(&other->_impl_.friends_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_LoadFriendList, _impl_.list_type_)
      + sizeof(S2C_LoadFriendList::_impl_.list_type_)
      - PROTOBUF_FIELD_OFFSET(S2C_LoadFriendList, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LoadFriendList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[20]);
}

// ===================================================================

class C2S_RequestFriend::_Internal {
 public:
};

C2S_RequestFriend::C2S_RequestFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_RequestFriend)
}
C2S_RequestFriend::C2S_RequestFriend(const C2S_RequestFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_RequestFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    _this->_impl_.nick_name_.Set(from._internal_nick_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_RequestFriend)
}

inline void C2S_RequestFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2S_RequestFriend::~C2S_RequestFriend() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_RequestFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_RequestFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_name_.Destroy();
}

void C2S_RequestFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_RequestFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_RequestFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_name_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_RequestFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nick_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_RequestFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_RequestFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nick_name(), target);
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_RequestFriend)
  return target;
}

size_t C2S_RequestFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_RequestFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick_name());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_RequestFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_RequestFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_RequestFriend::GetClassData() const { return &_class_data_; }


void C2S_RequestFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_RequestFriend*>(&to_msg);
  auto& from = static_cast<const C2S_RequestFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_RequestFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _this->_internal_set_nick_name(from._internal_nick_name());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_RequestFriend::CopyFrom(const C2S_RequestFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_RequestFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_RequestFriend::IsInitialized() const {
  return true;
}

void C2S_RequestFriend::InternalSwap(C2S_RequestFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_, lhs_arena,
      &other->_impl_.nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_RequestFriend, _impl_.action_)
      + sizeof(C2S_RequestFriend::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(C2S_RequestFriend, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_RequestFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[21]);
}

// ===================================================================

class S2C_RequestFriend::_Internal {
 public:
};

S2C_RequestFriend::S2C_RequestFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_RequestFriend)
}
S2C_RequestFriend::S2C_RequestFriend(const S2C_RequestFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_RequestFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_RequestFriend)
}

inline void S2C_RequestFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){0}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_RequestFriend::~S2C_RequestFriend() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_RequestFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_RequestFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_RequestFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_RequestFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_RequestFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_RequestFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_RequestFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_RequestFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_RequestFriend)
  return target;
}

size_t S2C_RequestFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_RequestFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_RequestFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_RequestFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_RequestFriend::GetClassData() const { return &_class_data_; }


void S2C_RequestFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_RequestFriend*>(&to_msg);
  auto& from = static_cast<const S2C_RequestFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_RequestFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_RequestFriend::CopyFrom(const S2C_RequestFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_RequestFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RequestFriend::IsInitialized() const {
  return true;
}

void S2C_RequestFriend::InternalSwap(S2C_RequestFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_RequestFriend, _impl_.timestamp_)
      + sizeof(S2C_RequestFriend::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_RequestFriend, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_RequestFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[22]);
}

// ===================================================================

class C2S_BlockFriend::_Internal {
 public:
};

C2S_BlockFriend::C2S_BlockFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_BlockFriend)
}
C2S_BlockFriend::C2S_BlockFriend(const C2S_BlockFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_BlockFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    _this->_impl_.nick_name_.Set(from._internal_nick_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.action_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_BlockFriend)
}

inline void C2S_BlockFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.action_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C2S_BlockFriend::~C2S_BlockFriend() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_BlockFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_BlockFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_name_.Destroy();
}

void C2S_BlockFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_BlockFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_BlockFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_name_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.action_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_BlockFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nick_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_BlockFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_BlockFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nick_name(), target);
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_BlockFriend)
  return target;
}

size_t C2S_BlockFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_BlockFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick_name());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_BlockFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_BlockFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_BlockFriend::GetClassData() const { return &_class_data_; }


void C2S_BlockFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_BlockFriend*>(&to_msg);
  auto& from = static_cast<const C2S_BlockFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_BlockFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _this->_internal_set_nick_name(from._internal_nick_name());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_BlockFriend::CopyFrom(const C2S_BlockFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_BlockFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_BlockFriend::IsInitialized() const {
  return true;
}

void C2S_BlockFriend::InternalSwap(C2S_BlockFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_, lhs_arena,
      &other->_impl_.nick_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_BlockFriend, _impl_.action_)
      + sizeof(C2S_BlockFriend::_impl_.action_)
      - PROTOBUF_FIELD_OFFSET(C2S_BlockFriend, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_BlockFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[23]);
}

// ===================================================================

class S2C_BlockFriend::_Internal {
 public:
};

S2C_BlockFriend::S2C_BlockFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_BlockFriend)
}
S2C_BlockFriend::S2C_BlockFriend(const S2C_BlockFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_BlockFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.action_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_BlockFriend)
}

inline void S2C_BlockFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){0}
    , decltype(_impl_.action_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_BlockFriend::~S2C_BlockFriend() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_BlockFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_BlockFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_BlockFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_BlockFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_BlockFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_BlockFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_BlockFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_BlockFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_action(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_BlockFriend)
  return target;
}

size_t S2C_BlockFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_BlockFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  // int32 action = 2;
  if (this->_internal_action() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_action());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_BlockFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_BlockFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_BlockFriend::GetClassData() const { return &_class_data_; }


void S2C_BlockFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_BlockFriend*>(&to_msg);
  auto& from = static_cast<const S2C_BlockFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_BlockFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_action() != 0) {
    _this->_internal_set_action(from._internal_action());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_BlockFriend::CopyFrom(const S2C_BlockFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_BlockFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_BlockFriend::IsInitialized() const {
  return true;
}

void S2C_BlockFriend::InternalSwap(S2C_BlockFriend* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_BlockFriend, _impl_.timestamp_)
      + sizeof(S2C_BlockFriend::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_BlockFriend, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_BlockFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[24]);
}

// ===================================================================

class S2C_ConnectFriend::_Internal {
 public:
};

S2C_ConnectFriend::S2C_ConnectFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_ConnectFriend)
}
S2C_ConnectFriend::S2C_ConnectFriend(const S2C_ConnectFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_ConnectFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    _this->_impl_.nick_name_.Set(from._internal_nick_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_ConnectFriend)
}

inline void S2C_ConnectFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S2C_ConnectFriend::~S2C_ConnectFriend() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_ConnectFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_ConnectFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_name_.Destroy();
}

void S2C_ConnectFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_ConnectFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_ConnectFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_name_.ClearToEmpty();
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_ConnectFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nick_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_ConnectFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_ConnectFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nick_name(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_ConnectFriend)
  return target;
}

size_t S2C_ConnectFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_ConnectFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick_name());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_ConnectFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_ConnectFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_ConnectFriend::GetClassData() const { return &_class_data_; }


void S2C_ConnectFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_ConnectFriend*>(&to_msg);
  auto& from = static_cast<const S2C_ConnectFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_ConnectFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _this->_internal_set_nick_name(from._internal_nick_name());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_ConnectFriend::CopyFrom(const S2C_ConnectFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_ConnectFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_ConnectFriend::IsInitialized() const {
  return true;
}

void S2C_ConnectFriend::InternalSwap(S2C_ConnectFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_, lhs_arena,
      &other->_impl_.nick_name_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_ConnectFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[25]);
}

// ===================================================================

class S2C_DisConnectFriend::_Internal {
 public:
};

S2C_DisConnectFriend::S2C_DisConnectFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_DisConnectFriend)
}
S2C_DisConnectFriend::S2C_DisConnectFriend(const S2C_DisConnectFriend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_DisConnectFriend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nick_name().empty()) {
    _this->_impl_.nick_name_.Set(from._internal_nick_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_DisConnectFriend)
}

inline void S2C_DisConnectFriend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nick_name_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nick_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S2C_DisConnectFriend::~S2C_DisConnectFriend() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_DisConnectFriend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_DisConnectFriend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nick_name_.Destroy();
}

void S2C_DisConnectFriend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_DisConnectFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_DisConnectFriend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nick_name_.ClearToEmpty();
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_DisConnectFriend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes nick_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nick_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_DisConnectFriend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_DisConnectFriend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nick_name(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_DisConnectFriend)
  return target;
}

size_t S2C_DisConnectFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_DisConnectFriend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nick_name = 1;
  if (!this->_internal_nick_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nick_name());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_DisConnectFriend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_DisConnectFriend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_DisConnectFriend::GetClassData() const { return &_class_data_; }


void S2C_DisConnectFriend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_DisConnectFriend*>(&to_msg);
  auto& from = static_cast<const S2C_DisConnectFriend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_DisConnectFriend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nick_name().empty()) {
    _this->_internal_set_nick_name(from._internal_nick_name());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_DisConnectFriend::CopyFrom(const S2C_DisConnectFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_DisConnectFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DisConnectFriend::IsInitialized() const {
  return true;
}

void S2C_DisConnectFriend::InternalSwap(S2C_DisConnectFriend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nick_name_, lhs_arena,
      &other->_impl_.nick_name_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_DisConnectFriend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[26]);
}

// ===================================================================

class S2C_AppearItem::_Internal {
 public:
  static const ::Protocol::SItem& item(const S2C_AppearItem* msg);
};

const ::Protocol::SItem&
S2C_AppearItem::_Internal::item(const S2C_AppearItem* msg) {
  return *msg->_impl_.item_;
}
void S2C_AppearItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
S2C_AppearItem::S2C_AppearItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_AppearItem)
}
S2C_AppearItem::S2C_AppearItem(const S2C_AppearItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_AppearItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::SItem(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AppearItem)
}

inline void S2C_AppearItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_AppearItem::~S2C_AppearItem() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AppearItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_AppearItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void S2C_AppearItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_AppearItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AppearItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_AppearItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.SItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_AppearItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AppearItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.SItem item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AppearItem)
  return target;
}

size_t S2C_AppearItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AppearItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SItem item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_AppearItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_AppearItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_AppearItem::GetClassData() const { return &_class_data_; }


void S2C_AppearItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_AppearItem*>(&to_msg);
  auto& from = static_cast<const S2C_AppearItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AppearItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::SItem::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_AppearItem::CopyFrom(const S2C_AppearItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AppearItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AppearItem::IsInitialized() const {
  return true;
}

void S2C_AppearItem::InternalSwap(S2C_AppearItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AppearItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[27]);
}

// ===================================================================

class S2C_AppearArrow::_Internal {
 public:
  static const ::Protocol::SVector& location(const S2C_AppearArrow* msg);
  static const ::Protocol::SRotator& rotation(const S2C_AppearArrow* msg);
};

const ::Protocol::SVector&
S2C_AppearArrow::_Internal::location(const S2C_AppearArrow* msg) {
  return *msg->_impl_.location_;
}
const ::Protocol::SRotator&
S2C_AppearArrow::_Internal::rotation(const S2C_AppearArrow* msg) {
  return *msg->_impl_.rotation_;
}
void S2C_AppearArrow::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
void S2C_AppearArrow::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
S2C_AppearArrow::S2C_AppearArrow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_AppearArrow)
}
S2C_AppearArrow::S2C_AppearArrow(const S2C_AppearArrow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_AppearArrow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Protocol::SVector(*from._impl_.location_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::SRotator(*from._impl_.rotation_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AppearArrow)
}

inline void S2C_AppearArrow::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_AppearArrow::~S2C_AppearArrow() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AppearArrow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_AppearArrow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S2C_AppearArrow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_AppearArrow::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AppearArrow)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_AppearArrow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SRotator rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_AppearArrow::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AppearArrow)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.SVector location = 2;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SRotator rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AppearArrow)
  return target;
}

size_t S2C_AppearArrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AppearArrow)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector location = 2;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // .Protocol.SRotator rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_AppearArrow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_AppearArrow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_AppearArrow::GetClassData() const { return &_class_data_; }


void S2C_AppearArrow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_AppearArrow*>(&to_msg);
  auto& from = static_cast<const S2C_AppearArrow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AppearArrow)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Protocol::SVector::MergeFrom(
        from._internal_location());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::SRotator::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_AppearArrow::CopyFrom(const S2C_AppearArrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AppearArrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AppearArrow::IsInitialized() const {
  return true;
}

void S2C_AppearArrow::InternalSwap(S2C_AppearArrow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_AppearArrow, _impl_.timestamp_)
      + sizeof(S2C_AppearArrow::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_AppearArrow, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AppearArrow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[28]);
}

// ===================================================================

class S2C_MovementProjectile::_Internal {
 public:
  static const ::Protocol::SVector& location(const S2C_MovementProjectile* msg);
};

const ::Protocol::SVector&
S2C_MovementProjectile::_Internal::location(const S2C_MovementProjectile* msg) {
  return *msg->_impl_.location_;
}
void S2C_MovementProjectile::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
S2C_MovementProjectile::S2C_MovementProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_MovementProjectile)
}
S2C_MovementProjectile::S2C_MovementProjectile(const S2C_MovementProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_MovementProjectile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Protocol::SVector(*from._impl_.location_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_MovementProjectile)
}

inline void S2C_MovementProjectile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.location_){nullptr}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_MovementProjectile::~S2C_MovementProjectile() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_MovementProjectile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_MovementProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void S2C_MovementProjectile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_MovementProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_MovementProjectile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_MovementProjectile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_MovementProjectile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_MovementProjectile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.SVector location = 2;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_MovementProjectile)
  return target;
}

size_t S2C_MovementProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_MovementProjectile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector location = 2;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_MovementProjectile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_MovementProjectile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_MovementProjectile::GetClassData() const { return &_class_data_; }


void S2C_MovementProjectile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_MovementProjectile*>(&to_msg);
  auto& from = static_cast<const S2C_MovementProjectile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_MovementProjectile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Protocol::SVector::MergeFrom(
        from._internal_location());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_MovementProjectile::CopyFrom(const S2C_MovementProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_MovementProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_MovementProjectile::IsInitialized() const {
  return true;
}

void S2C_MovementProjectile::InternalSwap(S2C_MovementProjectile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_MovementProjectile, _impl_.timestamp_)
      + sizeof(S2C_MovementProjectile::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_MovementProjectile, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_MovementProjectile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[29]);
}

// ===================================================================

class S2C_AppearEnemy::_Internal {
 public:
  static const ::Protocol::SVector& cur_location(const S2C_AppearEnemy* msg);
  static const ::Protocol::SVector& move_location(const S2C_AppearEnemy* msg);
};

const ::Protocol::SVector&
S2C_AppearEnemy::_Internal::cur_location(const S2C_AppearEnemy* msg) {
  return *msg->_impl_.cur_location_;
}
const ::Protocol::SVector&
S2C_AppearEnemy::_Internal::move_location(const S2C_AppearEnemy* msg) {
  return *msg->_impl_.move_location_;
}
void S2C_AppearEnemy::clear_stats() {
  _impl_.stats_.Clear();
}
void S2C_AppearEnemy::clear_cur_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
}
void S2C_AppearEnemy::clear_move_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
}
S2C_AppearEnemy::S2C_AppearEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_AppearEnemy)
}
S2C_AppearEnemy::S2C_AppearEnemy(const S2C_AppearEnemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_AppearEnemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.enemy_id_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_location()) {
    _this->_impl_.cur_location_ = new ::Protocol::SVector(*from._impl_.cur_location_);
  }
  if (from._internal_has_move_location()) {
    _this->_impl_.move_location_ = new ::Protocol::SVector(*from._impl_.move_location_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_AppearEnemy)
}

inline void S2C_AppearEnemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.enemy_id_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_AppearEnemy::~S2C_AppearEnemy() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_AppearEnemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_AppearEnemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.cur_location_;
  if (this != internal_default_instance()) delete _impl_.move_location_;
}

void S2C_AppearEnemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_AppearEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_AppearEnemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_AppearEnemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 enemy_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enemy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EEnemyState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::EEnemyState>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.SStat stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector cur_location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector move_location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_AppearEnemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_AppearEnemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int32 enemy_id = 2;
  if (this->_internal_enemy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_enemy_id(), target);
  }

  // .Protocol.EEnemyState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // repeated .Protocol.SStat stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Protocol.SVector cur_location = 5;
  if (this->_internal_has_cur_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cur_location(this),
        _Internal::cur_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector move_location = 6;
  if (this->_internal_has_move_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::move_location(this),
        _Internal::move_location(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_AppearEnemy)
  return target;
}

size_t S2C_AppearEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_AppearEnemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.SStat stats = 4;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.SVector cur_location = 5;
  if (this->_internal_has_cur_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_location_);
  }

  // .Protocol.SVector move_location = 6;
  if (this->_internal_has_move_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_location_);
  }

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int32 enemy_id = 2;
  if (this->_internal_enemy_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enemy_id());
  }

  // .Protocol.EEnemyState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int64 timestamp = 7;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_AppearEnemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_AppearEnemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_AppearEnemy::GetClassData() const { return &_class_data_; }


void S2C_AppearEnemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_AppearEnemy*>(&to_msg);
  auto& from = static_cast<const S2C_AppearEnemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_AppearEnemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_cur_location()) {
    _this->_internal_mutable_cur_location()->::Protocol::SVector::MergeFrom(
        from._internal_cur_location());
  }
  if (from._internal_has_move_location()) {
    _this->_internal_mutable_move_location()->::Protocol::SVector::MergeFrom(
        from._internal_move_location());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_enemy_id() != 0) {
    _this->_internal_set_enemy_id(from._internal_enemy_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_AppearEnemy::CopyFrom(const S2C_AppearEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_AppearEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_AppearEnemy::IsInitialized() const {
  return true;
}

void S2C_AppearEnemy::InternalSwap(S2C_AppearEnemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_AppearEnemy, _impl_.timestamp_)
      + sizeof(S2C_AppearEnemy::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_AppearEnemy, _impl_.cur_location_)>(
          reinterpret_cast<char*>(&_impl_.cur_location_),
          reinterpret_cast<char*>(&other->_impl_.cur_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_AppearEnemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[30]);
}

// ===================================================================

class S2C_DetectChangeEnemy::_Internal {
 public:
};

void S2C_DetectChangeEnemy::clear_stats() {
  _impl_.stats_.Clear();
}
S2C_DetectChangeEnemy::S2C_DetectChangeEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_DetectChangeEnemy)
}
S2C_DetectChangeEnemy::S2C_DetectChangeEnemy(const S2C_DetectChangeEnemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_DetectChangeEnemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_DetectChangeEnemy)
}

inline void S2C_DetectChangeEnemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_DetectChangeEnemy::~S2C_DetectChangeEnemy() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_DetectChangeEnemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_DetectChangeEnemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void S2C_DetectChangeEnemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_DetectChangeEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_DetectChangeEnemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_DetectChangeEnemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.SStat stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.EEnemyState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::EEnemyState>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_DetectChangeEnemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_DetectChangeEnemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // repeated .Protocol.SStat stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Protocol.EEnemyState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_DetectChangeEnemy)
  return target;
}

size_t S2C_DetectChangeEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_DetectChangeEnemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.SStat stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .Protocol.EEnemyState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_DetectChangeEnemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_DetectChangeEnemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_DetectChangeEnemy::GetClassData() const { return &_class_data_; }


void S2C_DetectChangeEnemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_DetectChangeEnemy*>(&to_msg);
  auto& from = static_cast<const S2C_DetectChangeEnemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_DetectChangeEnemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_DetectChangeEnemy::CopyFrom(const S2C_DetectChangeEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_DetectChangeEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DetectChangeEnemy::IsInitialized() const {
  return true;
}

void S2C_DetectChangeEnemy::InternalSwap(S2C_DetectChangeEnemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_DetectChangeEnemy, _impl_.state_)
      + sizeof(S2C_DetectChangeEnemy::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(S2C_DetectChangeEnemy, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_DetectChangeEnemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[31]);
}

// ===================================================================

class S2C_MovementEnemy::_Internal {
 public:
  static const ::Protocol::SVector& cur_location(const S2C_MovementEnemy* msg);
  static const ::Protocol::SVector& move_location(const S2C_MovementEnemy* msg);
};

const ::Protocol::SVector&
S2C_MovementEnemy::_Internal::cur_location(const S2C_MovementEnemy* msg) {
  return *msg->_impl_.cur_location_;
}
const ::Protocol::SVector&
S2C_MovementEnemy::_Internal::move_location(const S2C_MovementEnemy* msg) {
  return *msg->_impl_.move_location_;
}
void S2C_MovementEnemy::clear_cur_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
}
void S2C_MovementEnemy::clear_move_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
}
S2C_MovementEnemy::S2C_MovementEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_MovementEnemy)
}
S2C_MovementEnemy::S2C_MovementEnemy(const S2C_MovementEnemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_MovementEnemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cur_location()) {
    _this->_impl_.cur_location_ = new ::Protocol::SVector(*from._impl_.cur_location_);
  }
  if (from._internal_has_move_location()) {
    _this->_impl_.move_location_ = new ::Protocol::SVector(*from._impl_.move_location_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_MovementEnemy)
}

inline void S2C_MovementEnemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cur_location_){nullptr}
    , decltype(_impl_.move_location_){nullptr}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_MovementEnemy::~S2C_MovementEnemy() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_MovementEnemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_MovementEnemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cur_location_;
  if (this != internal_default_instance()) delete _impl_.move_location_;
}

void S2C_MovementEnemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_MovementEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_MovementEnemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.cur_location_ != nullptr) {
    delete _impl_.cur_location_;
  }
  _impl_.cur_location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.move_location_ != nullptr) {
    delete _impl_.move_location_;
  }
  _impl_.move_location_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_MovementEnemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector cur_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cur_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector move_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_move_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_MovementEnemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_MovementEnemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.SVector cur_location = 2;
  if (this->_internal_has_cur_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cur_location(this),
        _Internal::cur_location(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector move_location = 3;
  if (this->_internal_has_move_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::move_location(this),
        _Internal::move_location(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_MovementEnemy)
  return target;
}

size_t S2C_MovementEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_MovementEnemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SVector cur_location = 2;
  if (this->_internal_has_cur_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cur_location_);
  }

  // .Protocol.SVector move_location = 3;
  if (this->_internal_has_move_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.move_location_);
  }

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_MovementEnemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_MovementEnemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_MovementEnemy::GetClassData() const { return &_class_data_; }


void S2C_MovementEnemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_MovementEnemy*>(&to_msg);
  auto& from = static_cast<const S2C_MovementEnemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_MovementEnemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cur_location()) {
    _this->_internal_mutable_cur_location()->::Protocol::SVector::MergeFrom(
        from._internal_cur_location());
  }
  if (from._internal_has_move_location()) {
    _this->_internal_mutable_move_location()->::Protocol::SVector::MergeFrom(
        from._internal_move_location());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_MovementEnemy::CopyFrom(const S2C_MovementEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_MovementEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_MovementEnemy::IsInitialized() const {
  return true;
}

void S2C_MovementEnemy::InternalSwap(S2C_MovementEnemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_MovementEnemy, _impl_.timestamp_)
      + sizeof(S2C_MovementEnemy::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_MovementEnemy, _impl_.cur_location_)>(
          reinterpret_cast<char*>(&_impl_.cur_location_),
          reinterpret_cast<char*>(&other->_impl_.cur_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_MovementEnemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[32]);
}

// ===================================================================

class S2C_EnemyAutoAttack::_Internal {
 public:
  static const ::Protocol::SRotator& rotation(const S2C_EnemyAutoAttack* msg);
};

const ::Protocol::SRotator&
S2C_EnemyAutoAttack::_Internal::rotation(const S2C_EnemyAutoAttack* msg) {
  return *msg->_impl_.rotation_;
}
void S2C_EnemyAutoAttack::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
S2C_EnemyAutoAttack::S2C_EnemyAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_EnemyAutoAttack)
}
S2C_EnemyAutoAttack::S2C_EnemyAutoAttack(const S2C_EnemyAutoAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_EnemyAutoAttack* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::SRotator(*from._impl_.rotation_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_EnemyAutoAttack)
}

inline void S2C_EnemyAutoAttack::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_EnemyAutoAttack::~S2C_EnemyAutoAttack() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_EnemyAutoAttack)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_EnemyAutoAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S2C_EnemyAutoAttack::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_EnemyAutoAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_EnemyAutoAttack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_EnemyAutoAttack::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SRotator rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_EnemyAutoAttack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_EnemyAutoAttack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.SRotator rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_EnemyAutoAttack)
  return target;
}

size_t S2C_EnemyAutoAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_EnemyAutoAttack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SRotator rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_EnemyAutoAttack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_EnemyAutoAttack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_EnemyAutoAttack::GetClassData() const { return &_class_data_; }


void S2C_EnemyAutoAttack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_EnemyAutoAttack*>(&to_msg);
  auto& from = static_cast<const S2C_EnemyAutoAttack&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_EnemyAutoAttack)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::SRotator::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_EnemyAutoAttack::CopyFrom(const S2C_EnemyAutoAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_EnemyAutoAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_EnemyAutoAttack::IsInitialized() const {
  return true;
}

void S2C_EnemyAutoAttack::InternalSwap(S2C_EnemyAutoAttack* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_EnemyAutoAttack, _impl_.timestamp_)
      + sizeof(S2C_EnemyAutoAttack::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_EnemyAutoAttack, _impl_.rotation_)>(
          reinterpret_cast<char*>(&_impl_.rotation_),
          reinterpret_cast<char*>(&other->_impl_.rotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_EnemyAutoAttack::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[33]);
}

// ===================================================================

class S2C_HitEnemy::_Internal {
 public:
};

S2C_HitEnemy::S2C_HitEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_HitEnemy)
}
S2C_HitEnemy::S2C_HitEnemy(const S2C_HitEnemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_HitEnemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_HitEnemy)
}

inline void S2C_HitEnemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_HitEnemy::~S2C_HitEnemy() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_HitEnemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_HitEnemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_HitEnemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_HitEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_HitEnemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_HitEnemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_HitEnemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_HitEnemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_HitEnemy)
  return target;
}

size_t S2C_HitEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_HitEnemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_HitEnemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_HitEnemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_HitEnemy::GetClassData() const { return &_class_data_; }


void S2C_HitEnemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_HitEnemy*>(&to_msg);
  auto& from = static_cast<const S2C_HitEnemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_HitEnemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_HitEnemy::CopyFrom(const S2C_HitEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_HitEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_HitEnemy::IsInitialized() const {
  return true;
}

void S2C_HitEnemy::InternalSwap(S2C_HitEnemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_HitEnemy, _impl_.timestamp_)
      + sizeof(S2C_HitEnemy::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_HitEnemy, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_HitEnemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[34]);
}

// ===================================================================

class S2C_DeathEnemy::_Internal {
 public:
};

S2C_DeathEnemy::S2C_DeathEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_DeathEnemy)
}
S2C_DeathEnemy::S2C_DeathEnemy(const S2C_DeathEnemy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_DeathEnemy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_DeathEnemy)
}

inline void S2C_DeathEnemy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_DeathEnemy::~S2C_DeathEnemy() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_DeathEnemy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_DeathEnemy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_DeathEnemy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_DeathEnemy::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_DeathEnemy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_DeathEnemy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_DeathEnemy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_DeathEnemy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_DeathEnemy)
  return target;
}

size_t S2C_DeathEnemy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_DeathEnemy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_DeathEnemy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_DeathEnemy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_DeathEnemy::GetClassData() const { return &_class_data_; }


void S2C_DeathEnemy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_DeathEnemy*>(&to_msg);
  auto& from = static_cast<const S2C_DeathEnemy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_DeathEnemy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_DeathEnemy::CopyFrom(const S2C_DeathEnemy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_DeathEnemy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DeathEnemy::IsInitialized() const {
  return true;
}

void S2C_DeathEnemy::InternalSwap(S2C_DeathEnemy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_DeathEnemy, _impl_.timestamp_)
      + sizeof(S2C_DeathEnemy::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S2C_DeathEnemy, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_DeathEnemy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[35]);
}

// ===================================================================

class S2C_DisAppearGameObject::_Internal {
 public:
};

S2C_DisAppearGameObject::S2C_DisAppearGameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_DisAppearGameObject)
}
S2C_DisAppearGameObject::S2C_DisAppearGameObject(const S2C_DisAppearGameObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_DisAppearGameObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_DisAppearGameObject)
}

inline void S2C_DisAppearGameObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_DisAppearGameObject::~S2C_DisAppearGameObject() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_DisAppearGameObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_DisAppearGameObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_DisAppearGameObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_DisAppearGameObject::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_DisAppearGameObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_DisAppearGameObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_DisAppearGameObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_DisAppearGameObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_DisAppearGameObject)
  return target;
}

size_t S2C_DisAppearGameObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_DisAppearGameObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_DisAppearGameObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_DisAppearGameObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_DisAppearGameObject::GetClassData() const { return &_class_data_; }


void S2C_DisAppearGameObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_DisAppearGameObject*>(&to_msg);
  auto& from = static_cast<const S2C_DisAppearGameObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_DisAppearGameObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_DisAppearGameObject::CopyFrom(const S2C_DisAppearGameObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_DisAppearGameObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DisAppearGameObject::IsInitialized() const {
  return true;
}

void S2C_DisAppearGameObject::InternalSwap(S2C_DisAppearGameObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_DisAppearGameObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[36]);
}

// ===================================================================

class C2S_LoadInventory::_Internal {
 public:
};

C2S_LoadInventory::C2S_LoadInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_LoadInventory)
}
C2S_LoadInventory::C2S_LoadInventory(const C2S_LoadInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_LoadInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_LoadInventory)
}

inline void C2S_LoadInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_LoadInventory::~C2S_LoadInventory() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_LoadInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_LoadInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C2S_LoadInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_LoadInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_LoadInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_LoadInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_LoadInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_LoadInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_LoadInventory)
  return target;
}

size_t C2S_LoadInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_LoadInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_LoadInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_LoadInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_LoadInventory::GetClassData() const { return &_class_data_; }


void C2S_LoadInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_LoadInventory*>(&to_msg);
  auto& from = static_cast<const C2S_LoadInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_LoadInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_LoadInventory::CopyFrom(const C2S_LoadInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_LoadInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_LoadInventory::IsInitialized() const {
  return true;
}

void C2S_LoadInventory::InternalSwap(C2S_LoadInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_LoadInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[37]);
}

// ===================================================================

class S2C_LoadInventory::_Internal {
 public:
};

void S2C_LoadInventory::clear_item() {
  _impl_.item_.Clear();
}
void S2C_LoadInventory::clear_eqipment() {
  _impl_.eqipment_.Clear();
}
S2C_LoadInventory::S2C_LoadInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_LoadInventory)
}
S2C_LoadInventory::S2C_LoadInventory(const S2C_LoadInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_LoadInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){from._impl_.item_}
    , decltype(_impl_.eqipment_){from._impl_.eqipment_}
    , decltype(_impl_.money_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.money_, &from._impl_.money_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.money_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_LoadInventory)
}

inline void S2C_LoadInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){arena}
    , decltype(_impl_.eqipment_){arena}
    , decltype(_impl_.money_){0}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_LoadInventory::~S2C_LoadInventory() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_LoadInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_LoadInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_.~RepeatedPtrField();
  _impl_.eqipment_.~RepeatedPtrField();
}

void S2C_LoadInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_LoadInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_LoadInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_.Clear();
  _impl_.eqipment_.Clear();
  ::memset(&_impl_.money_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.money_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_LoadInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.SItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.SItem eqipment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eqipment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 money = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_LoadInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_LoadInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.SItem item = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_size()); i < n; i++) {
    const auto& repfield = this->_internal_item(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protocol.SItem eqipment = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_eqipment_size()); i < n; i++) {
    const auto& repfield = this->_internal_eqipment(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 money = 3;
  if (this->_internal_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_money(), target);
  }

  // int32 error = 4;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_LoadInventory)
  return target;
}

size_t S2C_LoadInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_LoadInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.SItem item = 1;
  total_size += 1UL * this->_internal_item_size();
  for (const auto& msg : this->_impl_.item_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.SItem eqipment = 2;
  total_size += 1UL * this->_internal_eqipment_size();
  for (const auto& msg : this->_impl_.eqipment_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 money = 3;
  if (this->_internal_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_money());
  }

  // int32 error = 4;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_LoadInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_LoadInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_LoadInventory::GetClassData() const { return &_class_data_; }


void S2C_LoadInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_LoadInventory*>(&to_msg);
  auto& from = static_cast<const S2C_LoadInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_LoadInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_.MergeFrom(from._impl_.item_);
  _this->_impl_.eqipment_.MergeFrom(from._impl_.eqipment_);
  if (from._internal_money() != 0) {
    _this->_internal_set_money(from._internal_money());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_LoadInventory::CopyFrom(const S2C_LoadInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_LoadInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_LoadInventory::IsInitialized() const {
  return true;
}

void S2C_LoadInventory::InternalSwap(S2C_LoadInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.item_.InternalSwap(&other->_impl_.item_);
  _impl_.eqipment_.InternalSwap(&other->_impl_.eqipment_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_LoadInventory, _impl_.error_)
      + sizeof(S2C_LoadInventory::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(S2C_LoadInventory, _impl_.money_)>(
          reinterpret_cast<char*>(&_impl_.money_),
          reinterpret_cast<char*>(&other->_impl_.money_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_LoadInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[38]);
}

// ===================================================================

class C2S_InsertInventory::_Internal {
 public:
  static const ::Protocol::SItem& item(const C2S_InsertInventory* msg);
};

const ::Protocol::SItem&
C2S_InsertInventory::_Internal::item(const C2S_InsertInventory* msg) {
  return *msg->_impl_.item_;
}
void C2S_InsertInventory::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
C2S_InsertInventory::C2S_InsertInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_InsertInventory)
}
C2S_InsertInventory::C2S_InsertInventory(const C2S_InsertInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_InsertInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::SItem(*from._impl_.item_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_InsertInventory)
}

inline void C2S_InsertInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_InsertInventory::~C2S_InsertInventory() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_InsertInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_InsertInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void C2S_InsertInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_InsertInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_InsertInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_InsertInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_InsertInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_InsertInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_InsertInventory)
  return target;
}

size_t C2S_InsertInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_InsertInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_InsertInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_InsertInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_InsertInventory::GetClassData() const { return &_class_data_; }


void C2S_InsertInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_InsertInventory*>(&to_msg);
  auto& from = static_cast<const C2S_InsertInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_InsertInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::SItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_InsertInventory::CopyFrom(const C2S_InsertInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_InsertInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_InsertInventory::IsInitialized() const {
  return true;
}

void C2S_InsertInventory::InternalSwap(C2S_InsertInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_InsertInventory, _impl_.timestamp_)
      + sizeof(C2S_InsertInventory::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(C2S_InsertInventory, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_InsertInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[39]);
}

// ===================================================================

class S2C_InsertInventory::_Internal {
 public:
};

S2C_InsertInventory::S2C_InsertInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_InsertInventory)
}
S2C_InsertInventory::S2C_InsertInventory(const S2C_InsertInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_InsertInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_InsertInventory)
}

inline void S2C_InsertInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_InsertInventory::~S2C_InsertInventory() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_InsertInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_InsertInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_InsertInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_InsertInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_InsertInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_InsertInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_InsertInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_InsertInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // int64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_object_id(), target);
  }

  // int32 error = 3;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_InsertInventory)
  return target;
}

size_t S2C_InsertInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_InsertInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int32 error = 3;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_InsertInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_InsertInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_InsertInventory::GetClassData() const { return &_class_data_; }


void S2C_InsertInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_InsertInventory*>(&to_msg);
  auto& from = static_cast<const S2C_InsertInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_InsertInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_InsertInventory::CopyFrom(const S2C_InsertInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_InsertInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_InsertInventory::IsInitialized() const {
  return true;
}

void S2C_InsertInventory::InternalSwap(S2C_InsertInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_InsertInventory, _impl_.error_)
      + sizeof(S2C_InsertInventory::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(S2C_InsertInventory, _impl_.remote_id_)>(
          reinterpret_cast<char*>(&_impl_.remote_id_),
          reinterpret_cast<char*>(&other->_impl_.remote_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_InsertInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[40]);
}

// ===================================================================

class C2S_UpdateInventory::_Internal {
 public:
  static const ::Protocol::SItem& item(const C2S_UpdateInventory* msg);
};

const ::Protocol::SItem&
C2S_UpdateInventory::_Internal::item(const C2S_UpdateInventory* msg) {
  return *msg->_impl_.item_;
}
void C2S_UpdateInventory::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
C2S_UpdateInventory::C2S_UpdateInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_UpdateInventory)
}
C2S_UpdateInventory::C2S_UpdateInventory(const C2S_UpdateInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_UpdateInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::SItem(*from._impl_.item_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_UpdateInventory)
}

inline void C2S_UpdateInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_UpdateInventory::~C2S_UpdateInventory() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_UpdateInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_UpdateInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void C2S_UpdateInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_UpdateInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_UpdateInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_UpdateInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_UpdateInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_UpdateInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_UpdateInventory)
  return target;
}

size_t C2S_UpdateInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_UpdateInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_UpdateInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_UpdateInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_UpdateInventory::GetClassData() const { return &_class_data_; }


void C2S_UpdateInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_UpdateInventory*>(&to_msg);
  auto& from = static_cast<const C2S_UpdateInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_UpdateInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::SItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_UpdateInventory::CopyFrom(const C2S_UpdateInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_UpdateInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_UpdateInventory::IsInitialized() const {
  return true;
}

void C2S_UpdateInventory::InternalSwap(C2S_UpdateInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_UpdateInventory, _impl_.timestamp_)
      + sizeof(C2S_UpdateInventory::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(C2S_UpdateInventory, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_UpdateInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[41]);
}

// ===================================================================

class S2C_UpdateInventory::_Internal {
 public:
};

S2C_UpdateInventory::S2C_UpdateInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_UpdateInventory)
}
S2C_UpdateInventory::S2C_UpdateInventory(const S2C_UpdateInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_UpdateInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.error_ = from._impl_.error_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_UpdateInventory)
}

inline void S2C_UpdateInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_UpdateInventory::~S2C_UpdateInventory() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_UpdateInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_UpdateInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S2C_UpdateInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_UpdateInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_UpdateInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_UpdateInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_UpdateInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_UpdateInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_UpdateInventory)
  return target;
}

size_t S2C_UpdateInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_UpdateInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 error = 1;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_UpdateInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_UpdateInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_UpdateInventory::GetClassData() const { return &_class_data_; }


void S2C_UpdateInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_UpdateInventory*>(&to_msg);
  auto& from = static_cast<const S2C_UpdateInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_UpdateInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_UpdateInventory::CopyFrom(const S2C_UpdateInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_UpdateInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_UpdateInventory::IsInitialized() const {
  return true;
}

void S2C_UpdateInventory::InternalSwap(S2C_UpdateInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.error_, other->_impl_.error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_UpdateInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[42]);
}

// ===================================================================

class C2S_DeleteInventory::_Internal {
 public:
  static const ::Protocol::SItem& item(const C2S_DeleteInventory* msg);
  static const ::Protocol::SVector& location(const C2S_DeleteInventory* msg);
};

const ::Protocol::SItem&
C2S_DeleteInventory::_Internal::item(const C2S_DeleteInventory* msg) {
  return *msg->_impl_.item_;
}
const ::Protocol::SVector&
C2S_DeleteInventory::_Internal::location(const C2S_DeleteInventory* msg) {
  return *msg->_impl_.location_;
}
void C2S_DeleteInventory::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
void C2S_DeleteInventory::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
C2S_DeleteInventory::C2S_DeleteInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_DeleteInventory)
}
C2S_DeleteInventory::C2S_DeleteInventory(const C2S_DeleteInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_DeleteInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::SItem(*from._impl_.item_);
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Protocol::SVector(*from._impl_.location_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_DeleteInventory)
}

inline void C2S_DeleteInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_DeleteInventory::~C2S_DeleteInventory() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_DeleteInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_DeleteInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
  if (this != internal_default_instance()) delete _impl_.location_;
}

void C2S_DeleteInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_DeleteInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_DeleteInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_DeleteInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SVector location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_DeleteInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_DeleteInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SVector location = 3;
  if (this->_internal_has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_DeleteInventory)
  return target;
}

size_t C2S_DeleteInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_DeleteInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // .Protocol.SVector location = 3;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_DeleteInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_DeleteInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_DeleteInventory::GetClassData() const { return &_class_data_; }


void C2S_DeleteInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_DeleteInventory*>(&to_msg);
  auto& from = static_cast<const C2S_DeleteInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_DeleteInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::SItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_has_location()) {
    _this->_internal_mutable_location()->::Protocol::SVector::MergeFrom(
        from._internal_location());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_DeleteInventory::CopyFrom(const C2S_DeleteInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_DeleteInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_DeleteInventory::IsInitialized() const {
  return true;
}

void C2S_DeleteInventory::InternalSwap(C2S_DeleteInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_DeleteInventory, _impl_.timestamp_)
      + sizeof(C2S_DeleteInventory::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(C2S_DeleteInventory, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_DeleteInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[43]);
}

// ===================================================================

class S2C_DeleteInventory::_Internal {
 public:
  static const ::Protocol::SItem& item(const S2C_DeleteInventory* msg);
};

const ::Protocol::SItem&
S2C_DeleteInventory::_Internal::item(const S2C_DeleteInventory* msg) {
  return *msg->_impl_.item_;
}
void S2C_DeleteInventory::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
S2C_DeleteInventory::S2C_DeleteInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_DeleteInventory)
}
S2C_DeleteInventory::S2C_DeleteInventory(const S2C_DeleteInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_DeleteInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::SItem(*from._impl_.item_);
  }
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_DeleteInventory)
}

inline void S2C_DeleteInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_DeleteInventory::~S2C_DeleteInventory() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_DeleteInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_DeleteInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void S2C_DeleteInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_DeleteInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_DeleteInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_DeleteInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_DeleteInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_DeleteInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // int32 error = 3;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_DeleteInventory)
  return target;
}

size_t S2C_DeleteInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_DeleteInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int32 error = 3;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_DeleteInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_DeleteInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_DeleteInventory::GetClassData() const { return &_class_data_; }


void S2C_DeleteInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_DeleteInventory*>(&to_msg);
  auto& from = static_cast<const S2C_DeleteInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_DeleteInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::SItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_DeleteInventory::CopyFrom(const S2C_DeleteInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_DeleteInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_DeleteInventory::IsInitialized() const {
  return true;
}

void S2C_DeleteInventory::InternalSwap(S2C_DeleteInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_DeleteInventory, _impl_.error_)
      + sizeof(S2C_DeleteInventory::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(S2C_DeleteInventory, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_DeleteInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[44]);
}

// ===================================================================

class S2C_RollbackInventory::_Internal {
 public:
  static const ::Protocol::SItem& item(const S2C_RollbackInventory* msg);
};

const ::Protocol::SItem&
S2C_RollbackInventory::_Internal::item(const S2C_RollbackInventory* msg) {
  return *msg->_impl_.item_;
}
void S2C_RollbackInventory::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
S2C_RollbackInventory::S2C_RollbackInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_RollbackInventory)
}
S2C_RollbackInventory::S2C_RollbackInventory(const S2C_RollbackInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_RollbackInventory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.remote_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::SItem(*from._impl_.item_);
  }
  _this->_impl_.remote_id_ = from._impl_.remote_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_RollbackInventory)
}

inline void S2C_RollbackInventory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_RollbackInventory::~S2C_RollbackInventory() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_RollbackInventory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_RollbackInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void S2C_RollbackInventory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_RollbackInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_RollbackInventory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.remote_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_RollbackInventory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_RollbackInventory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_RollbackInventory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_RollbackInventory)
  return target;
}

size_t S2C_RollbackInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_RollbackInventory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_RollbackInventory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_RollbackInventory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_RollbackInventory::GetClassData() const { return &_class_data_; }


void S2C_RollbackInventory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_RollbackInventory*>(&to_msg);
  auto& from = static_cast<const S2C_RollbackInventory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_RollbackInventory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::SItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_RollbackInventory::CopyFrom(const S2C_RollbackInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_RollbackInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_RollbackInventory::IsInitialized() const {
  return true;
}

void S2C_RollbackInventory::InternalSwap(S2C_RollbackInventory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_RollbackInventory, _impl_.remote_id_)
      + sizeof(S2C_RollbackInventory::_impl_.remote_id_)
      - PROTOBUF_FIELD_OFFSET(S2C_RollbackInventory, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_RollbackInventory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[45]);
}

// ===================================================================

class C2S_ReplaceEqipment::_Internal {
 public:
  static const ::Protocol::SItem& insert_inven_item(const C2S_ReplaceEqipment* msg);
  static const ::Protocol::SItem& insert_eqip_item(const C2S_ReplaceEqipment* msg);
};

const ::Protocol::SItem&
C2S_ReplaceEqipment::_Internal::insert_inven_item(const C2S_ReplaceEqipment* msg) {
  return *msg->_impl_.insert_inven_item_;
}
const ::Protocol::SItem&
C2S_ReplaceEqipment::_Internal::insert_eqip_item(const C2S_ReplaceEqipment* msg) {
  return *msg->_impl_.insert_eqip_item_;
}
void C2S_ReplaceEqipment::clear_insert_inven_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.insert_inven_item_ != nullptr) {
    delete _impl_.insert_inven_item_;
  }
  _impl_.insert_inven_item_ = nullptr;
}
void C2S_ReplaceEqipment::clear_insert_eqip_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.insert_eqip_item_ != nullptr) {
    delete _impl_.insert_eqip_item_;
  }
  _impl_.insert_eqip_item_ = nullptr;
}
C2S_ReplaceEqipment::C2S_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C2S_ReplaceEqipment)
}
C2S_ReplaceEqipment::C2S_ReplaceEqipment(const C2S_ReplaceEqipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C2S_ReplaceEqipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.insert_inven_item_){nullptr}
    , decltype(_impl_.insert_eqip_item_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.part_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_insert_inven_item()) {
    _this->_impl_.insert_inven_item_ = new ::Protocol::SItem(*from._impl_.insert_inven_item_);
  }
  if (from._internal_has_insert_eqip_item()) {
    _this->_impl_.insert_eqip_item_ = new ::Protocol::SItem(*from._impl_.insert_eqip_item_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.part_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.part_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C2S_ReplaceEqipment)
}

inline void C2S_ReplaceEqipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.insert_inven_item_){nullptr}
    , decltype(_impl_.insert_eqip_item_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.part_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C2S_ReplaceEqipment::~C2S_ReplaceEqipment() {
  // @@protoc_insertion_point(destructor:Protocol.C2S_ReplaceEqipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2S_ReplaceEqipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.insert_inven_item_;
  if (this != internal_default_instance()) delete _impl_.insert_eqip_item_;
}

void C2S_ReplaceEqipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C2S_ReplaceEqipment::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C2S_ReplaceEqipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.insert_inven_item_ != nullptr) {
    delete _impl_.insert_inven_item_;
  }
  _impl_.insert_inven_item_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.insert_eqip_item_ != nullptr) {
    delete _impl_.insert_eqip_item_;
  }
  _impl_.insert_eqip_item_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.part_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.part_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_ReplaceEqipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SItem insert_inven_item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_inven_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SItem insert_eqip_item = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_eqip_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ECharacterPart part = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_part(static_cast<::Protocol::ECharacterPart>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2S_ReplaceEqipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C2S_ReplaceEqipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // .Protocol.SItem insert_inven_item = 2;
  if (this->_internal_has_insert_inven_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::insert_inven_item(this),
        _Internal::insert_inven_item(this).GetCachedSize(), target, stream);
  }

  // .Protocol.SItem insert_eqip_item = 3;
  if (this->_internal_has_insert_eqip_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::insert_eqip_item(this),
        _Internal::insert_eqip_item(this).GetCachedSize(), target, stream);
  }

  // .Protocol.ECharacterPart part = 4;
  if (this->_internal_part() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_part(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C2S_ReplaceEqipment)
  return target;
}

size_t C2S_ReplaceEqipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C2S_ReplaceEqipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SItem insert_inven_item = 2;
  if (this->_internal_has_insert_inven_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_inven_item_);
  }

  // .Protocol.SItem insert_eqip_item = 3;
  if (this->_internal_has_insert_eqip_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.insert_eqip_item_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .Protocol.ECharacterPart part = 4;
  if (this->_internal_part() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_part());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2S_ReplaceEqipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C2S_ReplaceEqipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2S_ReplaceEqipment::GetClassData() const { return &_class_data_; }


void C2S_ReplaceEqipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C2S_ReplaceEqipment*>(&to_msg);
  auto& from = static_cast<const C2S_ReplaceEqipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C2S_ReplaceEqipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_insert_inven_item()) {
    _this->_internal_mutable_insert_inven_item()->::Protocol::SItem::MergeFrom(
        from._internal_insert_inven_item());
  }
  if (from._internal_has_insert_eqip_item()) {
    _this->_internal_mutable_insert_eqip_item()->::Protocol::SItem::MergeFrom(
        from._internal_insert_eqip_item());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_part() != 0) {
    _this->_internal_set_part(from._internal_part());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2S_ReplaceEqipment::CopyFrom(const C2S_ReplaceEqipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C2S_ReplaceEqipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_ReplaceEqipment::IsInitialized() const {
  return true;
}

void C2S_ReplaceEqipment::InternalSwap(C2S_ReplaceEqipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_ReplaceEqipment, _impl_.part_)
      + sizeof(C2S_ReplaceEqipment::_impl_.part_)
      - PROTOBUF_FIELD_OFFSET(C2S_ReplaceEqipment, _impl_.insert_inven_item_)>(
          reinterpret_cast<char*>(&_impl_.insert_inven_item_),
          reinterpret_cast<char*>(&other->_impl_.insert_inven_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_ReplaceEqipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[46]);
}

// ===================================================================

class S2C_ReplaceEqipment::_Internal {
 public:
  static const ::Protocol::SCharacterEqipment& eqipment(const S2C_ReplaceEqipment* msg);
};

const ::Protocol::SCharacterEqipment&
S2C_ReplaceEqipment::_Internal::eqipment(const S2C_ReplaceEqipment* msg) {
  return *msg->_impl_.eqipment_;
}
void S2C_ReplaceEqipment::clear_eqipment() {
  if (GetArenaForAllocation() == nullptr && _impl_.eqipment_ != nullptr) {
    delete _impl_.eqipment_;
  }
  _impl_.eqipment_ = nullptr;
}
S2C_ReplaceEqipment::S2C_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S2C_ReplaceEqipment)
}
S2C_ReplaceEqipment::S2C_ReplaceEqipment(const S2C_ReplaceEqipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S2C_ReplaceEqipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.eqipment_){nullptr}
    , decltype(_impl_.remote_id_){}
    , decltype(_impl_.error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_eqipment()) {
    _this->_impl_.eqipment_ = new ::Protocol::SCharacterEqipment(*from._impl_.eqipment_);
  }
  ::memcpy(&_impl_.remote_id_, &from._impl_.remote_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_) -
    reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S2C_ReplaceEqipment)
}

inline void S2C_ReplaceEqipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.eqipment_){nullptr}
    , decltype(_impl_.remote_id_){int64_t{0}}
    , decltype(_impl_.error_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S2C_ReplaceEqipment::~S2C_ReplaceEqipment() {
  // @@protoc_insertion_point(destructor:Protocol.S2C_ReplaceEqipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S2C_ReplaceEqipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.eqipment_;
}

void S2C_ReplaceEqipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S2C_ReplaceEqipment::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S2C_ReplaceEqipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.eqipment_ != nullptr) {
    delete _impl_.eqipment_;
  }
  _impl_.eqipment_ = nullptr;
  ::memset(&_impl_.remote_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_) -
      reinterpret_cast<char*>(&_impl_.remote_id_)) + sizeof(_impl_.error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S2C_ReplaceEqipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.remote_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SCharacterEqipment eqipment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eqipment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S2C_ReplaceEqipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S2C_ReplaceEqipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_remote_id(), target);
  }

  // .Protocol.SCharacterEqipment eqipment = 2;
  if (this->_internal_has_eqipment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::eqipment(this),
        _Internal::eqipment(this).GetCachedSize(), target, stream);
  }

  // int32 error = 3;
  if (this->_internal_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S2C_ReplaceEqipment)
  return target;
}

size_t S2C_ReplaceEqipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S2C_ReplaceEqipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.SCharacterEqipment eqipment = 2;
  if (this->_internal_has_eqipment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.eqipment_);
  }

  // int64 remote_id = 1;
  if (this->_internal_remote_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_remote_id());
  }

  // int32 error = 3;
  if (this->_internal_error() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S2C_ReplaceEqipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S2C_ReplaceEqipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S2C_ReplaceEqipment::GetClassData() const { return &_class_data_; }


void S2C_ReplaceEqipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S2C_ReplaceEqipment*>(&to_msg);
  auto& from = static_cast<const S2C_ReplaceEqipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S2C_ReplaceEqipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eqipment()) {
    _this->_internal_mutable_eqipment()->::Protocol::SCharacterEqipment::MergeFrom(
        from._internal_eqipment());
  }
  if (from._internal_remote_id() != 0) {
    _this->_internal_set_remote_id(from._internal_remote_id());
  }
  if (from._internal_error() != 0) {
    _this->_internal_set_error(from._internal_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S2C_ReplaceEqipment::CopyFrom(const S2C_ReplaceEqipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S2C_ReplaceEqipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_ReplaceEqipment::IsInitialized() const {
  return true;
}

void S2C_ReplaceEqipment::InternalSwap(S2C_ReplaceEqipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S2C_ReplaceEqipment, _impl_.error_)
      + sizeof(S2C_ReplaceEqipment::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(S2C_ReplaceEqipment, _impl_.eqipment_)>(
          reinterpret_cast<char*>(&_impl_.eqipment_),
          reinterpret_cast<char*>(&other->_impl_.eqipment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S2C_ReplaceEqipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_GamePacket_2eproto_getter, &descriptor_table_GamePacket_2eproto_once,
      file_level_metadata_GamePacket_2eproto[47]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C2S_EnterGameServer*
Arena::CreateMaybeMessage< ::Protocol::C2S_EnterGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_EnterGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_EnterGameServer*
Arena::CreateMaybeMessage< ::Protocol::S2C_EnterGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_EnterGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_LeaveGameServer*
Arena::CreateMaybeMessage< ::Protocol::C2S_LeaveGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_LeaveGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_LeaveGameServer*
Arena::CreateMaybeMessage< ::Protocol::S2C_LeaveGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_LeaveGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_Tick*
Arena::CreateMaybeMessage< ::Protocol::C2S_Tick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_Tick >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_Tick*
Arena::CreateMaybeMessage< ::Protocol::S2C_Tick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_Tick >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AppearCharacter*
Arena::CreateMaybeMessage< ::Protocol::S2C_AppearCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_AppearCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_DisAppearCharacter*
Arena::CreateMaybeMessage< ::Protocol::S2C_DisAppearCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_DisAppearCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_MovementCharacter*
Arena::CreateMaybeMessage< ::Protocol::C2S_MovementCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_MovementCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_MovementCharacter*
Arena::CreateMaybeMessage< ::Protocol::S2C_MovementCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_MovementCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_PlayAnimation*
Arena::CreateMaybeMessage< ::Protocol::C2S_PlayAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_PlayAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_PlayAnimation*
Arena::CreateMaybeMessage< ::Protocol::S2C_PlayAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_PlayAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_DetectChangePlayer*
Arena::CreateMaybeMessage< ::Protocol::S2C_DetectChangePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_DetectChangePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_PlayerAutoAttack*
Arena::CreateMaybeMessage< ::Protocol::C2S_PlayerAutoAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_PlayerAutoAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_PlayerAutoAttack*
Arena::CreateMaybeMessage< ::Protocol::S2C_PlayerAutoAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_PlayerAutoAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_UpdateExperience*
Arena::CreateMaybeMessage< ::Protocol::S2C_UpdateExperience >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_UpdateExperience >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_LevelUp*
Arena::CreateMaybeMessage< ::Protocol::S2C_LevelUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_LevelUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_Chat*
Arena::CreateMaybeMessage< ::Protocol::C2S_Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_Chat*
Arena::CreateMaybeMessage< ::Protocol::S2C_Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_LoadFriendList*
Arena::CreateMaybeMessage< ::Protocol::C2S_LoadFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_LoadFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_LoadFriendList*
Arena::CreateMaybeMessage< ::Protocol::S2C_LoadFriendList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_LoadFriendList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_RequestFriend*
Arena::CreateMaybeMessage< ::Protocol::C2S_RequestFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_RequestFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_RequestFriend*
Arena::CreateMaybeMessage< ::Protocol::S2C_RequestFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_RequestFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_BlockFriend*
Arena::CreateMaybeMessage< ::Protocol::C2S_BlockFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_BlockFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_BlockFriend*
Arena::CreateMaybeMessage< ::Protocol::S2C_BlockFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_BlockFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_ConnectFriend*
Arena::CreateMaybeMessage< ::Protocol::S2C_ConnectFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_ConnectFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_DisConnectFriend*
Arena::CreateMaybeMessage< ::Protocol::S2C_DisConnectFriend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_DisConnectFriend >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AppearItem*
Arena::CreateMaybeMessage< ::Protocol::S2C_AppearItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_AppearItem >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AppearArrow*
Arena::CreateMaybeMessage< ::Protocol::S2C_AppearArrow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_AppearArrow >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_MovementProjectile*
Arena::CreateMaybeMessage< ::Protocol::S2C_MovementProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_MovementProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_AppearEnemy*
Arena::CreateMaybeMessage< ::Protocol::S2C_AppearEnemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_AppearEnemy >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_DetectChangeEnemy*
Arena::CreateMaybeMessage< ::Protocol::S2C_DetectChangeEnemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_DetectChangeEnemy >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_MovementEnemy*
Arena::CreateMaybeMessage< ::Protocol::S2C_MovementEnemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_MovementEnemy >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_EnemyAutoAttack*
Arena::CreateMaybeMessage< ::Protocol::S2C_EnemyAutoAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_EnemyAutoAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_HitEnemy*
Arena::CreateMaybeMessage< ::Protocol::S2C_HitEnemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_HitEnemy >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_DeathEnemy*
Arena::CreateMaybeMessage< ::Protocol::S2C_DeathEnemy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_DeathEnemy >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_DisAppearGameObject*
Arena::CreateMaybeMessage< ::Protocol::S2C_DisAppearGameObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_DisAppearGameObject >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_LoadInventory*
Arena::CreateMaybeMessage< ::Protocol::C2S_LoadInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_LoadInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_LoadInventory*
Arena::CreateMaybeMessage< ::Protocol::S2C_LoadInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_LoadInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_InsertInventory*
Arena::CreateMaybeMessage< ::Protocol::C2S_InsertInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_InsertInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_InsertInventory*
Arena::CreateMaybeMessage< ::Protocol::S2C_InsertInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_InsertInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_UpdateInventory*
Arena::CreateMaybeMessage< ::Protocol::C2S_UpdateInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_UpdateInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_UpdateInventory*
Arena::CreateMaybeMessage< ::Protocol::S2C_UpdateInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_UpdateInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_DeleteInventory*
Arena::CreateMaybeMessage< ::Protocol::C2S_DeleteInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_DeleteInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_DeleteInventory*
Arena::CreateMaybeMessage< ::Protocol::S2C_DeleteInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_DeleteInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_RollbackInventory*
Arena::CreateMaybeMessage< ::Protocol::S2C_RollbackInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_RollbackInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C2S_ReplaceEqipment*
Arena::CreateMaybeMessage< ::Protocol::C2S_ReplaceEqipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C2S_ReplaceEqipment >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S2C_ReplaceEqipment*
Arena::CreateMaybeMessage< ::Protocol::S2C_ReplaceEqipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S2C_ReplaceEqipment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
