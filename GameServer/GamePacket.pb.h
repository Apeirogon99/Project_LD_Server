#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PacketStruct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GamePacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GamePacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GamePacket_2eproto;
namespace Protocol {
class C2S_EnterGameServer;
struct C2S_EnterGameServerDefaultTypeInternal;
extern C2S_EnterGameServerDefaultTypeInternal _C2S_EnterGameServer_default_instance_;
class C2S_LeaveGameServer;
struct C2S_LeaveGameServerDefaultTypeInternal;
extern C2S_LeaveGameServerDefaultTypeInternal _C2S_LeaveGameServer_default_instance_;
class C2S_MovementCharacter;
struct C2S_MovementCharacterDefaultTypeInternal;
extern C2S_MovementCharacterDefaultTypeInternal _C2S_MovementCharacter_default_instance_;
class S2C_EnterGameServer;
struct S2C_EnterGameServerDefaultTypeInternal;
extern S2C_EnterGameServerDefaultTypeInternal _S2C_EnterGameServer_default_instance_;
class S2C_LeaveGameServer;
struct S2C_LeaveGameServerDefaultTypeInternal;
extern S2C_LeaveGameServerDefaultTypeInternal _S2C_LeaveGameServer_default_instance_;
class S2C_MovementCharacter;
struct S2C_MovementCharacterDefaultTypeInternal;
extern S2C_MovementCharacterDefaultTypeInternal _S2C_MovementCharacter_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_EnterGameServer* Arena::CreateMaybeMessage<::Protocol::C2S_EnterGameServer>(Arena*);
template<> ::Protocol::C2S_LeaveGameServer* Arena::CreateMaybeMessage<::Protocol::C2S_LeaveGameServer>(Arena*);
template<> ::Protocol::C2S_MovementCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_MovementCharacter>(Arena*);
template<> ::Protocol::S2C_EnterGameServer* Arena::CreateMaybeMessage<::Protocol::S2C_EnterGameServer>(Arena*);
template<> ::Protocol::S2C_LeaveGameServer* Arena::CreateMaybeMessage<::Protocol::S2C_LeaveGameServer>(Arena*);
template<> ::Protocol::S2C_MovementCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_MovementCharacter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2S_EnterGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_EnterGameServer) */ {
 public:
  inline C2S_EnterGameServer() : C2S_EnterGameServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_EnterGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EnterGameServer(const C2S_EnterGameServer& from);
  C2S_EnterGameServer(C2S_EnterGameServer&& from) noexcept
    : C2S_EnterGameServer() {
    *this = ::std::move(from);
  }

  inline C2S_EnterGameServer& operator=(const C2S_EnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EnterGameServer& operator=(C2S_EnterGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EnterGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EnterGameServer* internal_default_instance() {
    return reinterpret_cast<const C2S_EnterGameServer*>(
               &_C2S_EnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_EnterGameServer& a, C2S_EnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EnterGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EnterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EnterGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_EnterGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_EnterGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EnterGameServer";
  }
  protected:
  explicit C2S_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EnterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterGameServer) */ {
 public:
  inline S2C_EnterGameServer() : S2C_EnterGameServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S2C_EnterGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterGameServer(const S2C_EnterGameServer& from);
  S2C_EnterGameServer(S2C_EnterGameServer&& from) noexcept
    : S2C_EnterGameServer() {
    *this = ::std::move(from);
  }

  inline S2C_EnterGameServer& operator=(const S2C_EnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterGameServer& operator=(S2C_EnterGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterGameServer* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterGameServer*>(
               &_S2C_EnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_EnterGameServer& a, S2C_EnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_EnterGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_EnterGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterGameServer";
  }
  protected:
  explicit S2C_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LeaveGameServer) */ {
 public:
  inline C2S_LeaveGameServer() : C2S_LeaveGameServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LeaveGameServer(const C2S_LeaveGameServer& from);
  C2S_LeaveGameServer(C2S_LeaveGameServer&& from) noexcept
    : C2S_LeaveGameServer() {
    *this = ::std::move(from);
  }

  inline C2S_LeaveGameServer& operator=(const C2S_LeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LeaveGameServer& operator=(C2S_LeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LeaveGameServer*>(
               &_C2S_LeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_LeaveGameServer& a, C2S_LeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LeaveGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LeaveGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LeaveGameServer";
  }
  protected:
  explicit C2S_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeaveGameServer) */ {
 public:
  inline S2C_LeaveGameServer() : S2C_LeaveGameServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S2C_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeaveGameServer(const S2C_LeaveGameServer& from);
  S2C_LeaveGameServer(S2C_LeaveGameServer&& from) noexcept
    : S2C_LeaveGameServer() {
    *this = ::std::move(from);
  }

  inline S2C_LeaveGameServer& operator=(const S2C_LeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeaveGameServer& operator=(S2C_LeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LeaveGameServer*>(
               &_S2C_LeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_LeaveGameServer& a, S2C_LeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeaveGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeaveGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeaveGameServer";
  }
  protected:
  explicit S2C_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_MovementCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_MovementCharacter) */ {
 public:
  inline C2S_MovementCharacter() : C2S_MovementCharacter(nullptr) {}
  ~C2S_MovementCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_MovementCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_MovementCharacter(const C2S_MovementCharacter& from);
  C2S_MovementCharacter(C2S_MovementCharacter&& from) noexcept
    : C2S_MovementCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_MovementCharacter& operator=(const C2S_MovementCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_MovementCharacter& operator=(C2S_MovementCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_MovementCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_MovementCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_MovementCharacter*>(
               &_C2S_MovementCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_MovementCharacter& a, C2S_MovementCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_MovementCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_MovementCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_MovementCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_MovementCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_MovementCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_MovementCharacter& from) {
    C2S_MovementCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_MovementCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_MovementCharacter";
  }
  protected:
  explicit C2S_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.STransform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::STransform& transform() const;
  PROTOBUF_NODISCARD ::Protocol::STransform* release_transform();
  ::Protocol::STransform* mutable_transform();
  void set_allocated_transform(::Protocol::STransform* transform);
  private:
  const ::Protocol::STransform& _internal_transform() const;
  ::Protocol::STransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::STransform* transform);
  ::Protocol::STransform* unsafe_arena_release_transform();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_MovementCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::STransform* transform_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_MovementCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MovementCharacter) */ {
 public:
  inline S2C_MovementCharacter() : S2C_MovementCharacter(nullptr) {}
  ~S2C_MovementCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_MovementCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MovementCharacter(const S2C_MovementCharacter& from);
  S2C_MovementCharacter(S2C_MovementCharacter&& from) noexcept
    : S2C_MovementCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_MovementCharacter& operator=(const S2C_MovementCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MovementCharacter& operator=(S2C_MovementCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MovementCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MovementCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_MovementCharacter*>(
               &_S2C_MovementCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_MovementCharacter& a, S2C_MovementCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MovementCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MovementCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MovementCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MovementCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MovementCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MovementCharacter& from) {
    S2C_MovementCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MovementCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MovementCharacter";
  }
  protected:
  explicit S2C_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 3,
    kRemoteIDFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .Protocol.STransform transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::STransform& transform() const;
  PROTOBUF_NODISCARD ::Protocol::STransform* release_transform();
  ::Protocol::STransform* mutable_transform();
  void set_allocated_transform(::Protocol::STransform* transform);
  private:
  const ::Protocol::STransform& _internal_transform() const;
  ::Protocol::STransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::STransform* transform);
  ::Protocol::STransform* unsafe_arena_release_transform();

  // int64 remoteID = 1;
  void clear_remoteid();
  int64_t remoteid() const;
  void set_remoteid(int64_t value);
  private:
  int64_t _internal_remoteid() const;
  void _internal_set_remoteid(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MovementCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::STransform* transform_;
    int64_t remoteid_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_EnterGameServer

// -------------------------------------------------------------------

// S2C_EnterGameServer

// -------------------------------------------------------------------

// C2S_LeaveGameServer

// -------------------------------------------------------------------

// S2C_LeaveGameServer

// -------------------------------------------------------------------

// C2S_MovementCharacter

// int64 timestamp = 1;
inline void C2S_MovementCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_MovementCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_MovementCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.timestamp)
  return _internal_timestamp();
}
inline void C2S_MovementCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_MovementCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_MovementCharacter.timestamp)
}

// .Protocol.STransform transform = 2;
inline bool C2S_MovementCharacter::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool C2S_MovementCharacter::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::STransform& C2S_MovementCharacter::_internal_transform() const {
  const ::Protocol::STransform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::STransform&>(
      ::Protocol::_STransform_default_instance_);
}
inline const ::Protocol::STransform& C2S_MovementCharacter::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.transform)
  return _internal_transform();
}
inline void C2S_MovementCharacter::unsafe_arena_set_allocated_transform(
    ::Protocol::STransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MovementCharacter.transform)
}
inline ::Protocol::STransform* C2S_MovementCharacter::release_transform() {
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::STransform* C2S_MovementCharacter::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MovementCharacter.transform)
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::Protocol::STransform* C2S_MovementCharacter::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::STransform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::Protocol::STransform* C2S_MovementCharacter::mutable_transform() {
  ::Protocol::STransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MovementCharacter.transform)
  return _msg;
}
inline void C2S_MovementCharacter::set_allocated_transform(::Protocol::STransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MovementCharacter.transform)
}

// -------------------------------------------------------------------

// S2C_MovementCharacter

// int64 remoteID = 1;
inline void S2C_MovementCharacter::clear_remoteid() {
  _impl_.remoteid_ = int64_t{0};
}
inline int64_t S2C_MovementCharacter::_internal_remoteid() const {
  return _impl_.remoteid_;
}
inline int64_t S2C_MovementCharacter::remoteid() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.remoteID)
  return _internal_remoteid();
}
inline void S2C_MovementCharacter::_internal_set_remoteid(int64_t value) {
  
  _impl_.remoteid_ = value;
}
inline void S2C_MovementCharacter::set_remoteid(int64_t value) {
  _internal_set_remoteid(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementCharacter.remoteID)
}

// int64 timestamp = 2;
inline void S2C_MovementCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_MovementCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_MovementCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.timestamp)
  return _internal_timestamp();
}
inline void S2C_MovementCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_MovementCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementCharacter.timestamp)
}

// .Protocol.STransform transform = 3;
inline bool S2C_MovementCharacter::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool S2C_MovementCharacter::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::STransform& S2C_MovementCharacter::_internal_transform() const {
  const ::Protocol::STransform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::STransform&>(
      ::Protocol::_STransform_default_instance_);
}
inline const ::Protocol::STransform& S2C_MovementCharacter::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.transform)
  return _internal_transform();
}
inline void S2C_MovementCharacter::unsafe_arena_set_allocated_transform(
    ::Protocol::STransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementCharacter.transform)
}
inline ::Protocol::STransform* S2C_MovementCharacter::release_transform() {
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::STransform* S2C_MovementCharacter::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementCharacter.transform)
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::Protocol::STransform* S2C_MovementCharacter::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::STransform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::Protocol::STransform* S2C_MovementCharacter::mutable_transform() {
  ::Protocol::STransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementCharacter.transform)
  return _msg;
}
inline void S2C_MovementCharacter::set_allocated_transform(::Protocol::STransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementCharacter.transform)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto
