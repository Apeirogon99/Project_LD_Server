#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PacketStruct.pb.h"
#include "PacketEnum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GamePacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GamePacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GamePacket_2eproto;
namespace Protocol {
class C2S_DeleteInventory;
struct C2S_DeleteInventoryDefaultTypeInternal;
extern C2S_DeleteInventoryDefaultTypeInternal _C2S_DeleteInventory_default_instance_;
class C2S_EnterGameServer;
struct C2S_EnterGameServerDefaultTypeInternal;
extern C2S_EnterGameServerDefaultTypeInternal _C2S_EnterGameServer_default_instance_;
class C2S_InsertInventory;
struct C2S_InsertInventoryDefaultTypeInternal;
extern C2S_InsertInventoryDefaultTypeInternal _C2S_InsertInventory_default_instance_;
class C2S_LeaveGameServer;
struct C2S_LeaveGameServerDefaultTypeInternal;
extern C2S_LeaveGameServerDefaultTypeInternal _C2S_LeaveGameServer_default_instance_;
class C2S_LoadInventory;
struct C2S_LoadInventoryDefaultTypeInternal;
extern C2S_LoadInventoryDefaultTypeInternal _C2S_LoadInventory_default_instance_;
class C2S_MovementCharacter;
struct C2S_MovementCharacterDefaultTypeInternal;
extern C2S_MovementCharacterDefaultTypeInternal _C2S_MovementCharacter_default_instance_;
class C2S_PlayAnimation;
struct C2S_PlayAnimationDefaultTypeInternal;
extern C2S_PlayAnimationDefaultTypeInternal _C2S_PlayAnimation_default_instance_;
class C2S_PlayerAutoAttack;
struct C2S_PlayerAutoAttackDefaultTypeInternal;
extern C2S_PlayerAutoAttackDefaultTypeInternal _C2S_PlayerAutoAttack_default_instance_;
class C2S_ReplaceEqipment;
struct C2S_ReplaceEqipmentDefaultTypeInternal;
extern C2S_ReplaceEqipmentDefaultTypeInternal _C2S_ReplaceEqipment_default_instance_;
class C2S_Tick;
struct C2S_TickDefaultTypeInternal;
extern C2S_TickDefaultTypeInternal _C2S_Tick_default_instance_;
class C2S_UpdateInventory;
struct C2S_UpdateInventoryDefaultTypeInternal;
extern C2S_UpdateInventoryDefaultTypeInternal _C2S_UpdateInventory_default_instance_;
class S2C_AppearArrow;
struct S2C_AppearArrowDefaultTypeInternal;
extern S2C_AppearArrowDefaultTypeInternal _S2C_AppearArrow_default_instance_;
class S2C_AppearCharacter;
struct S2C_AppearCharacterDefaultTypeInternal;
extern S2C_AppearCharacterDefaultTypeInternal _S2C_AppearCharacter_default_instance_;
class S2C_AppearEnemy;
struct S2C_AppearEnemyDefaultTypeInternal;
extern S2C_AppearEnemyDefaultTypeInternal _S2C_AppearEnemy_default_instance_;
class S2C_AppearItem;
struct S2C_AppearItemDefaultTypeInternal;
extern S2C_AppearItemDefaultTypeInternal _S2C_AppearItem_default_instance_;
class S2C_DeathEnemy;
struct S2C_DeathEnemyDefaultTypeInternal;
extern S2C_DeathEnemyDefaultTypeInternal _S2C_DeathEnemy_default_instance_;
class S2C_DeleteInventory;
struct S2C_DeleteInventoryDefaultTypeInternal;
extern S2C_DeleteInventoryDefaultTypeInternal _S2C_DeleteInventory_default_instance_;
class S2C_DetectChangeEnemy;
struct S2C_DetectChangeEnemyDefaultTypeInternal;
extern S2C_DetectChangeEnemyDefaultTypeInternal _S2C_DetectChangeEnemy_default_instance_;
class S2C_DisAppearCharacter;
struct S2C_DisAppearCharacterDefaultTypeInternal;
extern S2C_DisAppearCharacterDefaultTypeInternal _S2C_DisAppearCharacter_default_instance_;
class S2C_DisAppearGameObject;
struct S2C_DisAppearGameObjectDefaultTypeInternal;
extern S2C_DisAppearGameObjectDefaultTypeInternal _S2C_DisAppearGameObject_default_instance_;
class S2C_EnemyAutoAttack;
struct S2C_EnemyAutoAttackDefaultTypeInternal;
extern S2C_EnemyAutoAttackDefaultTypeInternal _S2C_EnemyAutoAttack_default_instance_;
class S2C_EnterGameServer;
struct S2C_EnterGameServerDefaultTypeInternal;
extern S2C_EnterGameServerDefaultTypeInternal _S2C_EnterGameServer_default_instance_;
class S2C_HitEnemy;
struct S2C_HitEnemyDefaultTypeInternal;
extern S2C_HitEnemyDefaultTypeInternal _S2C_HitEnemy_default_instance_;
class S2C_InsertInventory;
struct S2C_InsertInventoryDefaultTypeInternal;
extern S2C_InsertInventoryDefaultTypeInternal _S2C_InsertInventory_default_instance_;
class S2C_LeaveGameServer;
struct S2C_LeaveGameServerDefaultTypeInternal;
extern S2C_LeaveGameServerDefaultTypeInternal _S2C_LeaveGameServer_default_instance_;
class S2C_LoadInventory;
struct S2C_LoadInventoryDefaultTypeInternal;
extern S2C_LoadInventoryDefaultTypeInternal _S2C_LoadInventory_default_instance_;
class S2C_MovementCharacter;
struct S2C_MovementCharacterDefaultTypeInternal;
extern S2C_MovementCharacterDefaultTypeInternal _S2C_MovementCharacter_default_instance_;
class S2C_MovementEnemy;
struct S2C_MovementEnemyDefaultTypeInternal;
extern S2C_MovementEnemyDefaultTypeInternal _S2C_MovementEnemy_default_instance_;
class S2C_MovementProjectile;
struct S2C_MovementProjectileDefaultTypeInternal;
extern S2C_MovementProjectileDefaultTypeInternal _S2C_MovementProjectile_default_instance_;
class S2C_PlayAnimation;
struct S2C_PlayAnimationDefaultTypeInternal;
extern S2C_PlayAnimationDefaultTypeInternal _S2C_PlayAnimation_default_instance_;
class S2C_PlayerAutoAttack;
struct S2C_PlayerAutoAttackDefaultTypeInternal;
extern S2C_PlayerAutoAttackDefaultTypeInternal _S2C_PlayerAutoAttack_default_instance_;
class S2C_ReplaceEqipment;
struct S2C_ReplaceEqipmentDefaultTypeInternal;
extern S2C_ReplaceEqipmentDefaultTypeInternal _S2C_ReplaceEqipment_default_instance_;
class S2C_RollbackInventory;
struct S2C_RollbackInventoryDefaultTypeInternal;
extern S2C_RollbackInventoryDefaultTypeInternal _S2C_RollbackInventory_default_instance_;
class S2C_Tick;
struct S2C_TickDefaultTypeInternal;
extern S2C_TickDefaultTypeInternal _S2C_Tick_default_instance_;
class S2C_UpdateInventory;
struct S2C_UpdateInventoryDefaultTypeInternal;
extern S2C_UpdateInventoryDefaultTypeInternal _S2C_UpdateInventory_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_DeleteInventory* Arena::CreateMaybeMessage<::Protocol::C2S_DeleteInventory>(Arena*);
template<> ::Protocol::C2S_EnterGameServer* Arena::CreateMaybeMessage<::Protocol::C2S_EnterGameServer>(Arena*);
template<> ::Protocol::C2S_InsertInventory* Arena::CreateMaybeMessage<::Protocol::C2S_InsertInventory>(Arena*);
template<> ::Protocol::C2S_LeaveGameServer* Arena::CreateMaybeMessage<::Protocol::C2S_LeaveGameServer>(Arena*);
template<> ::Protocol::C2S_LoadInventory* Arena::CreateMaybeMessage<::Protocol::C2S_LoadInventory>(Arena*);
template<> ::Protocol::C2S_MovementCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_MovementCharacter>(Arena*);
template<> ::Protocol::C2S_PlayAnimation* Arena::CreateMaybeMessage<::Protocol::C2S_PlayAnimation>(Arena*);
template<> ::Protocol::C2S_PlayerAutoAttack* Arena::CreateMaybeMessage<::Protocol::C2S_PlayerAutoAttack>(Arena*);
template<> ::Protocol::C2S_ReplaceEqipment* Arena::CreateMaybeMessage<::Protocol::C2S_ReplaceEqipment>(Arena*);
template<> ::Protocol::C2S_Tick* Arena::CreateMaybeMessage<::Protocol::C2S_Tick>(Arena*);
template<> ::Protocol::C2S_UpdateInventory* Arena::CreateMaybeMessage<::Protocol::C2S_UpdateInventory>(Arena*);
template<> ::Protocol::S2C_AppearArrow* Arena::CreateMaybeMessage<::Protocol::S2C_AppearArrow>(Arena*);
template<> ::Protocol::S2C_AppearCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_AppearCharacter>(Arena*);
template<> ::Protocol::S2C_AppearEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_AppearEnemy>(Arena*);
template<> ::Protocol::S2C_AppearItem* Arena::CreateMaybeMessage<::Protocol::S2C_AppearItem>(Arena*);
template<> ::Protocol::S2C_DeathEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_DeathEnemy>(Arena*);
template<> ::Protocol::S2C_DeleteInventory* Arena::CreateMaybeMessage<::Protocol::S2C_DeleteInventory>(Arena*);
template<> ::Protocol::S2C_DetectChangeEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_DetectChangeEnemy>(Arena*);
template<> ::Protocol::S2C_DisAppearCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_DisAppearCharacter>(Arena*);
template<> ::Protocol::S2C_DisAppearGameObject* Arena::CreateMaybeMessage<::Protocol::S2C_DisAppearGameObject>(Arena*);
template<> ::Protocol::S2C_EnemyAutoAttack* Arena::CreateMaybeMessage<::Protocol::S2C_EnemyAutoAttack>(Arena*);
template<> ::Protocol::S2C_EnterGameServer* Arena::CreateMaybeMessage<::Protocol::S2C_EnterGameServer>(Arena*);
template<> ::Protocol::S2C_HitEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_HitEnemy>(Arena*);
template<> ::Protocol::S2C_InsertInventory* Arena::CreateMaybeMessage<::Protocol::S2C_InsertInventory>(Arena*);
template<> ::Protocol::S2C_LeaveGameServer* Arena::CreateMaybeMessage<::Protocol::S2C_LeaveGameServer>(Arena*);
template<> ::Protocol::S2C_LoadInventory* Arena::CreateMaybeMessage<::Protocol::S2C_LoadInventory>(Arena*);
template<> ::Protocol::S2C_MovementCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_MovementCharacter>(Arena*);
template<> ::Protocol::S2C_MovementEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_MovementEnemy>(Arena*);
template<> ::Protocol::S2C_MovementProjectile* Arena::CreateMaybeMessage<::Protocol::S2C_MovementProjectile>(Arena*);
template<> ::Protocol::S2C_PlayAnimation* Arena::CreateMaybeMessage<::Protocol::S2C_PlayAnimation>(Arena*);
template<> ::Protocol::S2C_PlayerAutoAttack* Arena::CreateMaybeMessage<::Protocol::S2C_PlayerAutoAttack>(Arena*);
template<> ::Protocol::S2C_ReplaceEqipment* Arena::CreateMaybeMessage<::Protocol::S2C_ReplaceEqipment>(Arena*);
template<> ::Protocol::S2C_RollbackInventory* Arena::CreateMaybeMessage<::Protocol::S2C_RollbackInventory>(Arena*);
template<> ::Protocol::S2C_Tick* Arena::CreateMaybeMessage<::Protocol::S2C_Tick>(Arena*);
template<> ::Protocol::S2C_UpdateInventory* Arena::CreateMaybeMessage<::Protocol::S2C_UpdateInventory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2S_EnterGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EnterGameServer) */ {
 public:
  inline C2S_EnterGameServer() : C2S_EnterGameServer(nullptr) {}
  ~C2S_EnterGameServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_EnterGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EnterGameServer(const C2S_EnterGameServer& from);
  C2S_EnterGameServer(C2S_EnterGameServer&& from) noexcept
    : C2S_EnterGameServer() {
    *this = ::std::move(from);
  }

  inline C2S_EnterGameServer& operator=(const C2S_EnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EnterGameServer& operator=(C2S_EnterGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EnterGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EnterGameServer* internal_default_instance() {
    return reinterpret_cast<const C2S_EnterGameServer*>(
               &_C2S_EnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_EnterGameServer& a, C2S_EnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EnterGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EnterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EnterGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EnterGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EnterGameServer& from) {
    C2S_EnterGameServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EnterGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EnterGameServer";
  }
  protected:
  explicit C2S_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EnterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterGameServer) */ {
 public:
  inline S2C_EnterGameServer() : S2C_EnterGameServer(nullptr) {}
  ~S2C_EnterGameServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnterGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterGameServer(const S2C_EnterGameServer& from);
  S2C_EnterGameServer(S2C_EnterGameServer&& from) noexcept
    : S2C_EnterGameServer() {
    *this = ::std::move(from);
  }

  inline S2C_EnterGameServer& operator=(const S2C_EnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterGameServer& operator=(S2C_EnterGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterGameServer* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterGameServer*>(
               &_S2C_EnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_EnterGameServer& a, S2C_EnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnterGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnterGameServer& from) {
    S2C_EnterGameServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnterGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterGameServer";
  }
  protected:
  explicit S2C_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kEqipmentFieldNumber = 4,
    kCharacterDataFieldNumber = 2,
    kTransformFieldNumber = 6,
    kRemoteIdFieldNumber = 1,
    kMoneyFieldNumber = 5,
    kErrorFieldNumber = 7,
  };
  // repeated .Protocol.SItem item = 3;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Protocol::SItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_item();
  private:
  const ::Protocol::SItem& _internal_item(int index) const;
  ::Protocol::SItem* _internal_add_item();
  public:
  const ::Protocol::SItem& item(int index) const;
  ::Protocol::SItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      item() const;

  // repeated .Protocol.SItem eqipment = 4;
  int eqipment_size() const;
  private:
  int _internal_eqipment_size() const;
  public:
  void clear_eqipment();
  ::Protocol::SItem* mutable_eqipment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_eqipment();
  private:
  const ::Protocol::SItem& _internal_eqipment(int index) const;
  ::Protocol::SItem* _internal_add_eqipment();
  public:
  const ::Protocol::SItem& eqipment(int index) const;
  ::Protocol::SItem* add_eqipment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      eqipment() const;

  // .Protocol.SCharacterData character_data = 2;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::Protocol::SCharacterData& character_data() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_character_data();
  ::Protocol::SCharacterData* mutable_character_data();
  void set_allocated_character_data(::Protocol::SCharacterData* character_data);
  private:
  const ::Protocol::SCharacterData& _internal_character_data() const;
  ::Protocol::SCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::Protocol::SCharacterData* character_data);
  ::Protocol::SCharacterData* unsafe_arena_release_character_data();

  // .Protocol.STransform transform = 6;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::STransform& transform() const;
  PROTOBUF_NODISCARD ::Protocol::STransform* release_transform();
  ::Protocol::STransform* mutable_transform();
  void set_allocated_transform(::Protocol::STransform* transform);
  private:
  const ::Protocol::STransform& _internal_transform() const;
  ::Protocol::STransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::STransform* transform);
  ::Protocol::STransform* unsafe_arena_release_transform();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 money = 5;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // int32 error = 7;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > item_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > eqipment_;
    ::Protocol::SCharacterData* character_data_;
    ::Protocol::STransform* transform_;
    int64_t remote_id_;
    int32_t money_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LeaveGameServer) */ {
 public:
  inline C2S_LeaveGameServer() : C2S_LeaveGameServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LeaveGameServer(const C2S_LeaveGameServer& from);
  C2S_LeaveGameServer(C2S_LeaveGameServer&& from) noexcept
    : C2S_LeaveGameServer() {
    *this = ::std::move(from);
  }

  inline C2S_LeaveGameServer& operator=(const C2S_LeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LeaveGameServer& operator=(C2S_LeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LeaveGameServer*>(
               &_C2S_LeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_LeaveGameServer& a, C2S_LeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LeaveGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LeaveGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LeaveGameServer";
  }
  protected:
  explicit C2S_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeaveGameServer) */ {
 public:
  inline S2C_LeaveGameServer() : S2C_LeaveGameServer(nullptr) {}
  ~S2C_LeaveGameServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeaveGameServer(const S2C_LeaveGameServer& from);
  S2C_LeaveGameServer(S2C_LeaveGameServer&& from) noexcept
    : S2C_LeaveGameServer() {
    *this = ::std::move(from);
  }

  inline S2C_LeaveGameServer& operator=(const S2C_LeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeaveGameServer& operator=(S2C_LeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LeaveGameServer*>(
               &_S2C_LeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_LeaveGameServer& a, S2C_LeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeaveGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeaveGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LeaveGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LeaveGameServer& from) {
    S2C_LeaveGameServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LeaveGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeaveGameServer";
  }
  protected:
  explicit S2C_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Tick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Tick) */ {
 public:
  inline C2S_Tick() : C2S_Tick(nullptr) {}
  ~C2S_Tick() override;
  explicit PROTOBUF_CONSTEXPR C2S_Tick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Tick(const C2S_Tick& from);
  C2S_Tick(C2S_Tick&& from) noexcept
    : C2S_Tick() {
    *this = ::std::move(from);
  }

  inline C2S_Tick& operator=(const C2S_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Tick& operator=(C2S_Tick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Tick& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Tick* internal_default_instance() {
    return reinterpret_cast<const C2S_Tick*>(
               &_C2S_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_Tick& a, C2S_Tick& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Tick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Tick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Tick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Tick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Tick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Tick& from) {
    C2S_Tick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Tick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Tick";
  }
  protected:
  explicit C2S_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 2,
  };
  // .Protocol.SVector cur_location = 2;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Tick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Tick final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_Tick) */ {
 public:
  inline S2C_Tick() : S2C_Tick(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S2C_Tick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Tick(const S2C_Tick& from);
  S2C_Tick(S2C_Tick&& from) noexcept
    : S2C_Tick() {
    *this = ::std::move(from);
  }

  inline S2C_Tick& operator=(const S2C_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Tick& operator=(S2C_Tick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Tick& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Tick* internal_default_instance() {
    return reinterpret_cast<const S2C_Tick*>(
               &_S2C_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_Tick& a, S2C_Tick& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Tick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Tick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Tick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Tick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_Tick& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_Tick& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Tick";
  }
  protected:
  explicit S2C_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Tick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearCharacter) */ {
 public:
  inline S2C_AppearCharacter() : S2C_AppearCharacter(nullptr) {}
  ~S2C_AppearCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearCharacter(const S2C_AppearCharacter& from);
  S2C_AppearCharacter(S2C_AppearCharacter&& from) noexcept
    : S2C_AppearCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_AppearCharacter& operator=(const S2C_AppearCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearCharacter& operator=(S2C_AppearCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearCharacter*>(
               &_S2C_AppearCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S2C_AppearCharacter& a, S2C_AppearCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearCharacter& from) {
    S2C_AppearCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearCharacter";
  }
  protected:
  explicit S2C_AppearCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 3,
    kMoveLocationFieldNumber = 4,
    kCharacterDataFieldNumber = 5,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .Protocol.SVector cur_location = 3;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 4;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // .Protocol.SCharacterData character_data = 5;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::Protocol::SCharacterData& character_data() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_character_data();
  ::Protocol::SCharacterData* mutable_character_data();
  void set_allocated_character_data(::Protocol::SCharacterData* character_data);
  private:
  const ::Protocol::SCharacterData& _internal_character_data() const;
  ::Protocol::SCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::Protocol::SCharacterData* character_data);
  ::Protocol::SCharacterData* unsafe_arena_release_character_data();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    ::Protocol::SCharacterData* character_data_;
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DisAppearCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DisAppearCharacter) */ {
 public:
  inline S2C_DisAppearCharacter() : S2C_DisAppearCharacter(nullptr) {}
  ~S2C_DisAppearCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_DisAppearCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DisAppearCharacter(const S2C_DisAppearCharacter& from);
  S2C_DisAppearCharacter(S2C_DisAppearCharacter&& from) noexcept
    : S2C_DisAppearCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_DisAppearCharacter& operator=(const S2C_DisAppearCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DisAppearCharacter& operator=(S2C_DisAppearCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DisAppearCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DisAppearCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_DisAppearCharacter*>(
               &_S2C_DisAppearCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2C_DisAppearCharacter& a, S2C_DisAppearCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DisAppearCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DisAppearCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DisAppearCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DisAppearCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DisAppearCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DisAppearCharacter& from) {
    S2C_DisAppearCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DisAppearCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DisAppearCharacter";
  }
  protected:
  explicit S2C_DisAppearCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DisAppearCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_MovementCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_MovementCharacter) */ {
 public:
  inline C2S_MovementCharacter() : C2S_MovementCharacter(nullptr) {}
  ~C2S_MovementCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_MovementCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_MovementCharacter(const C2S_MovementCharacter& from);
  C2S_MovementCharacter(C2S_MovementCharacter&& from) noexcept
    : C2S_MovementCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_MovementCharacter& operator=(const C2S_MovementCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_MovementCharacter& operator=(C2S_MovementCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_MovementCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_MovementCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_MovementCharacter*>(
               &_C2S_MovementCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2S_MovementCharacter& a, C2S_MovementCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_MovementCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_MovementCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_MovementCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_MovementCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_MovementCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_MovementCharacter& from) {
    C2S_MovementCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_MovementCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_MovementCharacter";
  }
  protected:
  explicit C2S_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 2,
    kMoveLocationFieldNumber = 3,
    kMoveVelocityFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SVector cur_location = 2;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 3;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // .Protocol.SVector move_velocity = 4;
  bool has_move_velocity() const;
  private:
  bool _internal_has_move_velocity() const;
  public:
  void clear_move_velocity();
  const ::Protocol::SVector& move_velocity() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_velocity();
  ::Protocol::SVector* mutable_move_velocity();
  void set_allocated_move_velocity(::Protocol::SVector* move_velocity);
  private:
  const ::Protocol::SVector& _internal_move_velocity() const;
  ::Protocol::SVector* _internal_mutable_move_velocity();
  public:
  void unsafe_arena_set_allocated_move_velocity(
      ::Protocol::SVector* move_velocity);
  ::Protocol::SVector* unsafe_arena_release_move_velocity();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_MovementCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    ::Protocol::SVector* move_velocity_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_MovementCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MovementCharacter) */ {
 public:
  inline S2C_MovementCharacter() : S2C_MovementCharacter(nullptr) {}
  ~S2C_MovementCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_MovementCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MovementCharacter(const S2C_MovementCharacter& from);
  S2C_MovementCharacter(S2C_MovementCharacter&& from) noexcept
    : S2C_MovementCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_MovementCharacter& operator=(const S2C_MovementCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MovementCharacter& operator=(S2C_MovementCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MovementCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MovementCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_MovementCharacter*>(
               &_S2C_MovementCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_MovementCharacter& a, S2C_MovementCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MovementCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MovementCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MovementCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MovementCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MovementCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MovementCharacter& from) {
    S2C_MovementCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MovementCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MovementCharacter";
  }
  protected:
  explicit S2C_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 3,
    kMoveLocationFieldNumber = 4,
    kMoveVelocityFieldNumber = 5,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .Protocol.SVector cur_location = 3;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 4;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // .Protocol.SVector move_velocity = 5;
  bool has_move_velocity() const;
  private:
  bool _internal_has_move_velocity() const;
  public:
  void clear_move_velocity();
  const ::Protocol::SVector& move_velocity() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_velocity();
  ::Protocol::SVector* mutable_move_velocity();
  void set_allocated_move_velocity(::Protocol::SVector* move_velocity);
  private:
  const ::Protocol::SVector& _internal_move_velocity() const;
  ::Protocol::SVector* _internal_mutable_move_velocity();
  public:
  void unsafe_arena_set_allocated_move_velocity(
      ::Protocol::SVector* move_velocity);
  ::Protocol::SVector* unsafe_arena_release_move_velocity();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MovementCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    ::Protocol::SVector* move_velocity_;
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_PlayAnimation) */ {
 public:
  inline C2S_PlayAnimation() : C2S_PlayAnimation(nullptr) {}
  ~C2S_PlayAnimation() override;
  explicit PROTOBUF_CONSTEXPR C2S_PlayAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayAnimation(const C2S_PlayAnimation& from);
  C2S_PlayAnimation(C2S_PlayAnimation&& from) noexcept
    : C2S_PlayAnimation() {
    *this = ::std::move(from);
  }

  inline C2S_PlayAnimation& operator=(const C2S_PlayAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayAnimation& operator=(C2S_PlayAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayAnimation* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayAnimation*>(
               &_C2S_PlayAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C2S_PlayAnimation& a, C2S_PlayAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_PlayAnimation& from) {
    C2S_PlayAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_PlayAnimation";
  }
  protected:
  explicit C2S_PlayAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_PlayAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_PlayAnimation) */ {
 public:
  inline S2C_PlayAnimation() : S2C_PlayAnimation(nullptr) {}
  ~S2C_PlayAnimation() override;
  explicit PROTOBUF_CONSTEXPR S2C_PlayAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayAnimation(const S2C_PlayAnimation& from);
  S2C_PlayAnimation(S2C_PlayAnimation&& from) noexcept
    : S2C_PlayAnimation() {
    *this = ::std::move(from);
  }

  inline S2C_PlayAnimation& operator=(const S2C_PlayAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayAnimation& operator=(S2C_PlayAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayAnimation* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayAnimation*>(
               &_S2C_PlayAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S2C_PlayAnimation& a, S2C_PlayAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_PlayAnimation& from) {
    S2C_PlayAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_PlayAnimation";
  }
  protected:
  explicit S2C_PlayAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_PlayAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerAutoAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_PlayerAutoAttack) */ {
 public:
  inline C2S_PlayerAutoAttack() : C2S_PlayerAutoAttack(nullptr) {}
  ~C2S_PlayerAutoAttack() override;
  explicit PROTOBUF_CONSTEXPR C2S_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayerAutoAttack(const C2S_PlayerAutoAttack& from);
  C2S_PlayerAutoAttack(C2S_PlayerAutoAttack&& from) noexcept
    : C2S_PlayerAutoAttack() {
    *this = ::std::move(from);
  }

  inline C2S_PlayerAutoAttack& operator=(const C2S_PlayerAutoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerAutoAttack& operator=(C2S_PlayerAutoAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerAutoAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerAutoAttack* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerAutoAttack*>(
               &_C2S_PlayerAutoAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C2S_PlayerAutoAttack& a, C2S_PlayerAutoAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayerAutoAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerAutoAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerAutoAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayerAutoAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerAutoAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_PlayerAutoAttack& from) {
    C2S_PlayerAutoAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayerAutoAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_PlayerAutoAttack";
  }
  protected:
  explicit C2S_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_PlayerAutoAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerAutoAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_PlayerAutoAttack) */ {
 public:
  inline S2C_PlayerAutoAttack() : S2C_PlayerAutoAttack(nullptr) {}
  ~S2C_PlayerAutoAttack() override;
  explicit PROTOBUF_CONSTEXPR S2C_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayerAutoAttack(const S2C_PlayerAutoAttack& from);
  S2C_PlayerAutoAttack(S2C_PlayerAutoAttack&& from) noexcept
    : S2C_PlayerAutoAttack() {
    *this = ::std::move(from);
  }

  inline S2C_PlayerAutoAttack& operator=(const S2C_PlayerAutoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerAutoAttack& operator=(S2C_PlayerAutoAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerAutoAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerAutoAttack* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerAutoAttack*>(
               &_S2C_PlayerAutoAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S2C_PlayerAutoAttack& a, S2C_PlayerAutoAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayerAutoAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerAutoAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerAutoAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayerAutoAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerAutoAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_PlayerAutoAttack& from) {
    S2C_PlayerAutoAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayerAutoAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_PlayerAutoAttack";
  }
  protected:
  explicit S2C_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 3,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kComboFieldNumber = 2,
  };
  // .Protocol.SRotator rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 combo = 2;
  void clear_combo();
  int32_t combo() const;
  void set_combo(int32_t value);
  private:
  int32_t _internal_combo() const;
  void _internal_set_combo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_PlayerAutoAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SRotator* rotation_;
    int64_t remote_id_;
    int64_t timestamp_;
    int32_t combo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearItem) */ {
 public:
  inline S2C_AppearItem() : S2C_AppearItem(nullptr) {}
  ~S2C_AppearItem() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearItem(const S2C_AppearItem& from);
  S2C_AppearItem(S2C_AppearItem&& from) noexcept
    : S2C_AppearItem() {
    *this = ::std::move(from);
  }

  inline S2C_AppearItem& operator=(const S2C_AppearItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearItem& operator=(S2C_AppearItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearItem* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearItem*>(
               &_S2C_AppearItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S2C_AppearItem& a, S2C_AppearItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearItem& from) {
    S2C_AppearItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearItem";
  }
  protected:
  explicit S2C_AppearItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .Protocol.SItem item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearArrow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearArrow) */ {
 public:
  inline S2C_AppearArrow() : S2C_AppearArrow(nullptr) {}
  ~S2C_AppearArrow() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearArrow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearArrow(const S2C_AppearArrow& from);
  S2C_AppearArrow(S2C_AppearArrow&& from) noexcept
    : S2C_AppearArrow() {
    *this = ::std::move(from);
  }

  inline S2C_AppearArrow& operator=(const S2C_AppearArrow& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearArrow& operator=(S2C_AppearArrow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearArrow& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearArrow* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearArrow*>(
               &_S2C_AppearArrow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S2C_AppearArrow& a, S2C_AppearArrow& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearArrow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearArrow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearArrow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearArrow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearArrow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearArrow& from) {
    S2C_AppearArrow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearArrow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearArrow";
  }
  protected:
  explicit S2C_AppearArrow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kRotationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // .Protocol.SVector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearArrow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_MovementProjectile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MovementProjectile) */ {
 public:
  inline S2C_MovementProjectile() : S2C_MovementProjectile(nullptr) {}
  ~S2C_MovementProjectile() override;
  explicit PROTOBUF_CONSTEXPR S2C_MovementProjectile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MovementProjectile(const S2C_MovementProjectile& from);
  S2C_MovementProjectile(S2C_MovementProjectile&& from) noexcept
    : S2C_MovementProjectile() {
    *this = ::std::move(from);
  }

  inline S2C_MovementProjectile& operator=(const S2C_MovementProjectile& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MovementProjectile& operator=(S2C_MovementProjectile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MovementProjectile& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MovementProjectile* internal_default_instance() {
    return reinterpret_cast<const S2C_MovementProjectile*>(
               &_S2C_MovementProjectile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S2C_MovementProjectile& a, S2C_MovementProjectile& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MovementProjectile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MovementProjectile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MovementProjectile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MovementProjectile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MovementProjectile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MovementProjectile& from) {
    S2C_MovementProjectile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MovementProjectile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MovementProjectile";
  }
  protected:
  explicit S2C_MovementProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // .Protocol.SVector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MovementProjectile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearEnemy) */ {
 public:
  inline S2C_AppearEnemy() : S2C_AppearEnemy(nullptr) {}
  ~S2C_AppearEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearEnemy(const S2C_AppearEnemy& from);
  S2C_AppearEnemy(S2C_AppearEnemy&& from) noexcept
    : S2C_AppearEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_AppearEnemy& operator=(const S2C_AppearEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearEnemy& operator=(S2C_AppearEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearEnemy*>(
               &_S2C_AppearEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S2C_AppearEnemy& a, S2C_AppearEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearEnemy& from) {
    S2C_AppearEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearEnemy";
  }
  protected:
  explicit S2C_AppearEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 4,
    kCurLocationFieldNumber = 5,
    kMoveLocationFieldNumber = 6,
    kObjectIdFieldNumber = 1,
    kEnemyIdFieldNumber = 2,
    kStateFieldNumber = 3,
    kTimestampFieldNumber = 7,
  };
  // repeated .Protocol.SStat stats = 4;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::Protocol::SStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
      mutable_stats();
  private:
  const ::Protocol::SStat& _internal_stats(int index) const;
  ::Protocol::SStat* _internal_add_stats();
  public:
  const ::Protocol::SStat& stats(int index) const;
  ::Protocol::SStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
      stats() const;

  // .Protocol.SVector cur_location = 5;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 6;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int32 enemy_id = 2;
  void clear_enemy_id();
  int32_t enemy_id() const;
  void set_enemy_id(int32_t value);
  private:
  int32_t _internal_enemy_id() const;
  void _internal_set_enemy_id(int32_t value);
  public:

  // .Protocol.EEnemyState state = 3;
  void clear_state();
  ::Protocol::EEnemyState state() const;
  void set_state(::Protocol::EEnemyState value);
  private:
  ::Protocol::EEnemyState _internal_state() const;
  void _internal_set_state(::Protocol::EEnemyState value);
  public:

  // int64 timestamp = 7;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat > stats_;
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    int64_t object_id_;
    int32_t enemy_id_;
    int state_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DetectChangeEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DetectChangeEnemy) */ {
 public:
  inline S2C_DetectChangeEnemy() : S2C_DetectChangeEnemy(nullptr) {}
  ~S2C_DetectChangeEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_DetectChangeEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DetectChangeEnemy(const S2C_DetectChangeEnemy& from);
  S2C_DetectChangeEnemy(S2C_DetectChangeEnemy&& from) noexcept
    : S2C_DetectChangeEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_DetectChangeEnemy& operator=(const S2C_DetectChangeEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DetectChangeEnemy& operator=(S2C_DetectChangeEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DetectChangeEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DetectChangeEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_DetectChangeEnemy*>(
               &_S2C_DetectChangeEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S2C_DetectChangeEnemy& a, S2C_DetectChangeEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DetectChangeEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DetectChangeEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DetectChangeEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DetectChangeEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DetectChangeEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DetectChangeEnemy& from) {
    S2C_DetectChangeEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DetectChangeEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DetectChangeEnemy";
  }
  protected:
  explicit S2C_DetectChangeEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kStateFieldNumber = 3,
  };
  // repeated .Protocol.SStat stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::Protocol::SStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
      mutable_stats();
  private:
  const ::Protocol::SStat& _internal_stats(int index) const;
  ::Protocol::SStat* _internal_add_stats();
  public:
  const ::Protocol::SStat& stats(int index) const;
  ::Protocol::SStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
      stats() const;

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .Protocol.EEnemyState state = 3;
  void clear_state();
  ::Protocol::EEnemyState state() const;
  void set_state(::Protocol::EEnemyState value);
  private:
  ::Protocol::EEnemyState _internal_state() const;
  void _internal_set_state(::Protocol::EEnemyState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DetectChangeEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat > stats_;
    int64_t object_id_;
    int64_t timestamp_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_MovementEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MovementEnemy) */ {
 public:
  inline S2C_MovementEnemy() : S2C_MovementEnemy(nullptr) {}
  ~S2C_MovementEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_MovementEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MovementEnemy(const S2C_MovementEnemy& from);
  S2C_MovementEnemy(S2C_MovementEnemy&& from) noexcept
    : S2C_MovementEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_MovementEnemy& operator=(const S2C_MovementEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MovementEnemy& operator=(S2C_MovementEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MovementEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MovementEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_MovementEnemy*>(
               &_S2C_MovementEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S2C_MovementEnemy& a, S2C_MovementEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MovementEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MovementEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MovementEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MovementEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MovementEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MovementEnemy& from) {
    S2C_MovementEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MovementEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MovementEnemy";
  }
  protected:
  explicit S2C_MovementEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 2,
    kMoveLocationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // .Protocol.SVector cur_location = 2;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 3;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MovementEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnemyAutoAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnemyAutoAttack) */ {
 public:
  inline S2C_EnemyAutoAttack() : S2C_EnemyAutoAttack(nullptr) {}
  ~S2C_EnemyAutoAttack() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnemyAutoAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnemyAutoAttack(const S2C_EnemyAutoAttack& from);
  S2C_EnemyAutoAttack(S2C_EnemyAutoAttack&& from) noexcept
    : S2C_EnemyAutoAttack() {
    *this = ::std::move(from);
  }

  inline S2C_EnemyAutoAttack& operator=(const S2C_EnemyAutoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnemyAutoAttack& operator=(S2C_EnemyAutoAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnemyAutoAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnemyAutoAttack* internal_default_instance() {
    return reinterpret_cast<const S2C_EnemyAutoAttack*>(
               &_S2C_EnemyAutoAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S2C_EnemyAutoAttack& a, S2C_EnemyAutoAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnemyAutoAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnemyAutoAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnemyAutoAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnemyAutoAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnemyAutoAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnemyAutoAttack& from) {
    S2C_EnemyAutoAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnemyAutoAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnemyAutoAttack";
  }
  protected:
  explicit S2C_EnemyAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // .Protocol.SRotator rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnemyAutoAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SRotator* rotation_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_HitEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_HitEnemy) */ {
 public:
  inline S2C_HitEnemy() : S2C_HitEnemy(nullptr) {}
  ~S2C_HitEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_HitEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_HitEnemy(const S2C_HitEnemy& from);
  S2C_HitEnemy(S2C_HitEnemy&& from) noexcept
    : S2C_HitEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_HitEnemy& operator=(const S2C_HitEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_HitEnemy& operator=(S2C_HitEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_HitEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_HitEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_HitEnemy*>(
               &_S2C_HitEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S2C_HitEnemy& a, S2C_HitEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_HitEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_HitEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_HitEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_HitEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_HitEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_HitEnemy& from) {
    S2C_HitEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_HitEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_HitEnemy";
  }
  protected:
  explicit S2C_HitEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_HitEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DeathEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DeathEnemy) */ {
 public:
  inline S2C_DeathEnemy() : S2C_DeathEnemy(nullptr) {}
  ~S2C_DeathEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_DeathEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DeathEnemy(const S2C_DeathEnemy& from);
  S2C_DeathEnemy(S2C_DeathEnemy&& from) noexcept
    : S2C_DeathEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_DeathEnemy& operator=(const S2C_DeathEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DeathEnemy& operator=(S2C_DeathEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DeathEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DeathEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_DeathEnemy*>(
               &_S2C_DeathEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S2C_DeathEnemy& a, S2C_DeathEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DeathEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DeathEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DeathEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DeathEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DeathEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DeathEnemy& from) {
    S2C_DeathEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DeathEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DeathEnemy";
  }
  protected:
  explicit S2C_DeathEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DeathEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DisAppearGameObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DisAppearGameObject) */ {
 public:
  inline S2C_DisAppearGameObject() : S2C_DisAppearGameObject(nullptr) {}
  ~S2C_DisAppearGameObject() override;
  explicit PROTOBUF_CONSTEXPR S2C_DisAppearGameObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DisAppearGameObject(const S2C_DisAppearGameObject& from);
  S2C_DisAppearGameObject(S2C_DisAppearGameObject&& from) noexcept
    : S2C_DisAppearGameObject() {
    *this = ::std::move(from);
  }

  inline S2C_DisAppearGameObject& operator=(const S2C_DisAppearGameObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DisAppearGameObject& operator=(S2C_DisAppearGameObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DisAppearGameObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DisAppearGameObject* internal_default_instance() {
    return reinterpret_cast<const S2C_DisAppearGameObject*>(
               &_S2C_DisAppearGameObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S2C_DisAppearGameObject& a, S2C_DisAppearGameObject& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DisAppearGameObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DisAppearGameObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DisAppearGameObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DisAppearGameObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DisAppearGameObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DisAppearGameObject& from) {
    S2C_DisAppearGameObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DisAppearGameObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DisAppearGameObject";
  }
  protected:
  explicit S2C_DisAppearGameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DisAppearGameObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadInventory) */ {
 public:
  inline C2S_LoadInventory() : C2S_LoadInventory(nullptr) {}
  ~C2S_LoadInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_LoadInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadInventory(const C2S_LoadInventory& from);
  C2S_LoadInventory(C2S_LoadInventory&& from) noexcept
    : C2S_LoadInventory() {
    *this = ::std::move(from);
  }

  inline C2S_LoadInventory& operator=(const C2S_LoadInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadInventory& operator=(C2S_LoadInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadInventory*>(
               &_C2S_LoadInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C2S_LoadInventory& a, C2S_LoadInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LoadInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LoadInventory& from) {
    C2S_LoadInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoadInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadInventory";
  }
  protected:
  explicit C2S_LoadInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadInventory) */ {
 public:
  inline S2C_LoadInventory() : S2C_LoadInventory(nullptr) {}
  ~S2C_LoadInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadInventory(const S2C_LoadInventory& from);
  S2C_LoadInventory(S2C_LoadInventory&& from) noexcept
    : S2C_LoadInventory() {
    *this = ::std::move(from);
  }

  inline S2C_LoadInventory& operator=(const S2C_LoadInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadInventory& operator=(S2C_LoadInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadInventory*>(
               &_S2C_LoadInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S2C_LoadInventory& a, S2C_LoadInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadInventory& from) {
    S2C_LoadInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadInventory";
  }
  protected:
  explicit S2C_LoadInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kEqipmentFieldNumber = 2,
    kMoneyFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .Protocol.SItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Protocol::SItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_item();
  private:
  const ::Protocol::SItem& _internal_item(int index) const;
  ::Protocol::SItem* _internal_add_item();
  public:
  const ::Protocol::SItem& item(int index) const;
  ::Protocol::SItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      item() const;

  // repeated .Protocol.SItem eqipment = 2;
  int eqipment_size() const;
  private:
  int _internal_eqipment_size() const;
  public:
  void clear_eqipment();
  ::Protocol::SItem* mutable_eqipment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_eqipment();
  private:
  const ::Protocol::SItem& _internal_eqipment(int index) const;
  ::Protocol::SItem* _internal_add_eqipment();
  public:
  const ::Protocol::SItem& eqipment(int index) const;
  ::Protocol::SItem* add_eqipment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      eqipment() const;

  // int32 money = 3;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // int32 error = 4;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > item_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > eqipment_;
    int32_t money_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_InsertInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_InsertInventory) */ {
 public:
  inline C2S_InsertInventory() : C2S_InsertInventory(nullptr) {}
  ~C2S_InsertInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_InsertInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_InsertInventory(const C2S_InsertInventory& from);
  C2S_InsertInventory(C2S_InsertInventory&& from) noexcept
    : C2S_InsertInventory() {
    *this = ::std::move(from);
  }

  inline C2S_InsertInventory& operator=(const C2S_InsertInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_InsertInventory& operator=(C2S_InsertInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_InsertInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_InsertInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_InsertInventory*>(
               &_C2S_InsertInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C2S_InsertInventory& a, C2S_InsertInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_InsertInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_InsertInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_InsertInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_InsertInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_InsertInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_InsertInventory& from) {
    C2S_InsertInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_InsertInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_InsertInventory";
  }
  protected:
  explicit C2S_InsertInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_InsertInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_InsertInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_InsertInventory) */ {
 public:
  inline S2C_InsertInventory() : S2C_InsertInventory(nullptr) {}
  ~S2C_InsertInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_InsertInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_InsertInventory(const S2C_InsertInventory& from);
  S2C_InsertInventory(S2C_InsertInventory&& from) noexcept
    : S2C_InsertInventory() {
    *this = ::std::move(from);
  }

  inline S2C_InsertInventory& operator=(const S2C_InsertInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_InsertInventory& operator=(S2C_InsertInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_InsertInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_InsertInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_InsertInventory*>(
               &_S2C_InsertInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S2C_InsertInventory& a, S2C_InsertInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_InsertInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_InsertInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_InsertInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_InsertInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_InsertInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_InsertInventory& from) {
    S2C_InsertInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_InsertInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_InsertInventory";
  }
  protected:
  explicit S2C_InsertInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int32 error = 3;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_InsertInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t object_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_UpdateInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_UpdateInventory) */ {
 public:
  inline C2S_UpdateInventory() : C2S_UpdateInventory(nullptr) {}
  ~C2S_UpdateInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_UpdateInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_UpdateInventory(const C2S_UpdateInventory& from);
  C2S_UpdateInventory(C2S_UpdateInventory&& from) noexcept
    : C2S_UpdateInventory() {
    *this = ::std::move(from);
  }

  inline C2S_UpdateInventory& operator=(const C2S_UpdateInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_UpdateInventory& operator=(C2S_UpdateInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_UpdateInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_UpdateInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_UpdateInventory*>(
               &_C2S_UpdateInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C2S_UpdateInventory& a, C2S_UpdateInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_UpdateInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_UpdateInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_UpdateInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_UpdateInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_UpdateInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_UpdateInventory& from) {
    C2S_UpdateInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_UpdateInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_UpdateInventory";
  }
  protected:
  explicit C2S_UpdateInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_UpdateInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_UpdateInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_UpdateInventory) */ {
 public:
  inline S2C_UpdateInventory() : S2C_UpdateInventory(nullptr) {}
  ~S2C_UpdateInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_UpdateInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_UpdateInventory(const S2C_UpdateInventory& from);
  S2C_UpdateInventory(S2C_UpdateInventory&& from) noexcept
    : S2C_UpdateInventory() {
    *this = ::std::move(from);
  }

  inline S2C_UpdateInventory& operator=(const S2C_UpdateInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_UpdateInventory& operator=(S2C_UpdateInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_UpdateInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_UpdateInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_UpdateInventory*>(
               &_S2C_UpdateInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S2C_UpdateInventory& a, S2C_UpdateInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_UpdateInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_UpdateInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_UpdateInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_UpdateInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_UpdateInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_UpdateInventory& from) {
    S2C_UpdateInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_UpdateInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_UpdateInventory";
  }
  protected:
  explicit S2C_UpdateInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_UpdateInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_DeleteInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_DeleteInventory) */ {
 public:
  inline C2S_DeleteInventory() : C2S_DeleteInventory(nullptr) {}
  ~C2S_DeleteInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_DeleteInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_DeleteInventory(const C2S_DeleteInventory& from);
  C2S_DeleteInventory(C2S_DeleteInventory&& from) noexcept
    : C2S_DeleteInventory() {
    *this = ::std::move(from);
  }

  inline C2S_DeleteInventory& operator=(const C2S_DeleteInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_DeleteInventory& operator=(C2S_DeleteInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_DeleteInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_DeleteInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_DeleteInventory*>(
               &_C2S_DeleteInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(C2S_DeleteInventory& a, C2S_DeleteInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_DeleteInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_DeleteInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_DeleteInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_DeleteInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_DeleteInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_DeleteInventory& from) {
    C2S_DeleteInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_DeleteInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_DeleteInventory";
  }
  protected:
  explicit C2S_DeleteInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kLocationFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // .Protocol.SVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_DeleteInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    ::Protocol::SVector* location_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DeleteInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DeleteInventory) */ {
 public:
  inline S2C_DeleteInventory() : S2C_DeleteInventory(nullptr) {}
  ~S2C_DeleteInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_DeleteInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DeleteInventory(const S2C_DeleteInventory& from);
  S2C_DeleteInventory(S2C_DeleteInventory&& from) noexcept
    : S2C_DeleteInventory() {
    *this = ::std::move(from);
  }

  inline S2C_DeleteInventory& operator=(const S2C_DeleteInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DeleteInventory& operator=(S2C_DeleteInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DeleteInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DeleteInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_DeleteInventory*>(
               &_S2C_DeleteInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(S2C_DeleteInventory& a, S2C_DeleteInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DeleteInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DeleteInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DeleteInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DeleteInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DeleteInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DeleteInventory& from) {
    S2C_DeleteInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DeleteInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DeleteInventory";
  }
  protected:
  explicit S2C_DeleteInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 3,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 3;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DeleteInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RollbackInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RollbackInventory) */ {
 public:
  inline S2C_RollbackInventory() : S2C_RollbackInventory(nullptr) {}
  ~S2C_RollbackInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_RollbackInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RollbackInventory(const S2C_RollbackInventory& from);
  S2C_RollbackInventory(S2C_RollbackInventory&& from) noexcept
    : S2C_RollbackInventory() {
    *this = ::std::move(from);
  }

  inline S2C_RollbackInventory& operator=(const S2C_RollbackInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RollbackInventory& operator=(S2C_RollbackInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RollbackInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RollbackInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_RollbackInventory*>(
               &_S2C_RollbackInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(S2C_RollbackInventory& a, S2C_RollbackInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RollbackInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RollbackInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RollbackInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RollbackInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RollbackInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RollbackInventory& from) {
    S2C_RollbackInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RollbackInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RollbackInventory";
  }
  protected:
  explicit S2C_RollbackInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RollbackInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t remote_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_ReplaceEqipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_ReplaceEqipment) */ {
 public:
  inline C2S_ReplaceEqipment() : C2S_ReplaceEqipment(nullptr) {}
  ~C2S_ReplaceEqipment() override;
  explicit PROTOBUF_CONSTEXPR C2S_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_ReplaceEqipment(const C2S_ReplaceEqipment& from);
  C2S_ReplaceEqipment(C2S_ReplaceEqipment&& from) noexcept
    : C2S_ReplaceEqipment() {
    *this = ::std::move(from);
  }

  inline C2S_ReplaceEqipment& operator=(const C2S_ReplaceEqipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ReplaceEqipment& operator=(C2S_ReplaceEqipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_ReplaceEqipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_ReplaceEqipment* internal_default_instance() {
    return reinterpret_cast<const C2S_ReplaceEqipment*>(
               &_C2S_ReplaceEqipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(C2S_ReplaceEqipment& a, C2S_ReplaceEqipment& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ReplaceEqipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_ReplaceEqipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_ReplaceEqipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_ReplaceEqipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_ReplaceEqipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_ReplaceEqipment& from) {
    C2S_ReplaceEqipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_ReplaceEqipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_ReplaceEqipment";
  }
  protected:
  explicit C2S_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertInvenItemFieldNumber = 2,
    kInsertEqipItemFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kPartFieldNumber = 4,
  };
  // .Protocol.SItem insert_inven_item = 2;
  bool has_insert_inven_item() const;
  private:
  bool _internal_has_insert_inven_item() const;
  public:
  void clear_insert_inven_item();
  const ::Protocol::SItem& insert_inven_item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_insert_inven_item();
  ::Protocol::SItem* mutable_insert_inven_item();
  void set_allocated_insert_inven_item(::Protocol::SItem* insert_inven_item);
  private:
  const ::Protocol::SItem& _internal_insert_inven_item() const;
  ::Protocol::SItem* _internal_mutable_insert_inven_item();
  public:
  void unsafe_arena_set_allocated_insert_inven_item(
      ::Protocol::SItem* insert_inven_item);
  ::Protocol::SItem* unsafe_arena_release_insert_inven_item();

  // .Protocol.SItem insert_eqip_item = 3;
  bool has_insert_eqip_item() const;
  private:
  bool _internal_has_insert_eqip_item() const;
  public:
  void clear_insert_eqip_item();
  const ::Protocol::SItem& insert_eqip_item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_insert_eqip_item();
  ::Protocol::SItem* mutable_insert_eqip_item();
  void set_allocated_insert_eqip_item(::Protocol::SItem* insert_eqip_item);
  private:
  const ::Protocol::SItem& _internal_insert_eqip_item() const;
  ::Protocol::SItem* _internal_mutable_insert_eqip_item();
  public:
  void unsafe_arena_set_allocated_insert_eqip_item(
      ::Protocol::SItem* insert_eqip_item);
  ::Protocol::SItem* unsafe_arena_release_insert_eqip_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .Protocol.ECharacterPart part = 4;
  void clear_part();
  ::Protocol::ECharacterPart part() const;
  void set_part(::Protocol::ECharacterPart value);
  private:
  ::Protocol::ECharacterPart _internal_part() const;
  void _internal_set_part(::Protocol::ECharacterPart value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_ReplaceEqipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* insert_inven_item_;
    ::Protocol::SItem* insert_eqip_item_;
    int64_t timestamp_;
    int part_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ReplaceEqipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ReplaceEqipment) */ {
 public:
  inline S2C_ReplaceEqipment() : S2C_ReplaceEqipment(nullptr) {}
  ~S2C_ReplaceEqipment() override;
  explicit PROTOBUF_CONSTEXPR S2C_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ReplaceEqipment(const S2C_ReplaceEqipment& from);
  S2C_ReplaceEqipment(S2C_ReplaceEqipment&& from) noexcept
    : S2C_ReplaceEqipment() {
    *this = ::std::move(from);
  }

  inline S2C_ReplaceEqipment& operator=(const S2C_ReplaceEqipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ReplaceEqipment& operator=(S2C_ReplaceEqipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ReplaceEqipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ReplaceEqipment* internal_default_instance() {
    return reinterpret_cast<const S2C_ReplaceEqipment*>(
               &_S2C_ReplaceEqipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(S2C_ReplaceEqipment& a, S2C_ReplaceEqipment& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ReplaceEqipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ReplaceEqipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ReplaceEqipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ReplaceEqipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ReplaceEqipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ReplaceEqipment& from) {
    S2C_ReplaceEqipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ReplaceEqipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ReplaceEqipment";
  }
  protected:
  explicit S2C_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEqipmentFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 3,
  };
  // .Protocol.SCharacterEqipment eqipment = 2;
  bool has_eqipment() const;
  private:
  bool _internal_has_eqipment() const;
  public:
  void clear_eqipment();
  const ::Protocol::SCharacterEqipment& eqipment() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterEqipment* release_eqipment();
  ::Protocol::SCharacterEqipment* mutable_eqipment();
  void set_allocated_eqipment(::Protocol::SCharacterEqipment* eqipment);
  private:
  const ::Protocol::SCharacterEqipment& _internal_eqipment() const;
  ::Protocol::SCharacterEqipment* _internal_mutable_eqipment();
  public:
  void unsafe_arena_set_allocated_eqipment(
      ::Protocol::SCharacterEqipment* eqipment);
  ::Protocol::SCharacterEqipment* unsafe_arena_release_eqipment();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 3;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ReplaceEqipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SCharacterEqipment* eqipment_;
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_EnterGameServer

// bytes token = 1;
inline void C2S_EnterGameServer::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& C2S_EnterGameServer::token() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EnterGameServer.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_EnterGameServer::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_EnterGameServer.token)
}
inline std::string* C2S_EnterGameServer::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_EnterGameServer.token)
  return _s;
}
inline const std::string& C2S_EnterGameServer::_internal_token() const {
  return _impl_.token_.Get();
}
inline void C2S_EnterGameServer::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_EnterGameServer::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_EnterGameServer::release_token() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_EnterGameServer.token)
  return _impl_.token_.Release();
}
inline void C2S_EnterGameServer::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_EnterGameServer.token)
}

// -------------------------------------------------------------------

// S2C_EnterGameServer

// int64 remote_id = 1;
inline void S2C_EnterGameServer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_EnterGameServer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_EnterGameServer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.remote_id)
  return _internal_remote_id();
}
inline void S2C_EnterGameServer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_EnterGameServer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterGameServer.remote_id)
}

// .Protocol.SCharacterData character_data = 2;
inline bool S2C_EnterGameServer::_internal_has_character_data() const {
  return this != internal_default_instance() && _impl_.character_data_ != nullptr;
}
inline bool S2C_EnterGameServer::has_character_data() const {
  return _internal_has_character_data();
}
inline const ::Protocol::SCharacterData& S2C_EnterGameServer::_internal_character_data() const {
  const ::Protocol::SCharacterData* p = _impl_.character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& S2C_EnterGameServer::character_data() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.character_data)
  return _internal_character_data();
}
inline void S2C_EnterGameServer::unsafe_arena_set_allocated_character_data(
    ::Protocol::SCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  _impl_.character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_EnterGameServer.character_data)
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::release_character_data() {
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnterGameServer.character_data)
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::_internal_mutable_character_data() {
  
  if (_impl_.character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.character_data_ = p;
  }
  return _impl_.character_data_;
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::mutable_character_data() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.character_data)
  return _msg;
}
inline void S2C_EnterGameServer::set_allocated_character_data(::Protocol::SCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data));
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnterGameServer.character_data)
}

// repeated .Protocol.SItem item = 3;
inline int S2C_EnterGameServer::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int S2C_EnterGameServer::item_size() const {
  return _internal_item_size();
}
inline ::Protocol::SItem* S2C_EnterGameServer::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_EnterGameServer::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_EnterGameServer.item)
  return &_impl_.item_;
}
inline const ::Protocol::SItem& S2C_EnterGameServer::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::Protocol::SItem& S2C_EnterGameServer::item(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.item)
  return _internal_item(index);
}
inline ::Protocol::SItem* S2C_EnterGameServer::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::Protocol::SItem* S2C_EnterGameServer::add_item() {
  ::Protocol::SItem* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:Protocol.S2C_EnterGameServer.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_EnterGameServer::item() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_EnterGameServer.item)
  return _impl_.item_;
}

// repeated .Protocol.SItem eqipment = 4;
inline int S2C_EnterGameServer::_internal_eqipment_size() const {
  return _impl_.eqipment_.size();
}
inline int S2C_EnterGameServer::eqipment_size() const {
  return _internal_eqipment_size();
}
inline ::Protocol::SItem* S2C_EnterGameServer::mutable_eqipment(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.eqipment)
  return _impl_.eqipment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_EnterGameServer::mutable_eqipment() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_EnterGameServer.eqipment)
  return &_impl_.eqipment_;
}
inline const ::Protocol::SItem& S2C_EnterGameServer::_internal_eqipment(int index) const {
  return _impl_.eqipment_.Get(index);
}
inline const ::Protocol::SItem& S2C_EnterGameServer::eqipment(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.eqipment)
  return _internal_eqipment(index);
}
inline ::Protocol::SItem* S2C_EnterGameServer::_internal_add_eqipment() {
  return _impl_.eqipment_.Add();
}
inline ::Protocol::SItem* S2C_EnterGameServer::add_eqipment() {
  ::Protocol::SItem* _add = _internal_add_eqipment();
  // @@protoc_insertion_point(field_add:Protocol.S2C_EnterGameServer.eqipment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_EnterGameServer::eqipment() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_EnterGameServer.eqipment)
  return _impl_.eqipment_;
}

// int32 money = 5;
inline void S2C_EnterGameServer::clear_money() {
  _impl_.money_ = 0;
}
inline int32_t S2C_EnterGameServer::_internal_money() const {
  return _impl_.money_;
}
inline int32_t S2C_EnterGameServer::money() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.money)
  return _internal_money();
}
inline void S2C_EnterGameServer::_internal_set_money(int32_t value) {
  
  _impl_.money_ = value;
}
inline void S2C_EnterGameServer::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterGameServer.money)
}

// .Protocol.STransform transform = 6;
inline bool S2C_EnterGameServer::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool S2C_EnterGameServer::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::STransform& S2C_EnterGameServer::_internal_transform() const {
  const ::Protocol::STransform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::STransform&>(
      ::Protocol::_STransform_default_instance_);
}
inline const ::Protocol::STransform& S2C_EnterGameServer::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.transform)
  return _internal_transform();
}
inline void S2C_EnterGameServer::unsafe_arena_set_allocated_transform(
    ::Protocol::STransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_EnterGameServer.transform)
}
inline ::Protocol::STransform* S2C_EnterGameServer::release_transform() {
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::STransform* S2C_EnterGameServer::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnterGameServer.transform)
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::Protocol::STransform* S2C_EnterGameServer::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::STransform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::Protocol::STransform* S2C_EnterGameServer::mutable_transform() {
  ::Protocol::STransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.transform)
  return _msg;
}
inline void S2C_EnterGameServer::set_allocated_transform(::Protocol::STransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnterGameServer.transform)
}

// int32 error = 7;
inline void S2C_EnterGameServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EnterGameServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EnterGameServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.error)
  return _internal_error();
}
inline void S2C_EnterGameServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EnterGameServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterGameServer.error)
}

// -------------------------------------------------------------------

// C2S_LeaveGameServer

// -------------------------------------------------------------------

// S2C_LeaveGameServer

// int64 remote_id = 1;
inline void S2C_LeaveGameServer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_LeaveGameServer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_LeaveGameServer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveGameServer.remote_id)
  return _internal_remote_id();
}
inline void S2C_LeaveGameServer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_LeaveGameServer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveGameServer.remote_id)
}

// int32 error = 2;
inline void S2C_LeaveGameServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LeaveGameServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LeaveGameServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveGameServer.error)
  return _internal_error();
}
inline void S2C_LeaveGameServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LeaveGameServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveGameServer.error)
}

// -------------------------------------------------------------------

// C2S_Tick

// .Protocol.SVector cur_location = 2;
inline bool C2S_Tick::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool C2S_Tick::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& C2S_Tick::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_Tick::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Tick.cur_location)
  return _internal_cur_location();
}
inline void C2S_Tick::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_Tick.cur_location)
}
inline ::Protocol::SVector* C2S_Tick::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_Tick::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Tick.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_Tick::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* C2S_Tick::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Tick.cur_location)
  return _msg;
}
inline void C2S_Tick::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Tick.cur_location)
}

// -------------------------------------------------------------------

// S2C_Tick

// -------------------------------------------------------------------

// S2C_AppearCharacter

// int64 remote_id = 1;
inline void S2C_AppearCharacter::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_AppearCharacter::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_AppearCharacter::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.remote_id)
  return _internal_remote_id();
}
inline void S2C_AppearCharacter::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_AppearCharacter::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearCharacter.remote_id)
}

// int64 timestamp = 2;
inline void S2C_AppearCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AppearCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AppearCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.timestamp)
  return _internal_timestamp();
}
inline void S2C_AppearCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AppearCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearCharacter.timestamp)
}

// .Protocol.SVector cur_location = 3;
inline bool S2C_AppearCharacter::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_AppearCharacter::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_AppearCharacter::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearCharacter::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.cur_location)
  return _internal_cur_location();
}
inline void S2C_AppearCharacter::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearCharacter.cur_location)
}
inline ::Protocol::SVector* S2C_AppearCharacter::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearCharacter.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_AppearCharacter::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearCharacter.cur_location)
  return _msg;
}
inline void S2C_AppearCharacter::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearCharacter.cur_location)
}

// .Protocol.SVector move_location = 4;
inline bool S2C_AppearCharacter::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_AppearCharacter::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_AppearCharacter::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearCharacter::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.move_location)
  return _internal_move_location();
}
inline void S2C_AppearCharacter::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearCharacter.move_location)
}
inline ::Protocol::SVector* S2C_AppearCharacter::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearCharacter.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_AppearCharacter::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearCharacter.move_location)
  return _msg;
}
inline void S2C_AppearCharacter::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearCharacter.move_location)
}

// .Protocol.SCharacterData character_data = 5;
inline bool S2C_AppearCharacter::_internal_has_character_data() const {
  return this != internal_default_instance() && _impl_.character_data_ != nullptr;
}
inline bool S2C_AppearCharacter::has_character_data() const {
  return _internal_has_character_data();
}
inline const ::Protocol::SCharacterData& S2C_AppearCharacter::_internal_character_data() const {
  const ::Protocol::SCharacterData* p = _impl_.character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& S2C_AppearCharacter::character_data() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.character_data)
  return _internal_character_data();
}
inline void S2C_AppearCharacter::unsafe_arena_set_allocated_character_data(
    ::Protocol::SCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  _impl_.character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearCharacter.character_data)
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::release_character_data() {
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearCharacter.character_data)
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::_internal_mutable_character_data() {
  
  if (_impl_.character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.character_data_ = p;
  }
  return _impl_.character_data_;
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::mutable_character_data() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearCharacter.character_data)
  return _msg;
}
inline void S2C_AppearCharacter::set_allocated_character_data(::Protocol::SCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data));
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearCharacter.character_data)
}

// -------------------------------------------------------------------

// S2C_DisAppearCharacter

// int64 remote_id = 1;
inline void S2C_DisAppearCharacter::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_DisAppearCharacter::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_DisAppearCharacter::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DisAppearCharacter.remote_id)
  return _internal_remote_id();
}
inline void S2C_DisAppearCharacter::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_DisAppearCharacter::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DisAppearCharacter.remote_id)
}

// -------------------------------------------------------------------

// C2S_MovementCharacter

// int64 timestamp = 1;
inline void C2S_MovementCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_MovementCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_MovementCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.timestamp)
  return _internal_timestamp();
}
inline void C2S_MovementCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_MovementCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_MovementCharacter.timestamp)
}

// .Protocol.SVector cur_location = 2;
inline bool C2S_MovementCharacter::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool C2S_MovementCharacter::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& C2S_MovementCharacter::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_MovementCharacter::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.cur_location)
  return _internal_cur_location();
}
inline void C2S_MovementCharacter::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MovementCharacter.cur_location)
}
inline ::Protocol::SVector* C2S_MovementCharacter::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MovementCharacter.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* C2S_MovementCharacter::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MovementCharacter.cur_location)
  return _msg;
}
inline void C2S_MovementCharacter::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MovementCharacter.cur_location)
}

// .Protocol.SVector move_location = 3;
inline bool C2S_MovementCharacter::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool C2S_MovementCharacter::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& C2S_MovementCharacter::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_MovementCharacter::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.move_location)
  return _internal_move_location();
}
inline void C2S_MovementCharacter::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MovementCharacter.move_location)
}
inline ::Protocol::SVector* C2S_MovementCharacter::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MovementCharacter.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* C2S_MovementCharacter::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MovementCharacter.move_location)
  return _msg;
}
inline void C2S_MovementCharacter::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MovementCharacter.move_location)
}

// .Protocol.SVector move_velocity = 4;
inline bool C2S_MovementCharacter::_internal_has_move_velocity() const {
  return this != internal_default_instance() && _impl_.move_velocity_ != nullptr;
}
inline bool C2S_MovementCharacter::has_move_velocity() const {
  return _internal_has_move_velocity();
}
inline const ::Protocol::SVector& C2S_MovementCharacter::_internal_move_velocity() const {
  const ::Protocol::SVector* p = _impl_.move_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_MovementCharacter::move_velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.move_velocity)
  return _internal_move_velocity();
}
inline void C2S_MovementCharacter::unsafe_arena_set_allocated_move_velocity(
    ::Protocol::SVector* move_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  _impl_.move_velocity_ = move_velocity;
  if (move_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MovementCharacter.move_velocity)
}
inline ::Protocol::SVector* C2S_MovementCharacter::release_move_velocity() {
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::unsafe_arena_release_move_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MovementCharacter.move_velocity)
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::_internal_mutable_move_velocity() {
  
  if (_impl_.move_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_velocity_ = p;
  }
  return _impl_.move_velocity_;
}
inline ::Protocol::SVector* C2S_MovementCharacter::mutable_move_velocity() {
  ::Protocol::SVector* _msg = _internal_mutable_move_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MovementCharacter.move_velocity)
  return _msg;
}
inline void C2S_MovementCharacter::set_allocated_move_velocity(::Protocol::SVector* move_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  if (move_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_velocity));
    if (message_arena != submessage_arena) {
      move_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_velocity_ = move_velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MovementCharacter.move_velocity)
}

// -------------------------------------------------------------------

// S2C_MovementCharacter

// int64 remote_id = 1;
inline void S2C_MovementCharacter::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_MovementCharacter::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_MovementCharacter::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.remote_id)
  return _internal_remote_id();
}
inline void S2C_MovementCharacter::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_MovementCharacter::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementCharacter.remote_id)
}

// int64 timestamp = 2;
inline void S2C_MovementCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_MovementCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_MovementCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.timestamp)
  return _internal_timestamp();
}
inline void S2C_MovementCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_MovementCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementCharacter.timestamp)
}

// .Protocol.SVector cur_location = 3;
inline bool S2C_MovementCharacter::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_MovementCharacter::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_MovementCharacter::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementCharacter::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.cur_location)
  return _internal_cur_location();
}
inline void S2C_MovementCharacter::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementCharacter.cur_location)
}
inline ::Protocol::SVector* S2C_MovementCharacter::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementCharacter.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_MovementCharacter::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementCharacter.cur_location)
  return _msg;
}
inline void S2C_MovementCharacter::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementCharacter.cur_location)
}

// .Protocol.SVector move_location = 4;
inline bool S2C_MovementCharacter::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_MovementCharacter::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_MovementCharacter::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementCharacter::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.move_location)
  return _internal_move_location();
}
inline void S2C_MovementCharacter::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementCharacter.move_location)
}
inline ::Protocol::SVector* S2C_MovementCharacter::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementCharacter.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_MovementCharacter::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementCharacter.move_location)
  return _msg;
}
inline void S2C_MovementCharacter::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementCharacter.move_location)
}

// .Protocol.SVector move_velocity = 5;
inline bool S2C_MovementCharacter::_internal_has_move_velocity() const {
  return this != internal_default_instance() && _impl_.move_velocity_ != nullptr;
}
inline bool S2C_MovementCharacter::has_move_velocity() const {
  return _internal_has_move_velocity();
}
inline const ::Protocol::SVector& S2C_MovementCharacter::_internal_move_velocity() const {
  const ::Protocol::SVector* p = _impl_.move_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementCharacter::move_velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.move_velocity)
  return _internal_move_velocity();
}
inline void S2C_MovementCharacter::unsafe_arena_set_allocated_move_velocity(
    ::Protocol::SVector* move_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  _impl_.move_velocity_ = move_velocity;
  if (move_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementCharacter.move_velocity)
}
inline ::Protocol::SVector* S2C_MovementCharacter::release_move_velocity() {
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::unsafe_arena_release_move_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementCharacter.move_velocity)
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::_internal_mutable_move_velocity() {
  
  if (_impl_.move_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_velocity_ = p;
  }
  return _impl_.move_velocity_;
}
inline ::Protocol::SVector* S2C_MovementCharacter::mutable_move_velocity() {
  ::Protocol::SVector* _msg = _internal_mutable_move_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementCharacter.move_velocity)
  return _msg;
}
inline void S2C_MovementCharacter::set_allocated_move_velocity(::Protocol::SVector* move_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  if (move_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_velocity));
    if (message_arena != submessage_arena) {
      move_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_velocity_ = move_velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementCharacter.move_velocity)
}

// -------------------------------------------------------------------

// C2S_PlayAnimation

// int64 timestamp = 1;
inline void C2S_PlayAnimation::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_PlayAnimation::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_PlayAnimation::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PlayAnimation.timestamp)
  return _internal_timestamp();
}
inline void C2S_PlayAnimation::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_PlayAnimation::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PlayAnimation.timestamp)
}

// -------------------------------------------------------------------

// S2C_PlayAnimation

// int64 remote_id = 1;
inline void S2C_PlayAnimation::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_PlayAnimation::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_PlayAnimation::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayAnimation.remote_id)
  return _internal_remote_id();
}
inline void S2C_PlayAnimation::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_PlayAnimation::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayAnimation.remote_id)
}

// int64 timestamp = 2;
inline void S2C_PlayAnimation::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_PlayAnimation::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_PlayAnimation::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayAnimation.timestamp)
  return _internal_timestamp();
}
inline void S2C_PlayAnimation::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_PlayAnimation::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayAnimation.timestamp)
}

// int32 type = 3;
inline void S2C_PlayAnimation::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t S2C_PlayAnimation::_internal_type() const {
  return _impl_.type_;
}
inline int32_t S2C_PlayAnimation::type() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayAnimation.type)
  return _internal_type();
}
inline void S2C_PlayAnimation::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void S2C_PlayAnimation::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayAnimation.type)
}

// -------------------------------------------------------------------

// C2S_PlayerAutoAttack

// int64 timestamp = 1;
inline void C2S_PlayerAutoAttack::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_PlayerAutoAttack::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_PlayerAutoAttack::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PlayerAutoAttack.timestamp)
  return _internal_timestamp();
}
inline void C2S_PlayerAutoAttack::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_PlayerAutoAttack::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PlayerAutoAttack.timestamp)
}

// int64 object_id = 2;
inline void C2S_PlayerAutoAttack::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t C2S_PlayerAutoAttack::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t C2S_PlayerAutoAttack::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PlayerAutoAttack.object_id)
  return _internal_object_id();
}
inline void C2S_PlayerAutoAttack::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void C2S_PlayerAutoAttack::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PlayerAutoAttack.object_id)
}

// -------------------------------------------------------------------

// S2C_PlayerAutoAttack

// int64 remote_id = 1;
inline void S2C_PlayerAutoAttack::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_PlayerAutoAttack::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_PlayerAutoAttack::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.remote_id)
  return _internal_remote_id();
}
inline void S2C_PlayerAutoAttack::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_PlayerAutoAttack::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerAutoAttack.remote_id)
}

// int32 combo = 2;
inline void S2C_PlayerAutoAttack::clear_combo() {
  _impl_.combo_ = 0;
}
inline int32_t S2C_PlayerAutoAttack::_internal_combo() const {
  return _impl_.combo_;
}
inline int32_t S2C_PlayerAutoAttack::combo() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.combo)
  return _internal_combo();
}
inline void S2C_PlayerAutoAttack::_internal_set_combo(int32_t value) {
  
  _impl_.combo_ = value;
}
inline void S2C_PlayerAutoAttack::set_combo(int32_t value) {
  _internal_set_combo(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerAutoAttack.combo)
}

// .Protocol.SRotator rotation = 3;
inline bool S2C_PlayerAutoAttack::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_PlayerAutoAttack::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_PlayerAutoAttack::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_PlayerAutoAttack::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.rotation)
  return _internal_rotation();
}
inline void S2C_PlayerAutoAttack::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_PlayerAutoAttack.rotation)
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_PlayerAutoAttack.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_PlayerAutoAttack.rotation)
  return _msg;
}
inline void S2C_PlayerAutoAttack::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_PlayerAutoAttack.rotation)
}

// int64 timestamp = 4;
inline void S2C_PlayerAutoAttack::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_PlayerAutoAttack::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_PlayerAutoAttack::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.timestamp)
  return _internal_timestamp();
}
inline void S2C_PlayerAutoAttack::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_PlayerAutoAttack::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerAutoAttack.timestamp)
}

// -------------------------------------------------------------------

// S2C_AppearItem

// .Protocol.SItem item = 1;
inline bool S2C_AppearItem::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool S2C_AppearItem::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& S2C_AppearItem::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& S2C_AppearItem::item() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearItem.item)
  return _internal_item();
}
inline void S2C_AppearItem::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearItem.item)
}
inline ::Protocol::SItem* S2C_AppearItem::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* S2C_AppearItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearItem.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* S2C_AppearItem::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* S2C_AppearItem::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearItem.item)
  return _msg;
}
inline void S2C_AppearItem::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearItem.item)
}

// -------------------------------------------------------------------

// S2C_AppearArrow

// int64 object_id = 1;
inline void S2C_AppearArrow::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AppearArrow::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AppearArrow::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.object_id)
  return _internal_object_id();
}
inline void S2C_AppearArrow::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AppearArrow::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearArrow.object_id)
}

// .Protocol.SVector location = 2;
inline bool S2C_AppearArrow::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_AppearArrow::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_AppearArrow::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearArrow::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.location)
  return _internal_location();
}
inline void S2C_AppearArrow::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearArrow.location)
}
inline ::Protocol::SVector* S2C_AppearArrow::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearArrow::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearArrow.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearArrow::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_AppearArrow::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearArrow.location)
  return _msg;
}
inline void S2C_AppearArrow::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearArrow.location)
}

// .Protocol.SRotator rotation = 3;
inline bool S2C_AppearArrow::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_AppearArrow::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_AppearArrow::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_AppearArrow::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.rotation)
  return _internal_rotation();
}
inline void S2C_AppearArrow::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearArrow.rotation)
}
inline ::Protocol::SRotator* S2C_AppearArrow::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearArrow::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearArrow.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearArrow::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_AppearArrow::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearArrow.rotation)
  return _msg;
}
inline void S2C_AppearArrow::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearArrow.rotation)
}

// int64 timestamp = 4;
inline void S2C_AppearArrow::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AppearArrow::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AppearArrow::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.timestamp)
  return _internal_timestamp();
}
inline void S2C_AppearArrow::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AppearArrow::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearArrow.timestamp)
}

// -------------------------------------------------------------------

// S2C_MovementProjectile

// int64 object_id = 1;
inline void S2C_MovementProjectile::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_MovementProjectile::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_MovementProjectile::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementProjectile.object_id)
  return _internal_object_id();
}
inline void S2C_MovementProjectile::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_MovementProjectile::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementProjectile.object_id)
}

// .Protocol.SVector location = 2;
inline bool S2C_MovementProjectile::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_MovementProjectile::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_MovementProjectile::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementProjectile::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementProjectile.location)
  return _internal_location();
}
inline void S2C_MovementProjectile::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementProjectile.location)
}
inline ::Protocol::SVector* S2C_MovementProjectile::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementProjectile::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementProjectile.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementProjectile::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_MovementProjectile::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementProjectile.location)
  return _msg;
}
inline void S2C_MovementProjectile::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementProjectile.location)
}

// int64 timestamp = 3;
inline void S2C_MovementProjectile::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_MovementProjectile::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_MovementProjectile::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementProjectile.timestamp)
  return _internal_timestamp();
}
inline void S2C_MovementProjectile::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_MovementProjectile::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementProjectile.timestamp)
}

// -------------------------------------------------------------------

// S2C_AppearEnemy

// int64 object_id = 1;
inline void S2C_AppearEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AppearEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AppearEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_AppearEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AppearEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.object_id)
}

// int32 enemy_id = 2;
inline void S2C_AppearEnemy::clear_enemy_id() {
  _impl_.enemy_id_ = 0;
}
inline int32_t S2C_AppearEnemy::_internal_enemy_id() const {
  return _impl_.enemy_id_;
}
inline int32_t S2C_AppearEnemy::enemy_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.enemy_id)
  return _internal_enemy_id();
}
inline void S2C_AppearEnemy::_internal_set_enemy_id(int32_t value) {
  
  _impl_.enemy_id_ = value;
}
inline void S2C_AppearEnemy::set_enemy_id(int32_t value) {
  _internal_set_enemy_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.enemy_id)
}

// .Protocol.EEnemyState state = 3;
inline void S2C_AppearEnemy::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::EEnemyState S2C_AppearEnemy::_internal_state() const {
  return static_cast< ::Protocol::EEnemyState >(_impl_.state_);
}
inline ::Protocol::EEnemyState S2C_AppearEnemy::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.state)
  return _internal_state();
}
inline void S2C_AppearEnemy::_internal_set_state(::Protocol::EEnemyState value) {
  
  _impl_.state_ = value;
}
inline void S2C_AppearEnemy::set_state(::Protocol::EEnemyState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.state)
}

// repeated .Protocol.SStat stats = 4;
inline int S2C_AppearEnemy::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int S2C_AppearEnemy::stats_size() const {
  return _internal_stats_size();
}
inline ::Protocol::SStat* S2C_AppearEnemy::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearEnemy.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
S2C_AppearEnemy::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_AppearEnemy.stats)
  return &_impl_.stats_;
}
inline const ::Protocol::SStat& S2C_AppearEnemy::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::Protocol::SStat& S2C_AppearEnemy::stats(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.stats)
  return _internal_stats(index);
}
inline ::Protocol::SStat* S2C_AppearEnemy::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::Protocol::SStat* S2C_AppearEnemy::add_stats() {
  ::Protocol::SStat* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:Protocol.S2C_AppearEnemy.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
S2C_AppearEnemy::stats() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_AppearEnemy.stats)
  return _impl_.stats_;
}

// .Protocol.SVector cur_location = 5;
inline bool S2C_AppearEnemy::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_AppearEnemy::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_AppearEnemy::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearEnemy::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.cur_location)
  return _internal_cur_location();
}
inline void S2C_AppearEnemy::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearEnemy.cur_location)
}
inline ::Protocol::SVector* S2C_AppearEnemy::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearEnemy.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_AppearEnemy::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearEnemy.cur_location)
  return _msg;
}
inline void S2C_AppearEnemy::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearEnemy.cur_location)
}

// .Protocol.SVector move_location = 6;
inline bool S2C_AppearEnemy::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_AppearEnemy::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_AppearEnemy::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearEnemy::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.move_location)
  return _internal_move_location();
}
inline void S2C_AppearEnemy::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearEnemy.move_location)
}
inline ::Protocol::SVector* S2C_AppearEnemy::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearEnemy.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_AppearEnemy::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearEnemy.move_location)
  return _msg;
}
inline void S2C_AppearEnemy::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearEnemy.move_location)
}

// int64 timestamp = 7;
inline void S2C_AppearEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AppearEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AppearEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_AppearEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AppearEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_DetectChangeEnemy

// int64 object_id = 1;
inline void S2C_DetectChangeEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_DetectChangeEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_DetectChangeEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_DetectChangeEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_DetectChangeEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangeEnemy.object_id)
}

// repeated .Protocol.SStat stats = 2;
inline int S2C_DetectChangeEnemy::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int S2C_DetectChangeEnemy::stats_size() const {
  return _internal_stats_size();
}
inline ::Protocol::SStat* S2C_DetectChangeEnemy::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DetectChangeEnemy.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
S2C_DetectChangeEnemy::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_DetectChangeEnemy.stats)
  return &_impl_.stats_;
}
inline const ::Protocol::SStat& S2C_DetectChangeEnemy::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::Protocol::SStat& S2C_DetectChangeEnemy::stats(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.stats)
  return _internal_stats(index);
}
inline ::Protocol::SStat* S2C_DetectChangeEnemy::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::Protocol::SStat* S2C_DetectChangeEnemy::add_stats() {
  ::Protocol::SStat* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:Protocol.S2C_DetectChangeEnemy.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
S2C_DetectChangeEnemy::stats() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_DetectChangeEnemy.stats)
  return _impl_.stats_;
}

// .Protocol.EEnemyState state = 3;
inline void S2C_DetectChangeEnemy::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::EEnemyState S2C_DetectChangeEnemy::_internal_state() const {
  return static_cast< ::Protocol::EEnemyState >(_impl_.state_);
}
inline ::Protocol::EEnemyState S2C_DetectChangeEnemy::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.state)
  return _internal_state();
}
inline void S2C_DetectChangeEnemy::_internal_set_state(::Protocol::EEnemyState value) {
  
  _impl_.state_ = value;
}
inline void S2C_DetectChangeEnemy::set_state(::Protocol::EEnemyState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangeEnemy.state)
}

// int64 timestamp = 4;
inline void S2C_DetectChangeEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_DetectChangeEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_DetectChangeEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_DetectChangeEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_DetectChangeEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangeEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_MovementEnemy

// int64 object_id = 1;
inline void S2C_MovementEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_MovementEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_MovementEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_MovementEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_MovementEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementEnemy.object_id)
}

// .Protocol.SVector cur_location = 2;
inline bool S2C_MovementEnemy::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_MovementEnemy::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_MovementEnemy::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementEnemy::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.cur_location)
  return _internal_cur_location();
}
inline void S2C_MovementEnemy::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementEnemy.cur_location)
}
inline ::Protocol::SVector* S2C_MovementEnemy::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementEnemy.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_MovementEnemy::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementEnemy.cur_location)
  return _msg;
}
inline void S2C_MovementEnemy::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementEnemy.cur_location)
}

// .Protocol.SVector move_location = 3;
inline bool S2C_MovementEnemy::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_MovementEnemy::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_MovementEnemy::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementEnemy::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.move_location)
  return _internal_move_location();
}
inline void S2C_MovementEnemy::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementEnemy.move_location)
}
inline ::Protocol::SVector* S2C_MovementEnemy::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementEnemy.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_MovementEnemy::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementEnemy.move_location)
  return _msg;
}
inline void S2C_MovementEnemy::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementEnemy.move_location)
}

// int64 timestamp = 4;
inline void S2C_MovementEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_MovementEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_MovementEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_MovementEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_MovementEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_EnemyAutoAttack

// int64 object_id = 1;
inline void S2C_EnemyAutoAttack::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_EnemyAutoAttack::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_EnemyAutoAttack::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnemyAutoAttack.object_id)
  return _internal_object_id();
}
inline void S2C_EnemyAutoAttack::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_EnemyAutoAttack::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnemyAutoAttack.object_id)
}

// .Protocol.SRotator rotation = 2;
inline bool S2C_EnemyAutoAttack::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_EnemyAutoAttack::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_EnemyAutoAttack::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_EnemyAutoAttack::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnemyAutoAttack.rotation)
  return _internal_rotation();
}
inline void S2C_EnemyAutoAttack::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_EnemyAutoAttack.rotation)
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnemyAutoAttack.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnemyAutoAttack.rotation)
  return _msg;
}
inline void S2C_EnemyAutoAttack::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnemyAutoAttack.rotation)
}

// int64 timestamp = 3;
inline void S2C_EnemyAutoAttack::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_EnemyAutoAttack::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_EnemyAutoAttack::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnemyAutoAttack.timestamp)
  return _internal_timestamp();
}
inline void S2C_EnemyAutoAttack::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_EnemyAutoAttack::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnemyAutoAttack.timestamp)
}

// -------------------------------------------------------------------

// S2C_HitEnemy

// int64 object_id = 1;
inline void S2C_HitEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_HitEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_HitEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_HitEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_HitEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_HitEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_HitEnemy.object_id)
}

// int64 timestamp = 3;
inline void S2C_HitEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_HitEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_HitEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_HitEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_HitEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_HitEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_HitEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_DeathEnemy

// int64 object_id = 1;
inline void S2C_DeathEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_DeathEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_DeathEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeathEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_DeathEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_DeathEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeathEnemy.object_id)
}

// int64 timestamp = 2;
inline void S2C_DeathEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_DeathEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_DeathEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeathEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_DeathEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_DeathEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeathEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_DisAppearGameObject

// int64 object_id = 1;
inline void S2C_DisAppearGameObject::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_DisAppearGameObject::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_DisAppearGameObject::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DisAppearGameObject.object_id)
  return _internal_object_id();
}
inline void S2C_DisAppearGameObject::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_DisAppearGameObject::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DisAppearGameObject.object_id)
}

// -------------------------------------------------------------------

// C2S_LoadInventory

// int64 timestamp = 1;
inline void C2S_LoadInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_LoadInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_LoadInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoadInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_LoadInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_LoadInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoadInventory.timestamp)
}

// -------------------------------------------------------------------

// S2C_LoadInventory

// repeated .Protocol.SItem item = 1;
inline int S2C_LoadInventory::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int S2C_LoadInventory::item_size() const {
  return _internal_item_size();
}
inline ::Protocol::SItem* S2C_LoadInventory::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadInventory.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_LoadInventory::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadInventory.item)
  return &_impl_.item_;
}
inline const ::Protocol::SItem& S2C_LoadInventory::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::Protocol::SItem& S2C_LoadInventory::item(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.item)
  return _internal_item(index);
}
inline ::Protocol::SItem* S2C_LoadInventory::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::Protocol::SItem* S2C_LoadInventory::add_item() {
  ::Protocol::SItem* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadInventory.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_LoadInventory::item() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadInventory.item)
  return _impl_.item_;
}

// repeated .Protocol.SItem eqipment = 2;
inline int S2C_LoadInventory::_internal_eqipment_size() const {
  return _impl_.eqipment_.size();
}
inline int S2C_LoadInventory::eqipment_size() const {
  return _internal_eqipment_size();
}
inline ::Protocol::SItem* S2C_LoadInventory::mutable_eqipment(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadInventory.eqipment)
  return _impl_.eqipment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_LoadInventory::mutable_eqipment() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadInventory.eqipment)
  return &_impl_.eqipment_;
}
inline const ::Protocol::SItem& S2C_LoadInventory::_internal_eqipment(int index) const {
  return _impl_.eqipment_.Get(index);
}
inline const ::Protocol::SItem& S2C_LoadInventory::eqipment(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.eqipment)
  return _internal_eqipment(index);
}
inline ::Protocol::SItem* S2C_LoadInventory::_internal_add_eqipment() {
  return _impl_.eqipment_.Add();
}
inline ::Protocol::SItem* S2C_LoadInventory::add_eqipment() {
  ::Protocol::SItem* _add = _internal_add_eqipment();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadInventory.eqipment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_LoadInventory::eqipment() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadInventory.eqipment)
  return _impl_.eqipment_;
}

// int32 money = 3;
inline void S2C_LoadInventory::clear_money() {
  _impl_.money_ = 0;
}
inline int32_t S2C_LoadInventory::_internal_money() const {
  return _impl_.money_;
}
inline int32_t S2C_LoadInventory::money() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.money)
  return _internal_money();
}
inline void S2C_LoadInventory::_internal_set_money(int32_t value) {
  
  _impl_.money_ = value;
}
inline void S2C_LoadInventory::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadInventory.money)
}

// int32 error = 4;
inline void S2C_LoadInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LoadInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LoadInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.error)
  return _internal_error();
}
inline void S2C_LoadInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LoadInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadInventory.error)
}

// -------------------------------------------------------------------

// C2S_InsertInventory

// int64 timestamp = 1;
inline void C2S_InsertInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_InsertInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_InsertInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_InsertInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_InsertInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_InsertInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_InsertInventory.timestamp)
}

// .Protocol.SItem item = 2;
inline bool C2S_InsertInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C2S_InsertInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& C2S_InsertInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_InsertInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_InsertInventory.item)
  return _internal_item();
}
inline void C2S_InsertInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_InsertInventory.item)
}
inline ::Protocol::SItem* C2S_InsertInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_InsertInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_InsertInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_InsertInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* C2S_InsertInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_InsertInventory.item)
  return _msg;
}
inline void C2S_InsertInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_InsertInventory.item)
}

// -------------------------------------------------------------------

// S2C_InsertInventory

// int64 remote_id = 1;
inline void S2C_InsertInventory::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_InsertInventory::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_InsertInventory::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InsertInventory.remote_id)
  return _internal_remote_id();
}
inline void S2C_InsertInventory::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_InsertInventory::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_InsertInventory.remote_id)
}

// int64 object_id = 2;
inline void S2C_InsertInventory::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_InsertInventory::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_InsertInventory::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InsertInventory.object_id)
  return _internal_object_id();
}
inline void S2C_InsertInventory::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_InsertInventory::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_InsertInventory.object_id)
}

// int32 error = 3;
inline void S2C_InsertInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_InsertInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_InsertInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InsertInventory.error)
  return _internal_error();
}
inline void S2C_InsertInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_InsertInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_InsertInventory.error)
}

// -------------------------------------------------------------------

// C2S_UpdateInventory

// int64 timestamp = 1;
inline void C2S_UpdateInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_UpdateInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_UpdateInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_UpdateInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_UpdateInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_UpdateInventory.timestamp)
}

// .Protocol.SItem item = 2;
inline bool C2S_UpdateInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C2S_UpdateInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& C2S_UpdateInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_UpdateInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateInventory.item)
  return _internal_item();
}
inline void C2S_UpdateInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_UpdateInventory.item)
}
inline ::Protocol::SItem* C2S_UpdateInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_UpdateInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_UpdateInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_UpdateInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* C2S_UpdateInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_UpdateInventory.item)
  return _msg;
}
inline void C2S_UpdateInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_UpdateInventory.item)
}

// -------------------------------------------------------------------

// S2C_UpdateInventory

// int32 error = 1;
inline void S2C_UpdateInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_UpdateInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_UpdateInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateInventory.error)
  return _internal_error();
}
inline void S2C_UpdateInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_UpdateInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateInventory.error)
}

// -------------------------------------------------------------------

// C2S_DeleteInventory

// int64 timestamp = 1;
inline void C2S_DeleteInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_DeleteInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_DeleteInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_DeleteInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_DeleteInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_DeleteInventory.timestamp)
}

// .Protocol.SItem item = 2;
inline bool C2S_DeleteInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C2S_DeleteInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& C2S_DeleteInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_DeleteInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteInventory.item)
  return _internal_item();
}
inline void C2S_DeleteInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_DeleteInventory.item)
}
inline ::Protocol::SItem* C2S_DeleteInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_DeleteInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_DeleteInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_DeleteInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* C2S_DeleteInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_DeleteInventory.item)
  return _msg;
}
inline void C2S_DeleteInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_DeleteInventory.item)
}

// .Protocol.SVector location = 3;
inline bool C2S_DeleteInventory::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool C2S_DeleteInventory::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& C2S_DeleteInventory::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_DeleteInventory::location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteInventory.location)
  return _internal_location();
}
inline void C2S_DeleteInventory::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_DeleteInventory.location)
}
inline ::Protocol::SVector* C2S_DeleteInventory::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_DeleteInventory::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_DeleteInventory.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_DeleteInventory::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* C2S_DeleteInventory::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_DeleteInventory.location)
  return _msg;
}
inline void C2S_DeleteInventory::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_DeleteInventory.location)
}

// -------------------------------------------------------------------

// S2C_DeleteInventory

// int64 remote_id = 1;
inline void S2C_DeleteInventory::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_DeleteInventory::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_DeleteInventory::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteInventory.remote_id)
  return _internal_remote_id();
}
inline void S2C_DeleteInventory::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_DeleteInventory::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeleteInventory.remote_id)
}

// .Protocol.SItem item = 2;
inline bool S2C_DeleteInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool S2C_DeleteInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& S2C_DeleteInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& S2C_DeleteInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteInventory.item)
  return _internal_item();
}
inline void S2C_DeleteInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DeleteInventory.item)
}
inline ::Protocol::SItem* S2C_DeleteInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* S2C_DeleteInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DeleteInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* S2C_DeleteInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* S2C_DeleteInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DeleteInventory.item)
  return _msg;
}
inline void S2C_DeleteInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DeleteInventory.item)
}

// int32 error = 3;
inline void S2C_DeleteInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_DeleteInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_DeleteInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteInventory.error)
  return _internal_error();
}
inline void S2C_DeleteInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_DeleteInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeleteInventory.error)
}

// -------------------------------------------------------------------

// S2C_RollbackInventory

// int64 remote_id = 1;
inline void S2C_RollbackInventory::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_RollbackInventory::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_RollbackInventory::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RollbackInventory.remote_id)
  return _internal_remote_id();
}
inline void S2C_RollbackInventory::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_RollbackInventory::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RollbackInventory.remote_id)
}

// .Protocol.SItem item = 2;
inline bool S2C_RollbackInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool S2C_RollbackInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& S2C_RollbackInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& S2C_RollbackInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RollbackInventory.item)
  return _internal_item();
}
inline void S2C_RollbackInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_RollbackInventory.item)
}
inline ::Protocol::SItem* S2C_RollbackInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* S2C_RollbackInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_RollbackInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* S2C_RollbackInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* S2C_RollbackInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_RollbackInventory.item)
  return _msg;
}
inline void S2C_RollbackInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_RollbackInventory.item)
}

// -------------------------------------------------------------------

// C2S_ReplaceEqipment

// int64 timestamp = 1;
inline void C2S_ReplaceEqipment::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_ReplaceEqipment::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_ReplaceEqipment::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.timestamp)
  return _internal_timestamp();
}
inline void C2S_ReplaceEqipment::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_ReplaceEqipment::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReplaceEqipment.timestamp)
}

// .Protocol.SItem insert_inven_item = 2;
inline bool C2S_ReplaceEqipment::_internal_has_insert_inven_item() const {
  return this != internal_default_instance() && _impl_.insert_inven_item_ != nullptr;
}
inline bool C2S_ReplaceEqipment::has_insert_inven_item() const {
  return _internal_has_insert_inven_item();
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::_internal_insert_inven_item() const {
  const ::Protocol::SItem* p = _impl_.insert_inven_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::insert_inven_item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.insert_inven_item)
  return _internal_insert_inven_item();
}
inline void C2S_ReplaceEqipment::unsafe_arena_set_allocated_insert_inven_item(
    ::Protocol::SItem* insert_inven_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_inven_item_);
  }
  _impl_.insert_inven_item_ = insert_inven_item;
  if (insert_inven_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_ReplaceEqipment.insert_inven_item)
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::release_insert_inven_item() {
  
  ::Protocol::SItem* temp = _impl_.insert_inven_item_;
  _impl_.insert_inven_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::unsafe_arena_release_insert_inven_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_ReplaceEqipment.insert_inven_item)
  
  ::Protocol::SItem* temp = _impl_.insert_inven_item_;
  _impl_.insert_inven_item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::_internal_mutable_insert_inven_item() {
  
  if (_impl_.insert_inven_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.insert_inven_item_ = p;
  }
  return _impl_.insert_inven_item_;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::mutable_insert_inven_item() {
  ::Protocol::SItem* _msg = _internal_mutable_insert_inven_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_ReplaceEqipment.insert_inven_item)
  return _msg;
}
inline void C2S_ReplaceEqipment::set_allocated_insert_inven_item(::Protocol::SItem* insert_inven_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_inven_item_);
  }
  if (insert_inven_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_inven_item));
    if (message_arena != submessage_arena) {
      insert_inven_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_inven_item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.insert_inven_item_ = insert_inven_item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_ReplaceEqipment.insert_inven_item)
}

// .Protocol.SItem insert_eqip_item = 3;
inline bool C2S_ReplaceEqipment::_internal_has_insert_eqip_item() const {
  return this != internal_default_instance() && _impl_.insert_eqip_item_ != nullptr;
}
inline bool C2S_ReplaceEqipment::has_insert_eqip_item() const {
  return _internal_has_insert_eqip_item();
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::_internal_insert_eqip_item() const {
  const ::Protocol::SItem* p = _impl_.insert_eqip_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::insert_eqip_item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
  return _internal_insert_eqip_item();
}
inline void C2S_ReplaceEqipment::unsafe_arena_set_allocated_insert_eqip_item(
    ::Protocol::SItem* insert_eqip_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_eqip_item_);
  }
  _impl_.insert_eqip_item_ = insert_eqip_item;
  if (insert_eqip_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::release_insert_eqip_item() {
  
  ::Protocol::SItem* temp = _impl_.insert_eqip_item_;
  _impl_.insert_eqip_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::unsafe_arena_release_insert_eqip_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
  
  ::Protocol::SItem* temp = _impl_.insert_eqip_item_;
  _impl_.insert_eqip_item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::_internal_mutable_insert_eqip_item() {
  
  if (_impl_.insert_eqip_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.insert_eqip_item_ = p;
  }
  return _impl_.insert_eqip_item_;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::mutable_insert_eqip_item() {
  ::Protocol::SItem* _msg = _internal_mutable_insert_eqip_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
  return _msg;
}
inline void C2S_ReplaceEqipment::set_allocated_insert_eqip_item(::Protocol::SItem* insert_eqip_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_eqip_item_);
  }
  if (insert_eqip_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_eqip_item));
    if (message_arena != submessage_arena) {
      insert_eqip_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_eqip_item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.insert_eqip_item_ = insert_eqip_item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
}

// .Protocol.ECharacterPart part = 4;
inline void C2S_ReplaceEqipment::clear_part() {
  _impl_.part_ = 0;
}
inline ::Protocol::ECharacterPart C2S_ReplaceEqipment::_internal_part() const {
  return static_cast< ::Protocol::ECharacterPart >(_impl_.part_);
}
inline ::Protocol::ECharacterPart C2S_ReplaceEqipment::part() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.part)
  return _internal_part();
}
inline void C2S_ReplaceEqipment::_internal_set_part(::Protocol::ECharacterPart value) {
  
  _impl_.part_ = value;
}
inline void C2S_ReplaceEqipment::set_part(::Protocol::ECharacterPart value) {
  _internal_set_part(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReplaceEqipment.part)
}

// -------------------------------------------------------------------

// S2C_ReplaceEqipment

// int64 remote_id = 1;
inline void S2C_ReplaceEqipment::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_ReplaceEqipment::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_ReplaceEqipment::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplaceEqipment.remote_id)
  return _internal_remote_id();
}
inline void S2C_ReplaceEqipment::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_ReplaceEqipment::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReplaceEqipment.remote_id)
}

// .Protocol.SCharacterEqipment eqipment = 2;
inline bool S2C_ReplaceEqipment::_internal_has_eqipment() const {
  return this != internal_default_instance() && _impl_.eqipment_ != nullptr;
}
inline bool S2C_ReplaceEqipment::has_eqipment() const {
  return _internal_has_eqipment();
}
inline const ::Protocol::SCharacterEqipment& S2C_ReplaceEqipment::_internal_eqipment() const {
  const ::Protocol::SCharacterEqipment* p = _impl_.eqipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterEqipment&>(
      ::Protocol::_SCharacterEqipment_default_instance_);
}
inline const ::Protocol::SCharacterEqipment& S2C_ReplaceEqipment::eqipment() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplaceEqipment.eqipment)
  return _internal_eqipment();
}
inline void S2C_ReplaceEqipment::unsafe_arena_set_allocated_eqipment(
    ::Protocol::SCharacterEqipment* eqipment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eqipment_);
  }
  _impl_.eqipment_ = eqipment;
  if (eqipment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_ReplaceEqipment.eqipment)
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::release_eqipment() {
  
  ::Protocol::SCharacterEqipment* temp = _impl_.eqipment_;
  _impl_.eqipment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::unsafe_arena_release_eqipment() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ReplaceEqipment.eqipment)
  
  ::Protocol::SCharacterEqipment* temp = _impl_.eqipment_;
  _impl_.eqipment_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::_internal_mutable_eqipment() {
  
  if (_impl_.eqipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterEqipment>(GetArenaForAllocation());
    _impl_.eqipment_ = p;
  }
  return _impl_.eqipment_;
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::mutable_eqipment() {
  ::Protocol::SCharacterEqipment* _msg = _internal_mutable_eqipment();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ReplaceEqipment.eqipment)
  return _msg;
}
inline void S2C_ReplaceEqipment::set_allocated_eqipment(::Protocol::SCharacterEqipment* eqipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eqipment_);
  }
  if (eqipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eqipment));
    if (message_arena != submessage_arena) {
      eqipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eqipment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.eqipment_ = eqipment;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ReplaceEqipment.eqipment)
}

// int32 error = 3;
inline void S2C_ReplaceEqipment::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_ReplaceEqipment::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_ReplaceEqipment::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplaceEqipment.error)
  return _internal_error();
}
inline void S2C_ReplaceEqipment::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_ReplaceEqipment::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReplaceEqipment.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto
