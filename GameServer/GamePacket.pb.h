#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GamePacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "PacketStruct.pb.h"
#include "PacketEnum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GamePacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GamePacket_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GamePacket_2eproto;
namespace Protocol {
class C2S_BlockFriend;
struct C2S_BlockFriendDefaultTypeInternal;
extern C2S_BlockFriendDefaultTypeInternal _C2S_BlockFriend_default_instance_;
class C2S_Chat;
struct C2S_ChatDefaultTypeInternal;
extern C2S_ChatDefaultTypeInternal _C2S_Chat_default_instance_;
class C2S_CompleteLoadDungeon;
struct C2S_CompleteLoadDungeonDefaultTypeInternal;
extern C2S_CompleteLoadDungeonDefaultTypeInternal _C2S_CompleteLoadDungeon_default_instance_;
class C2S_CreateParty;
struct C2S_CreatePartyDefaultTypeInternal;
extern C2S_CreatePartyDefaultTypeInternal _C2S_CreateParty_default_instance_;
class C2S_DeleteInventory;
struct C2S_DeleteInventoryDefaultTypeInternal;
extern C2S_DeleteInventoryDefaultTypeInternal _C2S_DeleteInventory_default_instance_;
class C2S_EnterGameServer;
struct C2S_EnterGameServerDefaultTypeInternal;
extern C2S_EnterGameServerDefaultTypeInternal _C2S_EnterGameServer_default_instance_;
class C2S_InsertInventory;
struct C2S_InsertInventoryDefaultTypeInternal;
extern C2S_InsertInventoryDefaultTypeInternal _C2S_InsertInventory_default_instance_;
class C2S_InteractiveObject;
struct C2S_InteractiveObjectDefaultTypeInternal;
extern C2S_InteractiveObjectDefaultTypeInternal _C2S_InteractiveObject_default_instance_;
class C2S_LeaveGameServer;
struct C2S_LeaveGameServerDefaultTypeInternal;
extern C2S_LeaveGameServerDefaultTypeInternal _C2S_LeaveGameServer_default_instance_;
class C2S_LoadFriendList;
struct C2S_LoadFriendListDefaultTypeInternal;
extern C2S_LoadFriendListDefaultTypeInternal _C2S_LoadFriendList_default_instance_;
class C2S_LoadInventory;
struct C2S_LoadInventoryDefaultTypeInternal;
extern C2S_LoadInventoryDefaultTypeInternal _C2S_LoadInventory_default_instance_;
class C2S_MovementCharacter;
struct C2S_MovementCharacterDefaultTypeInternal;
extern C2S_MovementCharacterDefaultTypeInternal _C2S_MovementCharacter_default_instance_;
class C2S_PlayAnimation;
struct C2S_PlayAnimationDefaultTypeInternal;
extern C2S_PlayAnimationDefaultTypeInternal _C2S_PlayAnimation_default_instance_;
class C2S_PlayerAutoAttack;
struct C2S_PlayerAutoAttackDefaultTypeInternal;
extern C2S_PlayerAutoAttackDefaultTypeInternal _C2S_PlayerAutoAttack_default_instance_;
class C2S_PressedUseKeyAction;
struct C2S_PressedUseKeyActionDefaultTypeInternal;
extern C2S_PressedUseKeyActionDefaultTypeInternal _C2S_PressedUseKeyAction_default_instance_;
class C2S_ReleaseUseKeyAction;
struct C2S_ReleaseUseKeyActionDefaultTypeInternal;
extern C2S_ReleaseUseKeyActionDefaultTypeInternal _C2S_ReleaseUseKeyAction_default_instance_;
class C2S_ReplaceEqipment;
struct C2S_ReplaceEqipmentDefaultTypeInternal;
extern C2S_ReplaceEqipmentDefaultTypeInternal _C2S_ReplaceEqipment_default_instance_;
class C2S_RequestEnterDungeon;
struct C2S_RequestEnterDungeonDefaultTypeInternal;
extern C2S_RequestEnterDungeonDefaultTypeInternal _C2S_RequestEnterDungeon_default_instance_;
class C2S_RequestEnterParty;
struct C2S_RequestEnterPartyDefaultTypeInternal;
extern C2S_RequestEnterPartyDefaultTypeInternal _C2S_RequestEnterParty_default_instance_;
class C2S_RequestFriend;
struct C2S_RequestFriendDefaultTypeInternal;
extern C2S_RequestFriendDefaultTypeInternal _C2S_RequestFriend_default_instance_;
class C2S_RequestLeaderParty;
struct C2S_RequestLeaderPartyDefaultTypeInternal;
extern C2S_RequestLeaderPartyDefaultTypeInternal _C2S_RequestLeaderParty_default_instance_;
class C2S_RequestLeaveParty;
struct C2S_RequestLeavePartyDefaultTypeInternal;
extern C2S_RequestLeavePartyDefaultTypeInternal _C2S_RequestLeaveParty_default_instance_;
class C2S_ResponeParty;
struct C2S_ResponePartyDefaultTypeInternal;
extern C2S_ResponePartyDefaultTypeInternal _C2S_ResponeParty_default_instance_;
class C2S_SetUseKeyAction;
struct C2S_SetUseKeyActionDefaultTypeInternal;
extern C2S_SetUseKeyActionDefaultTypeInternal _C2S_SetUseKeyAction_default_instance_;
class C2S_SkipSequence;
struct C2S_SkipSequenceDefaultTypeInternal;
extern C2S_SkipSequenceDefaultTypeInternal _C2S_SkipSequence_default_instance_;
class C2S_Tick;
struct C2S_TickDefaultTypeInternal;
extern C2S_TickDefaultTypeInternal _C2S_Tick_default_instance_;
class C2S_UpdateInventory;
struct C2S_UpdateInventoryDefaultTypeInternal;
extern C2S_UpdateInventoryDefaultTypeInternal _C2S_UpdateInventory_default_instance_;
class C2S_UpdateSkillTree;
struct C2S_UpdateSkillTreeDefaultTypeInternal;
extern C2S_UpdateSkillTreeDefaultTypeInternal _C2S_UpdateSkillTree_default_instance_;
class S2C_AnimationMovementEnemy;
struct S2C_AnimationMovementEnemyDefaultTypeInternal;
extern S2C_AnimationMovementEnemyDefaultTypeInternal _S2C_AnimationMovementEnemy_default_instance_;
class S2C_AppearArrow;
struct S2C_AppearArrowDefaultTypeInternal;
extern S2C_AppearArrowDefaultTypeInternal _S2C_AppearArrow_default_instance_;
class S2C_AppearCharacter;
struct S2C_AppearCharacterDefaultTypeInternal;
extern S2C_AppearCharacterDefaultTypeInternal _S2C_AppearCharacter_default_instance_;
class S2C_AppearEnemy;
struct S2C_AppearEnemyDefaultTypeInternal;
extern S2C_AppearEnemyDefaultTypeInternal _S2C_AppearEnemy_default_instance_;
class S2C_AppearItem;
struct S2C_AppearItemDefaultTypeInternal;
extern S2C_AppearItemDefaultTypeInternal _S2C_AppearItem_default_instance_;
class S2C_AppearObstruction;
struct S2C_AppearObstructionDefaultTypeInternal;
extern S2C_AppearObstructionDefaultTypeInternal _S2C_AppearObstruction_default_instance_;
class S2C_AppearProtal;
struct S2C_AppearProtalDefaultTypeInternal;
extern S2C_AppearProtalDefaultTypeInternal _S2C_AppearProtal_default_instance_;
class S2C_AppearSkill;
struct S2C_AppearSkillDefaultTypeInternal;
extern S2C_AppearSkillDefaultTypeInternal _S2C_AppearSkill_default_instance_;
class S2C_BlockFriend;
struct S2C_BlockFriendDefaultTypeInternal;
extern S2C_BlockFriendDefaultTypeInternal _S2C_BlockFriend_default_instance_;
class S2C_Chat;
struct S2C_ChatDefaultTypeInternal;
extern S2C_ChatDefaultTypeInternal _S2C_Chat_default_instance_;
class S2C_CompleteLoadDungeon;
struct S2C_CompleteLoadDungeonDefaultTypeInternal;
extern S2C_CompleteLoadDungeonDefaultTypeInternal _S2C_CompleteLoadDungeon_default_instance_;
class S2C_ConnectFriend;
struct S2C_ConnectFriendDefaultTypeInternal;
extern S2C_ConnectFriendDefaultTypeInternal _S2C_ConnectFriend_default_instance_;
class S2C_CreateParty;
struct S2C_CreatePartyDefaultTypeInternal;
extern S2C_CreatePartyDefaultTypeInternal _S2C_CreateParty_default_instance_;
class S2C_DeathEnemy;
struct S2C_DeathEnemyDefaultTypeInternal;
extern S2C_DeathEnemyDefaultTypeInternal _S2C_DeathEnemy_default_instance_;
class S2C_DebugBox;
struct S2C_DebugBoxDefaultTypeInternal;
extern S2C_DebugBoxDefaultTypeInternal _S2C_DebugBox_default_instance_;
class S2C_DebugCircle;
struct S2C_DebugCircleDefaultTypeInternal;
extern S2C_DebugCircleDefaultTypeInternal _S2C_DebugCircle_default_instance_;
class S2C_DeleteInventory;
struct S2C_DeleteInventoryDefaultTypeInternal;
extern S2C_DeleteInventoryDefaultTypeInternal _S2C_DeleteInventory_default_instance_;
class S2C_DetectChangeEnemy;
struct S2C_DetectChangeEnemyDefaultTypeInternal;
extern S2C_DetectChangeEnemyDefaultTypeInternal _S2C_DetectChangeEnemy_default_instance_;
class S2C_DetectChangePlayer;
struct S2C_DetectChangePlayerDefaultTypeInternal;
extern S2C_DetectChangePlayerDefaultTypeInternal _S2C_DetectChangePlayer_default_instance_;
class S2C_DisAppearCharacter;
struct S2C_DisAppearCharacterDefaultTypeInternal;
extern S2C_DisAppearCharacterDefaultTypeInternal _S2C_DisAppearCharacter_default_instance_;
class S2C_DisAppearGameObject;
struct S2C_DisAppearGameObjectDefaultTypeInternal;
extern S2C_DisAppearGameObjectDefaultTypeInternal _S2C_DisAppearGameObject_default_instance_;
class S2C_DisConnectFriend;
struct S2C_DisConnectFriendDefaultTypeInternal;
extern S2C_DisConnectFriendDefaultTypeInternal _S2C_DisConnectFriend_default_instance_;
class S2C_EndReactionSkill;
struct S2C_EndReactionSkillDefaultTypeInternal;
extern S2C_EndReactionSkillDefaultTypeInternal _S2C_EndReactionSkill_default_instance_;
class S2C_EndSequence;
struct S2C_EndSequenceDefaultTypeInternal;
extern S2C_EndSequenceDefaultTypeInternal _S2C_EndSequence_default_instance_;
class S2C_EnemyAutoAttack;
struct S2C_EnemyAutoAttackDefaultTypeInternal;
extern S2C_EnemyAutoAttackDefaultTypeInternal _S2C_EnemyAutoAttack_default_instance_;
class S2C_EnterGameServer;
struct S2C_EnterGameServerDefaultTypeInternal;
extern S2C_EnterGameServerDefaultTypeInternal _S2C_EnterGameServer_default_instance_;
class S2C_EnterPartyPlayer;
struct S2C_EnterPartyPlayerDefaultTypeInternal;
extern S2C_EnterPartyPlayerDefaultTypeInternal _S2C_EnterPartyPlayer_default_instance_;
class S2C_EnterPortal;
struct S2C_EnterPortalDefaultTypeInternal;
extern S2C_EnterPortalDefaultTypeInternal _S2C_EnterPortal_default_instance_;
class S2C_HitEnemy;
struct S2C_HitEnemyDefaultTypeInternal;
extern S2C_HitEnemyDefaultTypeInternal _S2C_HitEnemy_default_instance_;
class S2C_InsertInventory;
struct S2C_InsertInventoryDefaultTypeInternal;
extern S2C_InsertInventoryDefaultTypeInternal _S2C_InsertInventory_default_instance_;
class S2C_LeaveGameServer;
struct S2C_LeaveGameServerDefaultTypeInternal;
extern S2C_LeaveGameServerDefaultTypeInternal _S2C_LeaveGameServer_default_instance_;
class S2C_LeavePartyPlayer;
struct S2C_LeavePartyPlayerDefaultTypeInternal;
extern S2C_LeavePartyPlayerDefaultTypeInternal _S2C_LeavePartyPlayer_default_instance_;
class S2C_LeavePortal;
struct S2C_LeavePortalDefaultTypeInternal;
extern S2C_LeavePortalDefaultTypeInternal _S2C_LeavePortal_default_instance_;
class S2C_LevelUp;
struct S2C_LevelUpDefaultTypeInternal;
extern S2C_LevelUpDefaultTypeInternal _S2C_LevelUp_default_instance_;
class S2C_LoadFriendList;
struct S2C_LoadFriendListDefaultTypeInternal;
extern S2C_LoadFriendListDefaultTypeInternal _S2C_LoadFriendList_default_instance_;
class S2C_LoadInventory;
struct S2C_LoadInventoryDefaultTypeInternal;
extern S2C_LoadInventoryDefaultTypeInternal _S2C_LoadInventory_default_instance_;
class S2C_LoadParty;
struct S2C_LoadPartyDefaultTypeInternal;
extern S2C_LoadPartyDefaultTypeInternal _S2C_LoadParty_default_instance_;
class S2C_LoadSkillTree;
struct S2C_LoadSkillTreeDefaultTypeInternal;
extern S2C_LoadSkillTreeDefaultTypeInternal _S2C_LoadSkillTree_default_instance_;
class S2C_MovementCharacter;
struct S2C_MovementCharacterDefaultTypeInternal;
extern S2C_MovementCharacterDefaultTypeInternal _S2C_MovementCharacter_default_instance_;
class S2C_MovementEnemy;
struct S2C_MovementEnemyDefaultTypeInternal;
extern S2C_MovementEnemyDefaultTypeInternal _S2C_MovementEnemy_default_instance_;
class S2C_MovementProjectile;
struct S2C_MovementProjectileDefaultTypeInternal;
extern S2C_MovementProjectileDefaultTypeInternal _S2C_MovementProjectile_default_instance_;
class S2C_NotifyParty;
struct S2C_NotifyPartyDefaultTypeInternal;
extern S2C_NotifyPartyDefaultTypeInternal _S2C_NotifyParty_default_instance_;
class S2C_PlayAnimation;
struct S2C_PlayAnimationDefaultTypeInternal;
extern S2C_PlayAnimationDefaultTypeInternal _S2C_PlayAnimation_default_instance_;
class S2C_PlaySequence;
struct S2C_PlaySequenceDefaultTypeInternal;
extern S2C_PlaySequenceDefaultTypeInternal _S2C_PlaySequence_default_instance_;
class S2C_PlayerAutoAttack;
struct S2C_PlayerAutoAttackDefaultTypeInternal;
extern S2C_PlayerAutoAttackDefaultTypeInternal _S2C_PlayerAutoAttack_default_instance_;
class S2C_PlayerEndAutoAttack;
struct S2C_PlayerEndAutoAttackDefaultTypeInternal;
extern S2C_PlayerEndAutoAttackDefaultTypeInternal _S2C_PlayerEndAutoAttack_default_instance_;
class S2C_ReactionSkill;
struct S2C_ReactionSkillDefaultTypeInternal;
extern S2C_ReactionSkillDefaultTypeInternal _S2C_ReactionSkill_default_instance_;
class S2C_ReplaceEqipment;
struct S2C_ReplaceEqipmentDefaultTypeInternal;
extern S2C_ReplaceEqipmentDefaultTypeInternal _S2C_ReplaceEqipment_default_instance_;
class S2C_RequestEnterDungeon;
struct S2C_RequestEnterDungeonDefaultTypeInternal;
extern S2C_RequestEnterDungeonDefaultTypeInternal _S2C_RequestEnterDungeon_default_instance_;
class S2C_RequestEnterParty;
struct S2C_RequestEnterPartyDefaultTypeInternal;
extern S2C_RequestEnterPartyDefaultTypeInternal _S2C_RequestEnterParty_default_instance_;
class S2C_RequestFriend;
struct S2C_RequestFriendDefaultTypeInternal;
extern S2C_RequestFriendDefaultTypeInternal _S2C_RequestFriend_default_instance_;
class S2C_RequestLeaderParty;
struct S2C_RequestLeaderPartyDefaultTypeInternal;
extern S2C_RequestLeaderPartyDefaultTypeInternal _S2C_RequestLeaderParty_default_instance_;
class S2C_RequestLeaveParty;
struct S2C_RequestLeavePartyDefaultTypeInternal;
extern S2C_RequestLeavePartyDefaultTypeInternal _S2C_RequestLeaveParty_default_instance_;
class S2C_RequestParty;
struct S2C_RequestPartyDefaultTypeInternal;
extern S2C_RequestPartyDefaultTypeInternal _S2C_RequestParty_default_instance_;
class S2C_ResponeParty;
struct S2C_ResponePartyDefaultTypeInternal;
extern S2C_ResponePartyDefaultTypeInternal _S2C_ResponeParty_default_instance_;
class S2C_ResponseEnterDungeon;
struct S2C_ResponseEnterDungeonDefaultTypeInternal;
extern S2C_ResponseEnterDungeonDefaultTypeInternal _S2C_ResponseEnterDungeon_default_instance_;
class S2C_ResponseUseKeyAction;
struct S2C_ResponseUseKeyActionDefaultTypeInternal;
extern S2C_ResponseUseKeyActionDefaultTypeInternal _S2C_ResponseUseKeyAction_default_instance_;
class S2C_RollbackInventory;
struct S2C_RollbackInventoryDefaultTypeInternal;
extern S2C_RollbackInventoryDefaultTypeInternal _S2C_RollbackInventory_default_instance_;
class S2C_SetUseKeyAction;
struct S2C_SetUseKeyActionDefaultTypeInternal;
extern S2C_SetUseKeyActionDefaultTypeInternal _S2C_SetUseKeyAction_default_instance_;
class S2C_SkillCoolTime;
struct S2C_SkillCoolTimeDefaultTypeInternal;
extern S2C_SkillCoolTimeDefaultTypeInternal _S2C_SkillCoolTime_default_instance_;
class S2C_SkipSequence;
struct S2C_SkipSequenceDefaultTypeInternal;
extern S2C_SkipSequenceDefaultTypeInternal _S2C_SkipSequence_default_instance_;
class S2C_Teleport;
struct S2C_TeleportDefaultTypeInternal;
extern S2C_TeleportDefaultTypeInternal _S2C_Teleport_default_instance_;
class S2C_Tick;
struct S2C_TickDefaultTypeInternal;
extern S2C_TickDefaultTypeInternal _S2C_Tick_default_instance_;
class S2C_UpdateExperience;
struct S2C_UpdateExperienceDefaultTypeInternal;
extern S2C_UpdateExperienceDefaultTypeInternal _S2C_UpdateExperience_default_instance_;
class S2C_UpdateInventory;
struct S2C_UpdateInventoryDefaultTypeInternal;
extern S2C_UpdateInventoryDefaultTypeInternal _S2C_UpdateInventory_default_instance_;
class S2C_UpdateSkillTree;
struct S2C_UpdateSkillTreeDefaultTypeInternal;
extern S2C_UpdateSkillTreeDefaultTypeInternal _S2C_UpdateSkillTree_default_instance_;
class S2C_WaitingLoadDungeon;
struct S2C_WaitingLoadDungeonDefaultTypeInternal;
extern S2C_WaitingLoadDungeonDefaultTypeInternal _S2C_WaitingLoadDungeon_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C2S_BlockFriend* Arena::CreateMaybeMessage<::Protocol::C2S_BlockFriend>(Arena*);
template<> ::Protocol::C2S_Chat* Arena::CreateMaybeMessage<::Protocol::C2S_Chat>(Arena*);
template<> ::Protocol::C2S_CompleteLoadDungeon* Arena::CreateMaybeMessage<::Protocol::C2S_CompleteLoadDungeon>(Arena*);
template<> ::Protocol::C2S_CreateParty* Arena::CreateMaybeMessage<::Protocol::C2S_CreateParty>(Arena*);
template<> ::Protocol::C2S_DeleteInventory* Arena::CreateMaybeMessage<::Protocol::C2S_DeleteInventory>(Arena*);
template<> ::Protocol::C2S_EnterGameServer* Arena::CreateMaybeMessage<::Protocol::C2S_EnterGameServer>(Arena*);
template<> ::Protocol::C2S_InsertInventory* Arena::CreateMaybeMessage<::Protocol::C2S_InsertInventory>(Arena*);
template<> ::Protocol::C2S_InteractiveObject* Arena::CreateMaybeMessage<::Protocol::C2S_InteractiveObject>(Arena*);
template<> ::Protocol::C2S_LeaveGameServer* Arena::CreateMaybeMessage<::Protocol::C2S_LeaveGameServer>(Arena*);
template<> ::Protocol::C2S_LoadFriendList* Arena::CreateMaybeMessage<::Protocol::C2S_LoadFriendList>(Arena*);
template<> ::Protocol::C2S_LoadInventory* Arena::CreateMaybeMessage<::Protocol::C2S_LoadInventory>(Arena*);
template<> ::Protocol::C2S_MovementCharacter* Arena::CreateMaybeMessage<::Protocol::C2S_MovementCharacter>(Arena*);
template<> ::Protocol::C2S_PlayAnimation* Arena::CreateMaybeMessage<::Protocol::C2S_PlayAnimation>(Arena*);
template<> ::Protocol::C2S_PlayerAutoAttack* Arena::CreateMaybeMessage<::Protocol::C2S_PlayerAutoAttack>(Arena*);
template<> ::Protocol::C2S_PressedUseKeyAction* Arena::CreateMaybeMessage<::Protocol::C2S_PressedUseKeyAction>(Arena*);
template<> ::Protocol::C2S_ReleaseUseKeyAction* Arena::CreateMaybeMessage<::Protocol::C2S_ReleaseUseKeyAction>(Arena*);
template<> ::Protocol::C2S_ReplaceEqipment* Arena::CreateMaybeMessage<::Protocol::C2S_ReplaceEqipment>(Arena*);
template<> ::Protocol::C2S_RequestEnterDungeon* Arena::CreateMaybeMessage<::Protocol::C2S_RequestEnterDungeon>(Arena*);
template<> ::Protocol::C2S_RequestEnterParty* Arena::CreateMaybeMessage<::Protocol::C2S_RequestEnterParty>(Arena*);
template<> ::Protocol::C2S_RequestFriend* Arena::CreateMaybeMessage<::Protocol::C2S_RequestFriend>(Arena*);
template<> ::Protocol::C2S_RequestLeaderParty* Arena::CreateMaybeMessage<::Protocol::C2S_RequestLeaderParty>(Arena*);
template<> ::Protocol::C2S_RequestLeaveParty* Arena::CreateMaybeMessage<::Protocol::C2S_RequestLeaveParty>(Arena*);
template<> ::Protocol::C2S_ResponeParty* Arena::CreateMaybeMessage<::Protocol::C2S_ResponeParty>(Arena*);
template<> ::Protocol::C2S_SetUseKeyAction* Arena::CreateMaybeMessage<::Protocol::C2S_SetUseKeyAction>(Arena*);
template<> ::Protocol::C2S_SkipSequence* Arena::CreateMaybeMessage<::Protocol::C2S_SkipSequence>(Arena*);
template<> ::Protocol::C2S_Tick* Arena::CreateMaybeMessage<::Protocol::C2S_Tick>(Arena*);
template<> ::Protocol::C2S_UpdateInventory* Arena::CreateMaybeMessage<::Protocol::C2S_UpdateInventory>(Arena*);
template<> ::Protocol::C2S_UpdateSkillTree* Arena::CreateMaybeMessage<::Protocol::C2S_UpdateSkillTree>(Arena*);
template<> ::Protocol::S2C_AnimationMovementEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_AnimationMovementEnemy>(Arena*);
template<> ::Protocol::S2C_AppearArrow* Arena::CreateMaybeMessage<::Protocol::S2C_AppearArrow>(Arena*);
template<> ::Protocol::S2C_AppearCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_AppearCharacter>(Arena*);
template<> ::Protocol::S2C_AppearEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_AppearEnemy>(Arena*);
template<> ::Protocol::S2C_AppearItem* Arena::CreateMaybeMessage<::Protocol::S2C_AppearItem>(Arena*);
template<> ::Protocol::S2C_AppearObstruction* Arena::CreateMaybeMessage<::Protocol::S2C_AppearObstruction>(Arena*);
template<> ::Protocol::S2C_AppearProtal* Arena::CreateMaybeMessage<::Protocol::S2C_AppearProtal>(Arena*);
template<> ::Protocol::S2C_AppearSkill* Arena::CreateMaybeMessage<::Protocol::S2C_AppearSkill>(Arena*);
template<> ::Protocol::S2C_BlockFriend* Arena::CreateMaybeMessage<::Protocol::S2C_BlockFriend>(Arena*);
template<> ::Protocol::S2C_Chat* Arena::CreateMaybeMessage<::Protocol::S2C_Chat>(Arena*);
template<> ::Protocol::S2C_CompleteLoadDungeon* Arena::CreateMaybeMessage<::Protocol::S2C_CompleteLoadDungeon>(Arena*);
template<> ::Protocol::S2C_ConnectFriend* Arena::CreateMaybeMessage<::Protocol::S2C_ConnectFriend>(Arena*);
template<> ::Protocol::S2C_CreateParty* Arena::CreateMaybeMessage<::Protocol::S2C_CreateParty>(Arena*);
template<> ::Protocol::S2C_DeathEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_DeathEnemy>(Arena*);
template<> ::Protocol::S2C_DebugBox* Arena::CreateMaybeMessage<::Protocol::S2C_DebugBox>(Arena*);
template<> ::Protocol::S2C_DebugCircle* Arena::CreateMaybeMessage<::Protocol::S2C_DebugCircle>(Arena*);
template<> ::Protocol::S2C_DeleteInventory* Arena::CreateMaybeMessage<::Protocol::S2C_DeleteInventory>(Arena*);
template<> ::Protocol::S2C_DetectChangeEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_DetectChangeEnemy>(Arena*);
template<> ::Protocol::S2C_DetectChangePlayer* Arena::CreateMaybeMessage<::Protocol::S2C_DetectChangePlayer>(Arena*);
template<> ::Protocol::S2C_DisAppearCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_DisAppearCharacter>(Arena*);
template<> ::Protocol::S2C_DisAppearGameObject* Arena::CreateMaybeMessage<::Protocol::S2C_DisAppearGameObject>(Arena*);
template<> ::Protocol::S2C_DisConnectFriend* Arena::CreateMaybeMessage<::Protocol::S2C_DisConnectFriend>(Arena*);
template<> ::Protocol::S2C_EndReactionSkill* Arena::CreateMaybeMessage<::Protocol::S2C_EndReactionSkill>(Arena*);
template<> ::Protocol::S2C_EndSequence* Arena::CreateMaybeMessage<::Protocol::S2C_EndSequence>(Arena*);
template<> ::Protocol::S2C_EnemyAutoAttack* Arena::CreateMaybeMessage<::Protocol::S2C_EnemyAutoAttack>(Arena*);
template<> ::Protocol::S2C_EnterGameServer* Arena::CreateMaybeMessage<::Protocol::S2C_EnterGameServer>(Arena*);
template<> ::Protocol::S2C_EnterPartyPlayer* Arena::CreateMaybeMessage<::Protocol::S2C_EnterPartyPlayer>(Arena*);
template<> ::Protocol::S2C_EnterPortal* Arena::CreateMaybeMessage<::Protocol::S2C_EnterPortal>(Arena*);
template<> ::Protocol::S2C_HitEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_HitEnemy>(Arena*);
template<> ::Protocol::S2C_InsertInventory* Arena::CreateMaybeMessage<::Protocol::S2C_InsertInventory>(Arena*);
template<> ::Protocol::S2C_LeaveGameServer* Arena::CreateMaybeMessage<::Protocol::S2C_LeaveGameServer>(Arena*);
template<> ::Protocol::S2C_LeavePartyPlayer* Arena::CreateMaybeMessage<::Protocol::S2C_LeavePartyPlayer>(Arena*);
template<> ::Protocol::S2C_LeavePortal* Arena::CreateMaybeMessage<::Protocol::S2C_LeavePortal>(Arena*);
template<> ::Protocol::S2C_LevelUp* Arena::CreateMaybeMessage<::Protocol::S2C_LevelUp>(Arena*);
template<> ::Protocol::S2C_LoadFriendList* Arena::CreateMaybeMessage<::Protocol::S2C_LoadFriendList>(Arena*);
template<> ::Protocol::S2C_LoadInventory* Arena::CreateMaybeMessage<::Protocol::S2C_LoadInventory>(Arena*);
template<> ::Protocol::S2C_LoadParty* Arena::CreateMaybeMessage<::Protocol::S2C_LoadParty>(Arena*);
template<> ::Protocol::S2C_LoadSkillTree* Arena::CreateMaybeMessage<::Protocol::S2C_LoadSkillTree>(Arena*);
template<> ::Protocol::S2C_MovementCharacter* Arena::CreateMaybeMessage<::Protocol::S2C_MovementCharacter>(Arena*);
template<> ::Protocol::S2C_MovementEnemy* Arena::CreateMaybeMessage<::Protocol::S2C_MovementEnemy>(Arena*);
template<> ::Protocol::S2C_MovementProjectile* Arena::CreateMaybeMessage<::Protocol::S2C_MovementProjectile>(Arena*);
template<> ::Protocol::S2C_NotifyParty* Arena::CreateMaybeMessage<::Protocol::S2C_NotifyParty>(Arena*);
template<> ::Protocol::S2C_PlayAnimation* Arena::CreateMaybeMessage<::Protocol::S2C_PlayAnimation>(Arena*);
template<> ::Protocol::S2C_PlaySequence* Arena::CreateMaybeMessage<::Protocol::S2C_PlaySequence>(Arena*);
template<> ::Protocol::S2C_PlayerAutoAttack* Arena::CreateMaybeMessage<::Protocol::S2C_PlayerAutoAttack>(Arena*);
template<> ::Protocol::S2C_PlayerEndAutoAttack* Arena::CreateMaybeMessage<::Protocol::S2C_PlayerEndAutoAttack>(Arena*);
template<> ::Protocol::S2C_ReactionSkill* Arena::CreateMaybeMessage<::Protocol::S2C_ReactionSkill>(Arena*);
template<> ::Protocol::S2C_ReplaceEqipment* Arena::CreateMaybeMessage<::Protocol::S2C_ReplaceEqipment>(Arena*);
template<> ::Protocol::S2C_RequestEnterDungeon* Arena::CreateMaybeMessage<::Protocol::S2C_RequestEnterDungeon>(Arena*);
template<> ::Protocol::S2C_RequestEnterParty* Arena::CreateMaybeMessage<::Protocol::S2C_RequestEnterParty>(Arena*);
template<> ::Protocol::S2C_RequestFriend* Arena::CreateMaybeMessage<::Protocol::S2C_RequestFriend>(Arena*);
template<> ::Protocol::S2C_RequestLeaderParty* Arena::CreateMaybeMessage<::Protocol::S2C_RequestLeaderParty>(Arena*);
template<> ::Protocol::S2C_RequestLeaveParty* Arena::CreateMaybeMessage<::Protocol::S2C_RequestLeaveParty>(Arena*);
template<> ::Protocol::S2C_RequestParty* Arena::CreateMaybeMessage<::Protocol::S2C_RequestParty>(Arena*);
template<> ::Protocol::S2C_ResponeParty* Arena::CreateMaybeMessage<::Protocol::S2C_ResponeParty>(Arena*);
template<> ::Protocol::S2C_ResponseEnterDungeon* Arena::CreateMaybeMessage<::Protocol::S2C_ResponseEnterDungeon>(Arena*);
template<> ::Protocol::S2C_ResponseUseKeyAction* Arena::CreateMaybeMessage<::Protocol::S2C_ResponseUseKeyAction>(Arena*);
template<> ::Protocol::S2C_RollbackInventory* Arena::CreateMaybeMessage<::Protocol::S2C_RollbackInventory>(Arena*);
template<> ::Protocol::S2C_SetUseKeyAction* Arena::CreateMaybeMessage<::Protocol::S2C_SetUseKeyAction>(Arena*);
template<> ::Protocol::S2C_SkillCoolTime* Arena::CreateMaybeMessage<::Protocol::S2C_SkillCoolTime>(Arena*);
template<> ::Protocol::S2C_SkipSequence* Arena::CreateMaybeMessage<::Protocol::S2C_SkipSequence>(Arena*);
template<> ::Protocol::S2C_Teleport* Arena::CreateMaybeMessage<::Protocol::S2C_Teleport>(Arena*);
template<> ::Protocol::S2C_Tick* Arena::CreateMaybeMessage<::Protocol::S2C_Tick>(Arena*);
template<> ::Protocol::S2C_UpdateExperience* Arena::CreateMaybeMessage<::Protocol::S2C_UpdateExperience>(Arena*);
template<> ::Protocol::S2C_UpdateInventory* Arena::CreateMaybeMessage<::Protocol::S2C_UpdateInventory>(Arena*);
template<> ::Protocol::S2C_UpdateSkillTree* Arena::CreateMaybeMessage<::Protocol::S2C_UpdateSkillTree>(Arena*);
template<> ::Protocol::S2C_WaitingLoadDungeon* Arena::CreateMaybeMessage<::Protocol::S2C_WaitingLoadDungeon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C2S_EnterGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_EnterGameServer) */ {
 public:
  inline C2S_EnterGameServer() : C2S_EnterGameServer(nullptr) {}
  ~C2S_EnterGameServer() override;
  explicit PROTOBUF_CONSTEXPR C2S_EnterGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_EnterGameServer(const C2S_EnterGameServer& from);
  C2S_EnterGameServer(C2S_EnterGameServer&& from) noexcept
    : C2S_EnterGameServer() {
    *this = ::std::move(from);
  }

  inline C2S_EnterGameServer& operator=(const C2S_EnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EnterGameServer& operator=(C2S_EnterGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EnterGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EnterGameServer* internal_default_instance() {
    return reinterpret_cast<const C2S_EnterGameServer*>(
               &_C2S_EnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C2S_EnterGameServer& a, C2S_EnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_EnterGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EnterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_EnterGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_EnterGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_EnterGameServer& from) {
    C2S_EnterGameServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_EnterGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_EnterGameServer";
  }
  protected:
  explicit C2S_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // bytes token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_EnterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterGameServer) */ {
 public:
  inline S2C_EnterGameServer() : S2C_EnterGameServer(nullptr) {}
  ~S2C_EnterGameServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnterGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterGameServer(const S2C_EnterGameServer& from);
  S2C_EnterGameServer(S2C_EnterGameServer&& from) noexcept
    : S2C_EnterGameServer() {
    *this = ::std::move(from);
  }

  inline S2C_EnterGameServer& operator=(const S2C_EnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterGameServer& operator=(S2C_EnterGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterGameServer* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterGameServer*>(
               &_S2C_EnterGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S2C_EnterGameServer& a, S2C_EnterGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnterGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnterGameServer& from) {
    S2C_EnterGameServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnterGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterGameServer";
  }
  protected:
  explicit S2C_EnterGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 3,
    kEqipmentFieldNumber = 4,
    kCharacterDataFieldNumber = 2,
    kTransformFieldNumber = 6,
    kRemoteIdFieldNumber = 1,
    kMoneyFieldNumber = 5,
    kErrorFieldNumber = 7,
  };
  // repeated .Protocol.SItem item = 3;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Protocol::SItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_item();
  private:
  const ::Protocol::SItem& _internal_item(int index) const;
  ::Protocol::SItem* _internal_add_item();
  public:
  const ::Protocol::SItem& item(int index) const;
  ::Protocol::SItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      item() const;

  // repeated .Protocol.SItem eqipment = 4;
  int eqipment_size() const;
  private:
  int _internal_eqipment_size() const;
  public:
  void clear_eqipment();
  ::Protocol::SItem* mutable_eqipment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_eqipment();
  private:
  const ::Protocol::SItem& _internal_eqipment(int index) const;
  ::Protocol::SItem* _internal_add_eqipment();
  public:
  const ::Protocol::SItem& eqipment(int index) const;
  ::Protocol::SItem* add_eqipment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      eqipment() const;

  // .Protocol.SCharacterData character_data = 2;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::Protocol::SCharacterData& character_data() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_character_data();
  ::Protocol::SCharacterData* mutable_character_data();
  void set_allocated_character_data(::Protocol::SCharacterData* character_data);
  private:
  const ::Protocol::SCharacterData& _internal_character_data() const;
  ::Protocol::SCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::Protocol::SCharacterData* character_data);
  ::Protocol::SCharacterData* unsafe_arena_release_character_data();

  // .Protocol.STransform transform = 6;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::Protocol::STransform& transform() const;
  PROTOBUF_NODISCARD ::Protocol::STransform* release_transform();
  ::Protocol::STransform* mutable_transform();
  void set_allocated_transform(::Protocol::STransform* transform);
  private:
  const ::Protocol::STransform& _internal_transform() const;
  ::Protocol::STransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::Protocol::STransform* transform);
  ::Protocol::STransform* unsafe_arena_release_transform();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 money = 5;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // int32 error = 7;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > item_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > eqipment_;
    ::Protocol::SCharacterData* character_data_;
    ::Protocol::STransform* transform_;
    int64_t remote_id_;
    int32_t money_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C2S_LeaveGameServer) */ {
 public:
  inline C2S_LeaveGameServer() : C2S_LeaveGameServer(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C2S_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LeaveGameServer(const C2S_LeaveGameServer& from);
  C2S_LeaveGameServer(C2S_LeaveGameServer&& from) noexcept
    : C2S_LeaveGameServer() {
    *this = ::std::move(from);
  }

  inline C2S_LeaveGameServer& operator=(const C2S_LeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LeaveGameServer& operator=(C2S_LeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const C2S_LeaveGameServer*>(
               &_C2S_LeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C2S_LeaveGameServer& a, C2S_LeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LeaveGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LeaveGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C2S_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C2S_LeaveGameServer& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LeaveGameServer";
  }
  protected:
  explicit C2S_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeaveGameServer) */ {
 public:
  inline S2C_LeaveGameServer() : S2C_LeaveGameServer(nullptr) {}
  ~S2C_LeaveGameServer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeaveGameServer(const S2C_LeaveGameServer& from);
  S2C_LeaveGameServer(S2C_LeaveGameServer&& from) noexcept
    : S2C_LeaveGameServer() {
    *this = ::std::move(from);
  }

  inline S2C_LeaveGameServer& operator=(const S2C_LeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeaveGameServer& operator=(S2C_LeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const S2C_LeaveGameServer*>(
               &_S2C_LeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S2C_LeaveGameServer& a, S2C_LeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeaveGameServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeaveGameServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LeaveGameServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LeaveGameServer& from) {
    S2C_LeaveGameServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LeaveGameServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeaveGameServer";
  }
  protected:
  explicit S2C_LeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Tick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Tick) */ {
 public:
  inline C2S_Tick() : C2S_Tick(nullptr) {}
  ~C2S_Tick() override;
  explicit PROTOBUF_CONSTEXPR C2S_Tick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Tick(const C2S_Tick& from);
  C2S_Tick(C2S_Tick&& from) noexcept
    : C2S_Tick() {
    *this = ::std::move(from);
  }

  inline C2S_Tick& operator=(const C2S_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Tick& operator=(C2S_Tick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Tick& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Tick* internal_default_instance() {
    return reinterpret_cast<const C2S_Tick*>(
               &_C2S_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2S_Tick& a, C2S_Tick& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Tick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Tick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Tick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Tick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Tick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Tick& from) {
    C2S_Tick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Tick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Tick";
  }
  protected:
  explicit C2S_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 2,
  };
  // .Protocol.SVector cur_location = 2;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Tick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Tick final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_Tick) */ {
 public:
  inline S2C_Tick() : S2C_Tick(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S2C_Tick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Tick(const S2C_Tick& from);
  S2C_Tick(S2C_Tick&& from) noexcept
    : S2C_Tick() {
    *this = ::std::move(from);
  }

  inline S2C_Tick& operator=(const S2C_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Tick& operator=(S2C_Tick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Tick& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Tick* internal_default_instance() {
    return reinterpret_cast<const S2C_Tick*>(
               &_S2C_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S2C_Tick& a, S2C_Tick& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Tick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Tick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Tick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Tick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_Tick& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_Tick& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Tick";
  }
  protected:
  explicit S2C_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Tick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearCharacter) */ {
 public:
  inline S2C_AppearCharacter() : S2C_AppearCharacter(nullptr) {}
  ~S2C_AppearCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearCharacter(const S2C_AppearCharacter& from);
  S2C_AppearCharacter(S2C_AppearCharacter&& from) noexcept
    : S2C_AppearCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_AppearCharacter& operator=(const S2C_AppearCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearCharacter& operator=(S2C_AppearCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearCharacter*>(
               &_S2C_AppearCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S2C_AppearCharacter& a, S2C_AppearCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearCharacter& from) {
    S2C_AppearCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearCharacter";
  }
  protected:
  explicit S2C_AppearCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 3,
    kMoveLocationFieldNumber = 4,
    kCharacterDataFieldNumber = 5,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .Protocol.SVector cur_location = 3;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 4;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // .Protocol.SCharacterData character_data = 5;
  bool has_character_data() const;
  private:
  bool _internal_has_character_data() const;
  public:
  void clear_character_data();
  const ::Protocol::SCharacterData& character_data() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterData* release_character_data();
  ::Protocol::SCharacterData* mutable_character_data();
  void set_allocated_character_data(::Protocol::SCharacterData* character_data);
  private:
  const ::Protocol::SCharacterData& _internal_character_data() const;
  ::Protocol::SCharacterData* _internal_mutable_character_data();
  public:
  void unsafe_arena_set_allocated_character_data(
      ::Protocol::SCharacterData* character_data);
  ::Protocol::SCharacterData* unsafe_arena_release_character_data();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    ::Protocol::SCharacterData* character_data_;
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DisAppearCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DisAppearCharacter) */ {
 public:
  inline S2C_DisAppearCharacter() : S2C_DisAppearCharacter(nullptr) {}
  ~S2C_DisAppearCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_DisAppearCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DisAppearCharacter(const S2C_DisAppearCharacter& from);
  S2C_DisAppearCharacter(S2C_DisAppearCharacter&& from) noexcept
    : S2C_DisAppearCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_DisAppearCharacter& operator=(const S2C_DisAppearCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DisAppearCharacter& operator=(S2C_DisAppearCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DisAppearCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DisAppearCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_DisAppearCharacter*>(
               &_S2C_DisAppearCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S2C_DisAppearCharacter& a, S2C_DisAppearCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DisAppearCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DisAppearCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DisAppearCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DisAppearCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DisAppearCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DisAppearCharacter& from) {
    S2C_DisAppearCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DisAppearCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DisAppearCharacter";
  }
  protected:
  explicit S2C_DisAppearCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DisAppearCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_MovementCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_MovementCharacter) */ {
 public:
  inline C2S_MovementCharacter() : C2S_MovementCharacter(nullptr) {}
  ~C2S_MovementCharacter() override;
  explicit PROTOBUF_CONSTEXPR C2S_MovementCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_MovementCharacter(const C2S_MovementCharacter& from);
  C2S_MovementCharacter(C2S_MovementCharacter&& from) noexcept
    : C2S_MovementCharacter() {
    *this = ::std::move(from);
  }

  inline C2S_MovementCharacter& operator=(const C2S_MovementCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_MovementCharacter& operator=(C2S_MovementCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_MovementCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_MovementCharacter* internal_default_instance() {
    return reinterpret_cast<const C2S_MovementCharacter*>(
               &_C2S_MovementCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C2S_MovementCharacter& a, C2S_MovementCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_MovementCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_MovementCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_MovementCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_MovementCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_MovementCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_MovementCharacter& from) {
    C2S_MovementCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_MovementCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_MovementCharacter";
  }
  protected:
  explicit C2S_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 2,
    kMoveLocationFieldNumber = 3,
    kMoveVelocityFieldNumber = 4,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SVector cur_location = 2;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 3;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // .Protocol.SVector move_velocity = 4;
  bool has_move_velocity() const;
  private:
  bool _internal_has_move_velocity() const;
  public:
  void clear_move_velocity();
  const ::Protocol::SVector& move_velocity() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_velocity();
  ::Protocol::SVector* mutable_move_velocity();
  void set_allocated_move_velocity(::Protocol::SVector* move_velocity);
  private:
  const ::Protocol::SVector& _internal_move_velocity() const;
  ::Protocol::SVector* _internal_mutable_move_velocity();
  public:
  void unsafe_arena_set_allocated_move_velocity(
      ::Protocol::SVector* move_velocity);
  ::Protocol::SVector* unsafe_arena_release_move_velocity();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_MovementCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    ::Protocol::SVector* move_velocity_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_MovementCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MovementCharacter) */ {
 public:
  inline S2C_MovementCharacter() : S2C_MovementCharacter(nullptr) {}
  ~S2C_MovementCharacter() override;
  explicit PROTOBUF_CONSTEXPR S2C_MovementCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MovementCharacter(const S2C_MovementCharacter& from);
  S2C_MovementCharacter(S2C_MovementCharacter&& from) noexcept
    : S2C_MovementCharacter() {
    *this = ::std::move(from);
  }

  inline S2C_MovementCharacter& operator=(const S2C_MovementCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MovementCharacter& operator=(S2C_MovementCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MovementCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MovementCharacter* internal_default_instance() {
    return reinterpret_cast<const S2C_MovementCharacter*>(
               &_S2C_MovementCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S2C_MovementCharacter& a, S2C_MovementCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MovementCharacter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MovementCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MovementCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MovementCharacter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MovementCharacter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MovementCharacter& from) {
    S2C_MovementCharacter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MovementCharacter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MovementCharacter";
  }
  protected:
  explicit S2C_MovementCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 3,
    kMoveLocationFieldNumber = 4,
    kMoveVelocityFieldNumber = 5,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // .Protocol.SVector cur_location = 3;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 4;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // .Protocol.SVector move_velocity = 5;
  bool has_move_velocity() const;
  private:
  bool _internal_has_move_velocity() const;
  public:
  void clear_move_velocity();
  const ::Protocol::SVector& move_velocity() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_velocity();
  ::Protocol::SVector* mutable_move_velocity();
  void set_allocated_move_velocity(::Protocol::SVector* move_velocity);
  private:
  const ::Protocol::SVector& _internal_move_velocity() const;
  ::Protocol::SVector* _internal_mutable_move_velocity();
  public:
  void unsafe_arena_set_allocated_move_velocity(
      ::Protocol::SVector* move_velocity);
  ::Protocol::SVector* unsafe_arena_release_move_velocity();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MovementCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    ::Protocol::SVector* move_velocity_;
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_PlayAnimation) */ {
 public:
  inline C2S_PlayAnimation() : C2S_PlayAnimation(nullptr) {}
  ~C2S_PlayAnimation() override;
  explicit PROTOBUF_CONSTEXPR C2S_PlayAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayAnimation(const C2S_PlayAnimation& from);
  C2S_PlayAnimation(C2S_PlayAnimation&& from) noexcept
    : C2S_PlayAnimation() {
    *this = ::std::move(from);
  }

  inline C2S_PlayAnimation& operator=(const C2S_PlayAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayAnimation& operator=(C2S_PlayAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayAnimation* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayAnimation*>(
               &_C2S_PlayAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C2S_PlayAnimation& a, C2S_PlayAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_PlayAnimation& from) {
    C2S_PlayAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_PlayAnimation";
  }
  protected:
  explicit C2S_PlayAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_PlayAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_PlayAnimation) */ {
 public:
  inline S2C_PlayAnimation() : S2C_PlayAnimation(nullptr) {}
  ~S2C_PlayAnimation() override;
  explicit PROTOBUF_CONSTEXPR S2C_PlayAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayAnimation(const S2C_PlayAnimation& from);
  S2C_PlayAnimation(S2C_PlayAnimation&& from) noexcept
    : S2C_PlayAnimation() {
    *this = ::std::move(from);
  }

  inline S2C_PlayAnimation& operator=(const S2C_PlayAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayAnimation& operator=(S2C_PlayAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayAnimation* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayAnimation*>(
               &_S2C_PlayAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S2C_PlayAnimation& a, S2C_PlayAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_PlayAnimation& from) {
    S2C_PlayAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_PlayAnimation";
  }
  protected:
  explicit S2C_PlayAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_PlayAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DetectChangePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DetectChangePlayer) */ {
 public:
  inline S2C_DetectChangePlayer() : S2C_DetectChangePlayer(nullptr) {}
  ~S2C_DetectChangePlayer() override;
  explicit PROTOBUF_CONSTEXPR S2C_DetectChangePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DetectChangePlayer(const S2C_DetectChangePlayer& from);
  S2C_DetectChangePlayer(S2C_DetectChangePlayer&& from) noexcept
    : S2C_DetectChangePlayer() {
    *this = ::std::move(from);
  }

  inline S2C_DetectChangePlayer& operator=(const S2C_DetectChangePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DetectChangePlayer& operator=(S2C_DetectChangePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DetectChangePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DetectChangePlayer* internal_default_instance() {
    return reinterpret_cast<const S2C_DetectChangePlayer*>(
               &_S2C_DetectChangePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S2C_DetectChangePlayer& a, S2C_DetectChangePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DetectChangePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DetectChangePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DetectChangePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DetectChangePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DetectChangePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DetectChangePlayer& from) {
    S2C_DetectChangePlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DetectChangePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DetectChangePlayer";
  }
  protected:
  explicit S2C_DetectChangePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // repeated .Protocol.SStat stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::Protocol::SStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
      mutable_stats();
  private:
  const ::Protocol::SStat& _internal_stats(int index) const;
  ::Protocol::SStat* _internal_add_stats();
  public:
  const ::Protocol::SStat& stats(int index) const;
  ::Protocol::SStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
      stats() const;

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DetectChangePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat > stats_;
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerAutoAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_PlayerAutoAttack) */ {
 public:
  inline C2S_PlayerAutoAttack() : C2S_PlayerAutoAttack(nullptr) {}
  ~C2S_PlayerAutoAttack() override;
  explicit PROTOBUF_CONSTEXPR C2S_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PlayerAutoAttack(const C2S_PlayerAutoAttack& from);
  C2S_PlayerAutoAttack(C2S_PlayerAutoAttack&& from) noexcept
    : C2S_PlayerAutoAttack() {
    *this = ::std::move(from);
  }

  inline C2S_PlayerAutoAttack& operator=(const C2S_PlayerAutoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerAutoAttack& operator=(C2S_PlayerAutoAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerAutoAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerAutoAttack* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerAutoAttack*>(
               &_C2S_PlayerAutoAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C2S_PlayerAutoAttack& a, C2S_PlayerAutoAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PlayerAutoAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerAutoAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerAutoAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PlayerAutoAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerAutoAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_PlayerAutoAttack& from) {
    C2S_PlayerAutoAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PlayerAutoAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_PlayerAutoAttack";
  }
  protected:
  explicit C2S_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_PlayerAutoAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerAutoAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_PlayerAutoAttack) */ {
 public:
  inline S2C_PlayerAutoAttack() : S2C_PlayerAutoAttack(nullptr) {}
  ~S2C_PlayerAutoAttack() override;
  explicit PROTOBUF_CONSTEXPR S2C_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayerAutoAttack(const S2C_PlayerAutoAttack& from);
  S2C_PlayerAutoAttack(S2C_PlayerAutoAttack&& from) noexcept
    : S2C_PlayerAutoAttack() {
    *this = ::std::move(from);
  }

  inline S2C_PlayerAutoAttack& operator=(const S2C_PlayerAutoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerAutoAttack& operator=(S2C_PlayerAutoAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerAutoAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerAutoAttack* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerAutoAttack*>(
               &_S2C_PlayerAutoAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S2C_PlayerAutoAttack& a, S2C_PlayerAutoAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayerAutoAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerAutoAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerAutoAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayerAutoAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerAutoAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_PlayerAutoAttack& from) {
    S2C_PlayerAutoAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayerAutoAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_PlayerAutoAttack";
  }
  protected:
  explicit S2C_PlayerAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 3,
    kRotationFieldNumber = 4,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 5,
    kComboFieldNumber = 2,
  };
  // .Protocol.SVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 combo = 2;
  void clear_combo();
  int32_t combo() const;
  void set_combo(int32_t value);
  private:
  int32_t _internal_combo() const;
  void _internal_set_combo(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_PlayerAutoAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    int64_t remote_id_;
    int64_t timestamp_;
    int32_t combo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerEndAutoAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_PlayerEndAutoAttack) */ {
 public:
  inline S2C_PlayerEndAutoAttack() : S2C_PlayerEndAutoAttack(nullptr) {}
  ~S2C_PlayerEndAutoAttack() override;
  explicit PROTOBUF_CONSTEXPR S2C_PlayerEndAutoAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlayerEndAutoAttack(const S2C_PlayerEndAutoAttack& from);
  S2C_PlayerEndAutoAttack(S2C_PlayerEndAutoAttack&& from) noexcept
    : S2C_PlayerEndAutoAttack() {
    *this = ::std::move(from);
  }

  inline S2C_PlayerEndAutoAttack& operator=(const S2C_PlayerEndAutoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerEndAutoAttack& operator=(S2C_PlayerEndAutoAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerEndAutoAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerEndAutoAttack* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerEndAutoAttack*>(
               &_S2C_PlayerEndAutoAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S2C_PlayerEndAutoAttack& a, S2C_PlayerEndAutoAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlayerEndAutoAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerEndAutoAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerEndAutoAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlayerEndAutoAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerEndAutoAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_PlayerEndAutoAttack& from) {
    S2C_PlayerEndAutoAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlayerEndAutoAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_PlayerEndAutoAttack";
  }
  protected:
  explicit S2C_PlayerEndAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_PlayerEndAutoAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_UpdateExperience final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_UpdateExperience) */ {
 public:
  inline S2C_UpdateExperience() : S2C_UpdateExperience(nullptr) {}
  ~S2C_UpdateExperience() override;
  explicit PROTOBUF_CONSTEXPR S2C_UpdateExperience(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_UpdateExperience(const S2C_UpdateExperience& from);
  S2C_UpdateExperience(S2C_UpdateExperience&& from) noexcept
    : S2C_UpdateExperience() {
    *this = ::std::move(from);
  }

  inline S2C_UpdateExperience& operator=(const S2C_UpdateExperience& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_UpdateExperience& operator=(S2C_UpdateExperience&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_UpdateExperience& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_UpdateExperience* internal_default_instance() {
    return reinterpret_cast<const S2C_UpdateExperience*>(
               &_S2C_UpdateExperience_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S2C_UpdateExperience& a, S2C_UpdateExperience& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_UpdateExperience* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_UpdateExperience* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_UpdateExperience* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_UpdateExperience>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_UpdateExperience& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_UpdateExperience& from) {
    S2C_UpdateExperience::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_UpdateExperience* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_UpdateExperience";
  }
  protected:
  explicit S2C_UpdateExperience(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kExperienceFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 experience = 2;
  void clear_experience();
  int32_t experience() const;
  void set_experience(int32_t value);
  private:
  int32_t _internal_experience() const;
  void _internal_set_experience(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_UpdateExperience)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    int32_t experience_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LevelUp) */ {
 public:
  inline S2C_LevelUp() : S2C_LevelUp(nullptr) {}
  ~S2C_LevelUp() override;
  explicit PROTOBUF_CONSTEXPR S2C_LevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LevelUp(const S2C_LevelUp& from);
  S2C_LevelUp(S2C_LevelUp&& from) noexcept
    : S2C_LevelUp() {
    *this = ::std::move(from);
  }

  inline S2C_LevelUp& operator=(const S2C_LevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LevelUp& operator=(S2C_LevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LevelUp* internal_default_instance() {
    return reinterpret_cast<const S2C_LevelUp*>(
               &_S2C_LevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S2C_LevelUp& a, S2C_LevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LevelUp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LevelUp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LevelUp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LevelUp& from) {
    S2C_LevelUp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LevelUp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LevelUp";
  }
  protected:
  explicit S2C_LevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kExperienceFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 experience = 3;
  void clear_experience();
  int32_t experience() const;
  void set_experience(int32_t value);
  private:
  int32_t _internal_experience() const;
  void _internal_set_experience(int32_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t level_;
    int32_t experience_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_Chat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_Chat) */ {
 public:
  inline C2S_Chat() : C2S_Chat(nullptr) {}
  ~C2S_Chat() override;
  explicit PROTOBUF_CONSTEXPR C2S_Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_Chat(const C2S_Chat& from);
  C2S_Chat(C2S_Chat&& from) noexcept
    : C2S_Chat() {
    *this = ::std::move(from);
  }

  inline C2S_Chat& operator=(const C2S_Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_Chat& operator=(C2S_Chat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_Chat& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_Chat* internal_default_instance() {
    return reinterpret_cast<const C2S_Chat*>(
               &_C2S_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C2S_Chat& a, C2S_Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_Chat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_Chat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_Chat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_Chat& from) {
    C2S_Chat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_Chat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_Chat";
  }
  protected:
  explicit C2S_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_Chat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Chat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Chat) */ {
 public:
  inline S2C_Chat() : S2C_Chat(nullptr) {}
  ~S2C_Chat() override;
  explicit PROTOBUF_CONSTEXPR S2C_Chat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Chat(const S2C_Chat& from);
  S2C_Chat(S2C_Chat&& from) noexcept
    : S2C_Chat() {
    *this = ::std::move(from);
  }

  inline S2C_Chat& operator=(const S2C_Chat& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Chat& operator=(S2C_Chat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Chat& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Chat* internal_default_instance() {
    return reinterpret_cast<const S2C_Chat*>(
               &_S2C_Chat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S2C_Chat& a, S2C_Chat& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Chat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Chat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Chat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Chat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Chat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Chat& from) {
    S2C_Chat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Chat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Chat";
  }
  protected:
  explicit S2C_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMessageFieldNumber = 3,
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 5,
    kChatTypeFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .Protocol.EChat chat_type = 4;
  void clear_chat_type();
  ::Protocol::EChat chat_type() const;
  void set_chat_type(::Protocol::EChat value);
  private:
  ::Protocol::EChat _internal_chat_type() const;
  void _internal_set_chat_type(::Protocol::EChat value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Chat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int64_t remote_id_;
    int64_t timestamp_;
    int chat_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadFriendList) */ {
 public:
  inline C2S_LoadFriendList() : C2S_LoadFriendList(nullptr) {}
  ~C2S_LoadFriendList() override;
  explicit PROTOBUF_CONSTEXPR C2S_LoadFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadFriendList(const C2S_LoadFriendList& from);
  C2S_LoadFriendList(C2S_LoadFriendList&& from) noexcept
    : C2S_LoadFriendList() {
    *this = ::std::move(from);
  }

  inline C2S_LoadFriendList& operator=(const C2S_LoadFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadFriendList& operator=(C2S_LoadFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadFriendList* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadFriendList*>(
               &_C2S_LoadFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C2S_LoadFriendList& a, C2S_LoadFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadFriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadFriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LoadFriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LoadFriendList& from) {
    C2S_LoadFriendList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoadFriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadFriendList";
  }
  protected:
  explicit C2S_LoadFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kListTypeFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 list_type = 1;
  void clear_list_type();
  int32_t list_type() const;
  void set_list_type(int32_t value);
  private:
  int32_t _internal_list_type() const;
  void _internal_set_list_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t list_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadFriendList) */ {
 public:
  inline S2C_LoadFriendList() : S2C_LoadFriendList(nullptr) {}
  ~S2C_LoadFriendList() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadFriendList(const S2C_LoadFriendList& from);
  S2C_LoadFriendList(S2C_LoadFriendList&& from) noexcept
    : S2C_LoadFriendList() {
    *this = ::std::move(from);
  }

  inline S2C_LoadFriendList& operator=(const S2C_LoadFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadFriendList& operator=(S2C_LoadFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadFriendList* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadFriendList*>(
               &_S2C_LoadFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S2C_LoadFriendList& a, S2C_LoadFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadFriendList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadFriendList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadFriendList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadFriendList& from) {
    S2C_LoadFriendList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadFriendList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadFriendList";
  }
  protected:
  explicit S2C_LoadFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kListTypeFieldNumber = 2,
  };
  // repeated .Protocol.SFriend friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::Protocol::SFriend* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SFriend >*
      mutable_friends();
  private:
  const ::Protocol::SFriend& _internal_friends(int index) const;
  ::Protocol::SFriend* _internal_add_friends();
  public:
  const ::Protocol::SFriend& friends(int index) const;
  ::Protocol::SFriend* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SFriend >&
      friends() const;

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 list_type = 2;
  void clear_list_type();
  int32_t list_type() const;
  void set_list_type(int32_t value);
  private:
  int32_t _internal_list_type() const;
  void _internal_set_list_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SFriend > friends_;
    int64_t timestamp_;
    int32_t list_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_RequestFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_RequestFriend) */ {
 public:
  inline C2S_RequestFriend() : C2S_RequestFriend(nullptr) {}
  ~C2S_RequestFriend() override;
  explicit PROTOBUF_CONSTEXPR C2S_RequestFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_RequestFriend(const C2S_RequestFriend& from);
  C2S_RequestFriend(C2S_RequestFriend&& from) noexcept
    : C2S_RequestFriend() {
    *this = ::std::move(from);
  }

  inline C2S_RequestFriend& operator=(const C2S_RequestFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_RequestFriend& operator=(C2S_RequestFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_RequestFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_RequestFriend* internal_default_instance() {
    return reinterpret_cast<const C2S_RequestFriend*>(
               &_C2S_RequestFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C2S_RequestFriend& a, C2S_RequestFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_RequestFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_RequestFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_RequestFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_RequestFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_RequestFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_RequestFriend& from) {
    C2S_RequestFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_RequestFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_RequestFriend";
  }
  protected:
  explicit C2S_RequestFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // bytes nick_name = 1;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 action = 2;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_RequestFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t timestamp_;
    int32_t action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RequestFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RequestFriend) */ {
 public:
  inline S2C_RequestFriend() : S2C_RequestFriend(nullptr) {}
  ~S2C_RequestFriend() override;
  explicit PROTOBUF_CONSTEXPR S2C_RequestFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RequestFriend(const S2C_RequestFriend& from);
  S2C_RequestFriend(S2C_RequestFriend&& from) noexcept
    : S2C_RequestFriend() {
    *this = ::std::move(from);
  }

  inline S2C_RequestFriend& operator=(const S2C_RequestFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RequestFriend& operator=(S2C_RequestFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RequestFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RequestFriend* internal_default_instance() {
    return reinterpret_cast<const S2C_RequestFriend*>(
               &_S2C_RequestFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S2C_RequestFriend& a, S2C_RequestFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RequestFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RequestFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RequestFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RequestFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RequestFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RequestFriend& from) {
    S2C_RequestFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RequestFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RequestFriend";
  }
  protected:
  explicit S2C_RequestFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kActionFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 action = 2;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RequestFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t action_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_BlockFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_BlockFriend) */ {
 public:
  inline C2S_BlockFriend() : C2S_BlockFriend(nullptr) {}
  ~C2S_BlockFriend() override;
  explicit PROTOBUF_CONSTEXPR C2S_BlockFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_BlockFriend(const C2S_BlockFriend& from);
  C2S_BlockFriend(C2S_BlockFriend&& from) noexcept
    : C2S_BlockFriend() {
    *this = ::std::move(from);
  }

  inline C2S_BlockFriend& operator=(const C2S_BlockFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_BlockFriend& operator=(C2S_BlockFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_BlockFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_BlockFriend* internal_default_instance() {
    return reinterpret_cast<const C2S_BlockFriend*>(
               &_C2S_BlockFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C2S_BlockFriend& a, C2S_BlockFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_BlockFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_BlockFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_BlockFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_BlockFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_BlockFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_BlockFriend& from) {
    C2S_BlockFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_BlockFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_BlockFriend";
  }
  protected:
  explicit C2S_BlockFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // bytes nick_name = 1;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 action = 2;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_BlockFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t timestamp_;
    int32_t action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_BlockFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_BlockFriend) */ {
 public:
  inline S2C_BlockFriend() : S2C_BlockFriend(nullptr) {}
  ~S2C_BlockFriend() override;
  explicit PROTOBUF_CONSTEXPR S2C_BlockFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_BlockFriend(const S2C_BlockFriend& from);
  S2C_BlockFriend(S2C_BlockFriend&& from) noexcept
    : S2C_BlockFriend() {
    *this = ::std::move(from);
  }

  inline S2C_BlockFriend& operator=(const S2C_BlockFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_BlockFriend& operator=(S2C_BlockFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_BlockFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_BlockFriend* internal_default_instance() {
    return reinterpret_cast<const S2C_BlockFriend*>(
               &_S2C_BlockFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S2C_BlockFriend& a, S2C_BlockFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_BlockFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_BlockFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_BlockFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_BlockFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_BlockFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_BlockFriend& from) {
    S2C_BlockFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_BlockFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_BlockFriend";
  }
  protected:
  explicit S2C_BlockFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kActionFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 action = 2;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_BlockFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t action_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ConnectFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ConnectFriend) */ {
 public:
  inline S2C_ConnectFriend() : S2C_ConnectFriend(nullptr) {}
  ~S2C_ConnectFriend() override;
  explicit PROTOBUF_CONSTEXPR S2C_ConnectFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ConnectFriend(const S2C_ConnectFriend& from);
  S2C_ConnectFriend(S2C_ConnectFriend&& from) noexcept
    : S2C_ConnectFriend() {
    *this = ::std::move(from);
  }

  inline S2C_ConnectFriend& operator=(const S2C_ConnectFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ConnectFriend& operator=(S2C_ConnectFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ConnectFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ConnectFriend* internal_default_instance() {
    return reinterpret_cast<const S2C_ConnectFriend*>(
               &_S2C_ConnectFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(S2C_ConnectFriend& a, S2C_ConnectFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ConnectFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ConnectFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ConnectFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ConnectFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ConnectFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ConnectFriend& from) {
    S2C_ConnectFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ConnectFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ConnectFriend";
  }
  protected:
  explicit S2C_ConnectFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes nick_name = 1;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ConnectFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DisConnectFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DisConnectFriend) */ {
 public:
  inline S2C_DisConnectFriend() : S2C_DisConnectFriend(nullptr) {}
  ~S2C_DisConnectFriend() override;
  explicit PROTOBUF_CONSTEXPR S2C_DisConnectFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DisConnectFriend(const S2C_DisConnectFriend& from);
  S2C_DisConnectFriend(S2C_DisConnectFriend&& from) noexcept
    : S2C_DisConnectFriend() {
    *this = ::std::move(from);
  }

  inline S2C_DisConnectFriend& operator=(const S2C_DisConnectFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DisConnectFriend& operator=(S2C_DisConnectFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DisConnectFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DisConnectFriend* internal_default_instance() {
    return reinterpret_cast<const S2C_DisConnectFriend*>(
               &_S2C_DisConnectFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S2C_DisConnectFriend& a, S2C_DisConnectFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DisConnectFriend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DisConnectFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DisConnectFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DisConnectFriend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DisConnectFriend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DisConnectFriend& from) {
    S2C_DisConnectFriend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DisConnectFriend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DisConnectFriend";
  }
  protected:
  explicit S2C_DisConnectFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes nick_name = 1;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DisConnectFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_CreateParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_CreateParty) */ {
 public:
  inline C2S_CreateParty() : C2S_CreateParty(nullptr) {}
  ~C2S_CreateParty() override;
  explicit PROTOBUF_CONSTEXPR C2S_CreateParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CreateParty(const C2S_CreateParty& from);
  C2S_CreateParty(C2S_CreateParty&& from) noexcept
    : C2S_CreateParty() {
    *this = ::std::move(from);
  }

  inline C2S_CreateParty& operator=(const C2S_CreateParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CreateParty& operator=(C2S_CreateParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CreateParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CreateParty* internal_default_instance() {
    return reinterpret_cast<const C2S_CreateParty*>(
               &_C2S_CreateParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C2S_CreateParty& a, C2S_CreateParty& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CreateParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CreateParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CreateParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CreateParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_CreateParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_CreateParty& from) {
    C2S_CreateParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CreateParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CreateParty";
  }
  protected:
  explicit C2S_CreateParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CreateParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_CreateParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_CreateParty) */ {
 public:
  inline S2C_CreateParty() : S2C_CreateParty(nullptr) {}
  ~S2C_CreateParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_CreateParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CreateParty(const S2C_CreateParty& from);
  S2C_CreateParty(S2C_CreateParty&& from) noexcept
    : S2C_CreateParty() {
    *this = ::std::move(from);
  }

  inline S2C_CreateParty& operator=(const S2C_CreateParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CreateParty& operator=(S2C_CreateParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CreateParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CreateParty* internal_default_instance() {
    return reinterpret_cast<const S2C_CreateParty*>(
               &_S2C_CreateParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S2C_CreateParty& a, S2C_CreateParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CreateParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CreateParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CreateParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CreateParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_CreateParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_CreateParty& from) {
    S2C_CreateParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_CreateParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CreateParty";
  }
  protected:
  explicit S2C_CreateParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CreateParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_RequestEnterParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_RequestEnterParty) */ {
 public:
  inline C2S_RequestEnterParty() : C2S_RequestEnterParty(nullptr) {}
  ~C2S_RequestEnterParty() override;
  explicit PROTOBUF_CONSTEXPR C2S_RequestEnterParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_RequestEnterParty(const C2S_RequestEnterParty& from);
  C2S_RequestEnterParty(C2S_RequestEnterParty&& from) noexcept
    : C2S_RequestEnterParty() {
    *this = ::std::move(from);
  }

  inline C2S_RequestEnterParty& operator=(const C2S_RequestEnterParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_RequestEnterParty& operator=(C2S_RequestEnterParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_RequestEnterParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_RequestEnterParty* internal_default_instance() {
    return reinterpret_cast<const C2S_RequestEnterParty*>(
               &_C2S_RequestEnterParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(C2S_RequestEnterParty& a, C2S_RequestEnterParty& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_RequestEnterParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_RequestEnterParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_RequestEnterParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_RequestEnterParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_RequestEnterParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_RequestEnterParty& from) {
    C2S_RequestEnterParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_RequestEnterParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_RequestEnterParty";
  }
  protected:
  explicit C2S_RequestEnterParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes nick_name = 1;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_RequestEnterParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RequestEnterParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RequestEnterParty) */ {
 public:
  inline S2C_RequestEnterParty() : S2C_RequestEnterParty(nullptr) {}
  ~S2C_RequestEnterParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_RequestEnterParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RequestEnterParty(const S2C_RequestEnterParty& from);
  S2C_RequestEnterParty(S2C_RequestEnterParty&& from) noexcept
    : S2C_RequestEnterParty() {
    *this = ::std::move(from);
  }

  inline S2C_RequestEnterParty& operator=(const S2C_RequestEnterParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RequestEnterParty& operator=(S2C_RequestEnterParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RequestEnterParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RequestEnterParty* internal_default_instance() {
    return reinterpret_cast<const S2C_RequestEnterParty*>(
               &_S2C_RequestEnterParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(S2C_RequestEnterParty& a, S2C_RequestEnterParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RequestEnterParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RequestEnterParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RequestEnterParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RequestEnterParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RequestEnterParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RequestEnterParty& from) {
    S2C_RequestEnterParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RequestEnterParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RequestEnterParty";
  }
  protected:
  explicit S2C_RequestEnterParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RequestEnterParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RequestParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RequestParty) */ {
 public:
  inline S2C_RequestParty() : S2C_RequestParty(nullptr) {}
  ~S2C_RequestParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_RequestParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RequestParty(const S2C_RequestParty& from);
  S2C_RequestParty(S2C_RequestParty&& from) noexcept
    : S2C_RequestParty() {
    *this = ::std::move(from);
  }

  inline S2C_RequestParty& operator=(const S2C_RequestParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RequestParty& operator=(S2C_RequestParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RequestParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RequestParty* internal_default_instance() {
    return reinterpret_cast<const S2C_RequestParty*>(
               &_S2C_RequestParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(S2C_RequestParty& a, S2C_RequestParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RequestParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RequestParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RequestParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RequestParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RequestParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RequestParty& from) {
    S2C_RequestParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RequestParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RequestParty";
  }
  protected:
  explicit S2C_RequestParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
    kLevelFieldNumber = 3,
    kCharacterClassFieldNumber = 4,
  };
  // bytes nick_name = 2;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // .Protocol.ECharacterClass character_class = 4;
  void clear_character_class();
  ::Protocol::ECharacterClass character_class() const;
  void set_character_class(::Protocol::ECharacterClass value);
  private:
  ::Protocol::ECharacterClass _internal_character_class() const;
  void _internal_set_character_class(::Protocol::ECharacterClass value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RequestParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t remote_id_;
    int32_t level_;
    int character_class_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_RequestLeaveParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_RequestLeaveParty) */ {
 public:
  inline C2S_RequestLeaveParty() : C2S_RequestLeaveParty(nullptr) {}
  ~C2S_RequestLeaveParty() override;
  explicit PROTOBUF_CONSTEXPR C2S_RequestLeaveParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_RequestLeaveParty(const C2S_RequestLeaveParty& from);
  C2S_RequestLeaveParty(C2S_RequestLeaveParty&& from) noexcept
    : C2S_RequestLeaveParty() {
    *this = ::std::move(from);
  }

  inline C2S_RequestLeaveParty& operator=(const C2S_RequestLeaveParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_RequestLeaveParty& operator=(C2S_RequestLeaveParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_RequestLeaveParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_RequestLeaveParty* internal_default_instance() {
    return reinterpret_cast<const C2S_RequestLeaveParty*>(
               &_C2S_RequestLeaveParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(C2S_RequestLeaveParty& a, C2S_RequestLeaveParty& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_RequestLeaveParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_RequestLeaveParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_RequestLeaveParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_RequestLeaveParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_RequestLeaveParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_RequestLeaveParty& from) {
    C2S_RequestLeaveParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_RequestLeaveParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_RequestLeaveParty";
  }
  protected:
  explicit C2S_RequestLeaveParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_RequestLeaveParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RequestLeaveParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RequestLeaveParty) */ {
 public:
  inline S2C_RequestLeaveParty() : S2C_RequestLeaveParty(nullptr) {}
  ~S2C_RequestLeaveParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_RequestLeaveParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RequestLeaveParty(const S2C_RequestLeaveParty& from);
  S2C_RequestLeaveParty(S2C_RequestLeaveParty&& from) noexcept
    : S2C_RequestLeaveParty() {
    *this = ::std::move(from);
  }

  inline S2C_RequestLeaveParty& operator=(const S2C_RequestLeaveParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RequestLeaveParty& operator=(S2C_RequestLeaveParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RequestLeaveParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RequestLeaveParty* internal_default_instance() {
    return reinterpret_cast<const S2C_RequestLeaveParty*>(
               &_S2C_RequestLeaveParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(S2C_RequestLeaveParty& a, S2C_RequestLeaveParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RequestLeaveParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RequestLeaveParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RequestLeaveParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RequestLeaveParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RequestLeaveParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RequestLeaveParty& from) {
    S2C_RequestLeaveParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RequestLeaveParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RequestLeaveParty";
  }
  protected:
  explicit S2C_RequestLeaveParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kCauseFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 cause = 2;
  void clear_cause();
  int32_t cause() const;
  void set_cause(int32_t value);
  private:
  int32_t _internal_cause() const;
  void _internal_set_cause(int32_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RequestLeaveParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t cause_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_RequestLeaderParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_RequestLeaderParty) */ {
 public:
  inline C2S_RequestLeaderParty() : C2S_RequestLeaderParty(nullptr) {}
  ~C2S_RequestLeaderParty() override;
  explicit PROTOBUF_CONSTEXPR C2S_RequestLeaderParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_RequestLeaderParty(const C2S_RequestLeaderParty& from);
  C2S_RequestLeaderParty(C2S_RequestLeaderParty&& from) noexcept
    : C2S_RequestLeaderParty() {
    *this = ::std::move(from);
  }

  inline C2S_RequestLeaderParty& operator=(const C2S_RequestLeaderParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_RequestLeaderParty& operator=(C2S_RequestLeaderParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_RequestLeaderParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_RequestLeaderParty* internal_default_instance() {
    return reinterpret_cast<const C2S_RequestLeaderParty*>(
               &_C2S_RequestLeaderParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(C2S_RequestLeaderParty& a, C2S_RequestLeaderParty& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_RequestLeaderParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_RequestLeaderParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_RequestLeaderParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_RequestLeaderParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_RequestLeaderParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_RequestLeaderParty& from) {
    C2S_RequestLeaderParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_RequestLeaderParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_RequestLeaderParty";
  }
  protected:
  explicit C2S_RequestLeaderParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_RequestLeaderParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RequestLeaderParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RequestLeaderParty) */ {
 public:
  inline S2C_RequestLeaderParty() : S2C_RequestLeaderParty(nullptr) {}
  ~S2C_RequestLeaderParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_RequestLeaderParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RequestLeaderParty(const S2C_RequestLeaderParty& from);
  S2C_RequestLeaderParty(S2C_RequestLeaderParty&& from) noexcept
    : S2C_RequestLeaderParty() {
    *this = ::std::move(from);
  }

  inline S2C_RequestLeaderParty& operator=(const S2C_RequestLeaderParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RequestLeaderParty& operator=(S2C_RequestLeaderParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RequestLeaderParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RequestLeaderParty* internal_default_instance() {
    return reinterpret_cast<const S2C_RequestLeaderParty*>(
               &_S2C_RequestLeaderParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(S2C_RequestLeaderParty& a, S2C_RequestLeaderParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RequestLeaderParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RequestLeaderParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RequestLeaderParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RequestLeaderParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RequestLeaderParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RequestLeaderParty& from) {
    S2C_RequestLeaderParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RequestLeaderParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RequestLeaderParty";
  }
  protected:
  explicit S2C_RequestLeaderParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RequestLeaderParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_ResponeParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_ResponeParty) */ {
 public:
  inline C2S_ResponeParty() : C2S_ResponeParty(nullptr) {}
  ~C2S_ResponeParty() override;
  explicit PROTOBUF_CONSTEXPR C2S_ResponeParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_ResponeParty(const C2S_ResponeParty& from);
  C2S_ResponeParty(C2S_ResponeParty&& from) noexcept
    : C2S_ResponeParty() {
    *this = ::std::move(from);
  }

  inline C2S_ResponeParty& operator=(const C2S_ResponeParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ResponeParty& operator=(C2S_ResponeParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_ResponeParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_ResponeParty* internal_default_instance() {
    return reinterpret_cast<const C2S_ResponeParty*>(
               &_C2S_ResponeParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(C2S_ResponeParty& a, C2S_ResponeParty& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ResponeParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_ResponeParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_ResponeParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_ResponeParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_ResponeParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_ResponeParty& from) {
    C2S_ResponeParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_ResponeParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_ResponeParty";
  }
  protected:
  explicit C2S_ResponeParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 action = 2;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_ResponeParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    int32_t action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ResponeParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ResponeParty) */ {
 public:
  inline S2C_ResponeParty() : S2C_ResponeParty(nullptr) {}
  ~S2C_ResponeParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_ResponeParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ResponeParty(const S2C_ResponeParty& from);
  S2C_ResponeParty(S2C_ResponeParty&& from) noexcept
    : S2C_ResponeParty() {
    *this = ::std::move(from);
  }

  inline S2C_ResponeParty& operator=(const S2C_ResponeParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ResponeParty& operator=(S2C_ResponeParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ResponeParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ResponeParty* internal_default_instance() {
    return reinterpret_cast<const S2C_ResponeParty*>(
               &_S2C_ResponeParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(S2C_ResponeParty& a, S2C_ResponeParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ResponeParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ResponeParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ResponeParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ResponeParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ResponeParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ResponeParty& from) {
    S2C_ResponeParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ResponeParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ResponeParty";
  }
  protected:
  explicit S2C_ResponeParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 2,
    kErrorFieldNumber = 1,
    kActionFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // int64 remote_id = 2;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 action = 3;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ResponeParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int32_t error_;
    int32_t action_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadParty) */ {
 public:
  inline S2C_LoadParty() : S2C_LoadParty(nullptr) {}
  ~S2C_LoadParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadParty(const S2C_LoadParty& from);
  S2C_LoadParty(S2C_LoadParty&& from) noexcept
    : S2C_LoadParty() {
    *this = ::std::move(from);
  }

  inline S2C_LoadParty& operator=(const S2C_LoadParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadParty& operator=(S2C_LoadParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadParty* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadParty*>(
               &_S2C_LoadParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(S2C_LoadParty& a, S2C_LoadParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadParty& from) {
    S2C_LoadParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadParty";
  }
  protected:
  explicit S2C_LoadParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 3,
    kNickNameFieldNumber = 4,
    kLevelFieldNumber = 5,
    kCharacterClassFieldNumber = 6,
    kLeaderIdFieldNumber = 2,
    kTimestampFieldNumber = 7,
    kErrorFieldNumber = 1,
  };
  // repeated int64 remote_id = 3;
  int remote_id_size() const;
  private:
  int _internal_remote_id_size() const;
  public:
  void clear_remote_id();
  private:
  int64_t _internal_remote_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_remote_id() const;
  void _internal_add_remote_id(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_remote_id();
  public:
  int64_t remote_id(int index) const;
  void set_remote_id(int index, int64_t value);
  void add_remote_id(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      remote_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_remote_id();

  // repeated bytes nick_name = 4;
  int nick_name_size() const;
  private:
  int _internal_nick_name_size() const;
  public:
  void clear_nick_name();
  const std::string& nick_name(int index) const;
  std::string* mutable_nick_name(int index);
  void set_nick_name(int index, const std::string& value);
  void set_nick_name(int index, std::string&& value);
  void set_nick_name(int index, const char* value);
  void set_nick_name(int index, const void* value, size_t size);
  std::string* add_nick_name();
  void add_nick_name(const std::string& value);
  void add_nick_name(std::string&& value);
  void add_nick_name(const char* value);
  void add_nick_name(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nick_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nick_name();
  private:
  const std::string& _internal_nick_name(int index) const;
  std::string* _internal_add_nick_name();
  public:

  // repeated int32 level = 5;
  int level_size() const;
  private:
  int _internal_level_size() const;
  public:
  void clear_level();
  private:
  int32_t _internal_level(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_level() const;
  void _internal_add_level(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_level();
  public:
  int32_t level(int index) const;
  void set_level(int index, int32_t value);
  void add_level(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_level();

  // repeated .Protocol.ECharacterClass character_class = 6;
  int character_class_size() const;
  private:
  int _internal_character_class_size() const;
  public:
  void clear_character_class();
  private:
  ::Protocol::ECharacterClass _internal_character_class(int index) const;
  void _internal_add_character_class(::Protocol::ECharacterClass value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_character_class();
  public:
  ::Protocol::ECharacterClass character_class(int index) const;
  void set_character_class(int index, ::Protocol::ECharacterClass value);
  void add_character_class(::Protocol::ECharacterClass value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& character_class() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_character_class();

  // int64 leader_id = 2;
  void clear_leader_id();
  int64_t leader_id() const;
  void set_leader_id(int64_t value);
  private:
  int64_t _internal_leader_id() const;
  void _internal_set_leader_id(int64_t value);
  public:

  // int64 timestamp = 7;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > remote_id_;
    mutable std::atomic<int> _remote_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nick_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > level_;
    mutable std::atomic<int> _level_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> character_class_;
    mutable std::atomic<int> _character_class_cached_byte_size_;
    int64_t leader_id_;
    int64_t timestamp_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_NotifyParty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_NotifyParty) */ {
 public:
  inline S2C_NotifyParty() : S2C_NotifyParty(nullptr) {}
  ~S2C_NotifyParty() override;
  explicit PROTOBUF_CONSTEXPR S2C_NotifyParty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_NotifyParty(const S2C_NotifyParty& from);
  S2C_NotifyParty(S2C_NotifyParty&& from) noexcept
    : S2C_NotifyParty() {
    *this = ::std::move(from);
  }

  inline S2C_NotifyParty& operator=(const S2C_NotifyParty& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_NotifyParty& operator=(S2C_NotifyParty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_NotifyParty& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_NotifyParty* internal_default_instance() {
    return reinterpret_cast<const S2C_NotifyParty*>(
               &_S2C_NotifyParty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(S2C_NotifyParty& a, S2C_NotifyParty& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_NotifyParty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_NotifyParty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_NotifyParty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_NotifyParty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_NotifyParty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_NotifyParty& from) {
    S2C_NotifyParty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_NotifyParty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_NotifyParty";
  }
  protected:
  explicit S2C_NotifyParty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kActionFieldNumber = 2,
  };
  // bytes nick_name = 1;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 action = 2;
  void clear_action();
  int32_t action() const;
  void set_action(int32_t value);
  private:
  int32_t _internal_action() const;
  void _internal_set_action(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_NotifyParty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t timestamp_;
    int32_t action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterPartyPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterPartyPlayer) */ {
 public:
  inline S2C_EnterPartyPlayer() : S2C_EnterPartyPlayer(nullptr) {}
  ~S2C_EnterPartyPlayer() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnterPartyPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterPartyPlayer(const S2C_EnterPartyPlayer& from);
  S2C_EnterPartyPlayer(S2C_EnterPartyPlayer&& from) noexcept
    : S2C_EnterPartyPlayer() {
    *this = ::std::move(from);
  }

  inline S2C_EnterPartyPlayer& operator=(const S2C_EnterPartyPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterPartyPlayer& operator=(S2C_EnterPartyPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterPartyPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterPartyPlayer* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterPartyPlayer*>(
               &_S2C_EnterPartyPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(S2C_EnterPartyPlayer& a, S2C_EnterPartyPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterPartyPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterPartyPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterPartyPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterPartyPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnterPartyPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnterPartyPlayer& from) {
    S2C_EnterPartyPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnterPartyPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterPartyPlayer";
  }
  protected:
  explicit S2C_EnterPartyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNickNameFieldNumber = 3,
    kRemoteIdFieldNumber = 1,
    kLeaderIdFieldNumber = 2,
    kLevelFieldNumber = 4,
    kCharacterClassFieldNumber = 5,
    kTimestampFieldNumber = 6,
  };
  // bytes nick_name = 3;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_NODISCARD std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 leader_id = 2;
  void clear_leader_id();
  int64_t leader_id() const;
  void set_leader_id(int64_t value);
  private:
  int64_t _internal_leader_id() const;
  void _internal_set_leader_id(int64_t value);
  public:

  // int32 level = 4;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // .Protocol.ECharacterClass character_class = 5;
  void clear_character_class();
  ::Protocol::ECharacterClass character_class() const;
  void set_character_class(::Protocol::ECharacterClass value);
  private:
  ::Protocol::ECharacterClass _internal_character_class() const;
  void _internal_set_character_class(::Protocol::ECharacterClass value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterPartyPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
    int64_t remote_id_;
    int64_t leader_id_;
    int32_t level_;
    int character_class_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeavePartyPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeavePartyPlayer) */ {
 public:
  inline S2C_LeavePartyPlayer() : S2C_LeavePartyPlayer(nullptr) {}
  ~S2C_LeavePartyPlayer() override;
  explicit PROTOBUF_CONSTEXPR S2C_LeavePartyPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeavePartyPlayer(const S2C_LeavePartyPlayer& from);
  S2C_LeavePartyPlayer(S2C_LeavePartyPlayer&& from) noexcept
    : S2C_LeavePartyPlayer() {
    *this = ::std::move(from);
  }

  inline S2C_LeavePartyPlayer& operator=(const S2C_LeavePartyPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeavePartyPlayer& operator=(S2C_LeavePartyPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeavePartyPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeavePartyPlayer* internal_default_instance() {
    return reinterpret_cast<const S2C_LeavePartyPlayer*>(
               &_S2C_LeavePartyPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(S2C_LeavePartyPlayer& a, S2C_LeavePartyPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeavePartyPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeavePartyPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeavePartyPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeavePartyPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LeavePartyPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LeavePartyPlayer& from) {
    S2C_LeavePartyPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LeavePartyPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeavePartyPlayer";
  }
  protected:
  explicit S2C_LeavePartyPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeavePartyPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearItem) */ {
 public:
  inline S2C_AppearItem() : S2C_AppearItem(nullptr) {}
  ~S2C_AppearItem() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearItem(const S2C_AppearItem& from);
  S2C_AppearItem(S2C_AppearItem&& from) noexcept
    : S2C_AppearItem() {
    *this = ::std::move(from);
  }

  inline S2C_AppearItem& operator=(const S2C_AppearItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearItem& operator=(S2C_AppearItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearItem* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearItem*>(
               &_S2C_AppearItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(S2C_AppearItem& a, S2C_AppearItem& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearItem& from) {
    S2C_AppearItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearItem";
  }
  protected:
  explicit S2C_AppearItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .Protocol.SItem item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearArrow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearArrow) */ {
 public:
  inline S2C_AppearArrow() : S2C_AppearArrow(nullptr) {}
  ~S2C_AppearArrow() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearArrow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearArrow(const S2C_AppearArrow& from);
  S2C_AppearArrow(S2C_AppearArrow&& from) noexcept
    : S2C_AppearArrow() {
    *this = ::std::move(from);
  }

  inline S2C_AppearArrow& operator=(const S2C_AppearArrow& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearArrow& operator=(S2C_AppearArrow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearArrow& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearArrow* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearArrow*>(
               &_S2C_AppearArrow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(S2C_AppearArrow& a, S2C_AppearArrow& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearArrow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearArrow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearArrow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearArrow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearArrow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearArrow& from) {
    S2C_AppearArrow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearArrow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearArrow";
  }
  protected:
  explicit S2C_AppearArrow(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kRotationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // .Protocol.SVector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearArrow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearProtal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearProtal) */ {
 public:
  inline S2C_AppearProtal() : S2C_AppearProtal(nullptr) {}
  ~S2C_AppearProtal() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearProtal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearProtal(const S2C_AppearProtal& from);
  S2C_AppearProtal(S2C_AppearProtal&& from) noexcept
    : S2C_AppearProtal() {
    *this = ::std::move(from);
  }

  inline S2C_AppearProtal& operator=(const S2C_AppearProtal& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearProtal& operator=(S2C_AppearProtal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearProtal& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearProtal* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearProtal*>(
               &_S2C_AppearProtal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(S2C_AppearProtal& a, S2C_AppearProtal& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearProtal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearProtal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearProtal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearProtal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearProtal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearProtal& from) {
    S2C_AppearProtal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearProtal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearProtal";
  }
  protected:
  explicit S2C_AppearProtal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kRotationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // .Protocol.SVector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearProtal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearObstruction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearObstruction) */ {
 public:
  inline S2C_AppearObstruction() : S2C_AppearObstruction(nullptr) {}
  ~S2C_AppearObstruction() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearObstruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearObstruction(const S2C_AppearObstruction& from);
  S2C_AppearObstruction(S2C_AppearObstruction&& from) noexcept
    : S2C_AppearObstruction() {
    *this = ::std::move(from);
  }

  inline S2C_AppearObstruction& operator=(const S2C_AppearObstruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearObstruction& operator=(S2C_AppearObstruction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearObstruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearObstruction* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearObstruction*>(
               &_S2C_AppearObstruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(S2C_AppearObstruction& a, S2C_AppearObstruction& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearObstruction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearObstruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearObstruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearObstruction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearObstruction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearObstruction& from) {
    S2C_AppearObstruction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearObstruction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearObstruction";
  }
  protected:
  explicit S2C_AppearObstruction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 3,
    kRotationFieldNumber = 4,
    kExtentFieldNumber = 5,
    kObjectIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .Protocol.SVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // .Protocol.SVector extent = 5;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::Protocol::SVector& extent() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_extent();
  ::Protocol::SVector* mutable_extent();
  void set_allocated_extent(::Protocol::SVector* extent);
  private:
  const ::Protocol::SVector& _internal_extent() const;
  ::Protocol::SVector* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::Protocol::SVector* extent);
  ::Protocol::SVector* unsafe_arena_release_extent();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearObstruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    ::Protocol::SVector* extent_;
    int64_t object_id_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_InteractiveObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_InteractiveObject) */ {
 public:
  inline C2S_InteractiveObject() : C2S_InteractiveObject(nullptr) {}
  ~C2S_InteractiveObject() override;
  explicit PROTOBUF_CONSTEXPR C2S_InteractiveObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_InteractiveObject(const C2S_InteractiveObject& from);
  C2S_InteractiveObject(C2S_InteractiveObject&& from) noexcept
    : C2S_InteractiveObject() {
    *this = ::std::move(from);
  }

  inline C2S_InteractiveObject& operator=(const C2S_InteractiveObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_InteractiveObject& operator=(C2S_InteractiveObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_InteractiveObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_InteractiveObject* internal_default_instance() {
    return reinterpret_cast<const C2S_InteractiveObject*>(
               &_C2S_InteractiveObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(C2S_InteractiveObject& a, C2S_InteractiveObject& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_InteractiveObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_InteractiveObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_InteractiveObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_InteractiveObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_InteractiveObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_InteractiveObject& from) {
    C2S_InteractiveObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_InteractiveObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_InteractiveObject";
  }
  protected:
  explicit C2S_InteractiveObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_InteractiveObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_MovementProjectile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MovementProjectile) */ {
 public:
  inline S2C_MovementProjectile() : S2C_MovementProjectile(nullptr) {}
  ~S2C_MovementProjectile() override;
  explicit PROTOBUF_CONSTEXPR S2C_MovementProjectile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MovementProjectile(const S2C_MovementProjectile& from);
  S2C_MovementProjectile(S2C_MovementProjectile&& from) noexcept
    : S2C_MovementProjectile() {
    *this = ::std::move(from);
  }

  inline S2C_MovementProjectile& operator=(const S2C_MovementProjectile& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MovementProjectile& operator=(S2C_MovementProjectile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MovementProjectile& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MovementProjectile* internal_default_instance() {
    return reinterpret_cast<const S2C_MovementProjectile*>(
               &_S2C_MovementProjectile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(S2C_MovementProjectile& a, S2C_MovementProjectile& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MovementProjectile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MovementProjectile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MovementProjectile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MovementProjectile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MovementProjectile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MovementProjectile& from) {
    S2C_MovementProjectile::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MovementProjectile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MovementProjectile";
  }
  protected:
  explicit S2C_MovementProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kRotationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // .Protocol.SVector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MovementProjectile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_Teleport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_Teleport) */ {
 public:
  inline S2C_Teleport() : S2C_Teleport(nullptr) {}
  ~S2C_Teleport() override;
  explicit PROTOBUF_CONSTEXPR S2C_Teleport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_Teleport(const S2C_Teleport& from);
  S2C_Teleport(S2C_Teleport&& from) noexcept
    : S2C_Teleport() {
    *this = ::std::move(from);
  }

  inline S2C_Teleport& operator=(const S2C_Teleport& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_Teleport& operator=(S2C_Teleport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_Teleport& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_Teleport* internal_default_instance() {
    return reinterpret_cast<const S2C_Teleport*>(
               &_S2C_Teleport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(S2C_Teleport& a, S2C_Teleport& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_Teleport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_Teleport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_Teleport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_Teleport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_Teleport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_Teleport& from) {
    S2C_Teleport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_Teleport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_Teleport";
  }
  protected:
  explicit S2C_Teleport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kObjectIdFieldNumber = 1,
  };
  // .Protocol.SVector location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_Teleport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearEnemy) */ {
 public:
  inline S2C_AppearEnemy() : S2C_AppearEnemy(nullptr) {}
  ~S2C_AppearEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearEnemy(const S2C_AppearEnemy& from);
  S2C_AppearEnemy(S2C_AppearEnemy&& from) noexcept
    : S2C_AppearEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_AppearEnemy& operator=(const S2C_AppearEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearEnemy& operator=(S2C_AppearEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearEnemy*>(
               &_S2C_AppearEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(S2C_AppearEnemy& a, S2C_AppearEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearEnemy& from) {
    S2C_AppearEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearEnemy";
  }
  protected:
  explicit S2C_AppearEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 4,
    kCurLocationFieldNumber = 5,
    kMoveLocationFieldNumber = 6,
    kObjectIdFieldNumber = 1,
    kEnemyIdFieldNumber = 2,
    kStateFieldNumber = 3,
    kTimestampFieldNumber = 7,
  };
  // repeated .Protocol.SStat stats = 4;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::Protocol::SStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
      mutable_stats();
  private:
  const ::Protocol::SStat& _internal_stats(int index) const;
  ::Protocol::SStat* _internal_add_stats();
  public:
  const ::Protocol::SStat& stats(int index) const;
  ::Protocol::SStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
      stats() const;

  // .Protocol.SVector cur_location = 5;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 6;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int32 enemy_id = 2;
  void clear_enemy_id();
  int32_t enemy_id() const;
  void set_enemy_id(int32_t value);
  private:
  int32_t _internal_enemy_id() const;
  void _internal_set_enemy_id(int32_t value);
  public:

  // .Protocol.EEnemyState state = 3;
  void clear_state();
  ::Protocol::EEnemyState state() const;
  void set_state(::Protocol::EEnemyState value);
  private:
  ::Protocol::EEnemyState _internal_state() const;
  void _internal_set_state(::Protocol::EEnemyState value);
  public:

  // int64 timestamp = 7;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat > stats_;
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    int64_t object_id_;
    int32_t enemy_id_;
    int state_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DetectChangeEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DetectChangeEnemy) */ {
 public:
  inline S2C_DetectChangeEnemy() : S2C_DetectChangeEnemy(nullptr) {}
  ~S2C_DetectChangeEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_DetectChangeEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DetectChangeEnemy(const S2C_DetectChangeEnemy& from);
  S2C_DetectChangeEnemy(S2C_DetectChangeEnemy&& from) noexcept
    : S2C_DetectChangeEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_DetectChangeEnemy& operator=(const S2C_DetectChangeEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DetectChangeEnemy& operator=(S2C_DetectChangeEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DetectChangeEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DetectChangeEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_DetectChangeEnemy*>(
               &_S2C_DetectChangeEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(S2C_DetectChangeEnemy& a, S2C_DetectChangeEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DetectChangeEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DetectChangeEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DetectChangeEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DetectChangeEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DetectChangeEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DetectChangeEnemy& from) {
    S2C_DetectChangeEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DetectChangeEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DetectChangeEnemy";
  }
  protected:
  explicit S2C_DetectChangeEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
    kStateFieldNumber = 3,
  };
  // repeated .Protocol.SStat stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::Protocol::SStat* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
      mutable_stats();
  private:
  const ::Protocol::SStat& _internal_stats(int index) const;
  ::Protocol::SStat* _internal_add_stats();
  public:
  const ::Protocol::SStat& stats(int index) const;
  ::Protocol::SStat* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
      stats() const;

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .Protocol.EEnemyState state = 3;
  void clear_state();
  ::Protocol::EEnemyState state() const;
  void set_state(::Protocol::EEnemyState value);
  private:
  ::Protocol::EEnemyState _internal_state() const;
  void _internal_set_state(::Protocol::EEnemyState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DetectChangeEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat > stats_;
    int64_t object_id_;
    int64_t timestamp_;
    int state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_MovementEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_MovementEnemy) */ {
 public:
  inline S2C_MovementEnemy() : S2C_MovementEnemy(nullptr) {}
  ~S2C_MovementEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_MovementEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_MovementEnemy(const S2C_MovementEnemy& from);
  S2C_MovementEnemy(S2C_MovementEnemy&& from) noexcept
    : S2C_MovementEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_MovementEnemy& operator=(const S2C_MovementEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_MovementEnemy& operator=(S2C_MovementEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_MovementEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_MovementEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_MovementEnemy*>(
               &_S2C_MovementEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(S2C_MovementEnemy& a, S2C_MovementEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_MovementEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_MovementEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_MovementEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_MovementEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_MovementEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_MovementEnemy& from) {
    S2C_MovementEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_MovementEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_MovementEnemy";
  }
  protected:
  explicit S2C_MovementEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurLocationFieldNumber = 2,
    kMoveLocationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 4,
  };
  // .Protocol.SVector cur_location = 2;
  bool has_cur_location() const;
  private:
  bool _internal_has_cur_location() const;
  public:
  void clear_cur_location();
  const ::Protocol::SVector& cur_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_cur_location();
  ::Protocol::SVector* mutable_cur_location();
  void set_allocated_cur_location(::Protocol::SVector* cur_location);
  private:
  const ::Protocol::SVector& _internal_cur_location() const;
  ::Protocol::SVector* _internal_mutable_cur_location();
  public:
  void unsafe_arena_set_allocated_cur_location(
      ::Protocol::SVector* cur_location);
  ::Protocol::SVector* unsafe_arena_release_cur_location();

  // .Protocol.SVector move_location = 3;
  bool has_move_location() const;
  private:
  bool _internal_has_move_location() const;
  public:
  void clear_move_location();
  const ::Protocol::SVector& move_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_move_location();
  ::Protocol::SVector* mutable_move_location();
  void set_allocated_move_location(::Protocol::SVector* move_location);
  private:
  const ::Protocol::SVector& _internal_move_location() const;
  ::Protocol::SVector* _internal_mutable_move_location();
  public:
  void unsafe_arena_set_allocated_move_location(
      ::Protocol::SVector* move_location);
  ::Protocol::SVector* unsafe_arena_release_move_location();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_MovementEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* cur_location_;
    ::Protocol::SVector* move_location_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AnimationMovementEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AnimationMovementEnemy) */ {
 public:
  inline S2C_AnimationMovementEnemy() : S2C_AnimationMovementEnemy(nullptr) {}
  ~S2C_AnimationMovementEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_AnimationMovementEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AnimationMovementEnemy(const S2C_AnimationMovementEnemy& from);
  S2C_AnimationMovementEnemy(S2C_AnimationMovementEnemy&& from) noexcept
    : S2C_AnimationMovementEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_AnimationMovementEnemy& operator=(const S2C_AnimationMovementEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AnimationMovementEnemy& operator=(S2C_AnimationMovementEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AnimationMovementEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AnimationMovementEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_AnimationMovementEnemy*>(
               &_S2C_AnimationMovementEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(S2C_AnimationMovementEnemy& a, S2C_AnimationMovementEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AnimationMovementEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AnimationMovementEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AnimationMovementEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AnimationMovementEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AnimationMovementEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AnimationMovementEnemy& from) {
    S2C_AnimationMovementEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AnimationMovementEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AnimationMovementEnemy";
  }
  protected:
  explicit S2C_AnimationMovementEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartLocationFieldNumber = 2,
    kEndLocationFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kDurationFieldNumber = 4,
    kTimestampFieldNumber = 5,
  };
  // .Protocol.SVector start_location = 2;
  bool has_start_location() const;
  private:
  bool _internal_has_start_location() const;
  public:
  void clear_start_location();
  const ::Protocol::SVector& start_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_start_location();
  ::Protocol::SVector* mutable_start_location();
  void set_allocated_start_location(::Protocol::SVector* start_location);
  private:
  const ::Protocol::SVector& _internal_start_location() const;
  ::Protocol::SVector* _internal_mutable_start_location();
  public:
  void unsafe_arena_set_allocated_start_location(
      ::Protocol::SVector* start_location);
  ::Protocol::SVector* unsafe_arena_release_start_location();

  // .Protocol.SVector end_location = 3;
  bool has_end_location() const;
  private:
  bool _internal_has_end_location() const;
  public:
  void clear_end_location();
  const ::Protocol::SVector& end_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_end_location();
  ::Protocol::SVector* mutable_end_location();
  void set_allocated_end_location(::Protocol::SVector* end_location);
  private:
  const ::Protocol::SVector& _internal_end_location() const;
  ::Protocol::SVector* _internal_mutable_end_location();
  public:
  void unsafe_arena_set_allocated_end_location(
      ::Protocol::SVector* end_location);
  ::Protocol::SVector* unsafe_arena_release_end_location();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 duration = 4;
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AnimationMovementEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* start_location_;
    ::Protocol::SVector* end_location_;
    int64_t object_id_;
    int64_t duration_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnemyAutoAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnemyAutoAttack) */ {
 public:
  inline S2C_EnemyAutoAttack() : S2C_EnemyAutoAttack(nullptr) {}
  ~S2C_EnemyAutoAttack() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnemyAutoAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnemyAutoAttack(const S2C_EnemyAutoAttack& from);
  S2C_EnemyAutoAttack(S2C_EnemyAutoAttack&& from) noexcept
    : S2C_EnemyAutoAttack() {
    *this = ::std::move(from);
  }

  inline S2C_EnemyAutoAttack& operator=(const S2C_EnemyAutoAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnemyAutoAttack& operator=(S2C_EnemyAutoAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnemyAutoAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnemyAutoAttack* internal_default_instance() {
    return reinterpret_cast<const S2C_EnemyAutoAttack*>(
               &_S2C_EnemyAutoAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(S2C_EnemyAutoAttack& a, S2C_EnemyAutoAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnemyAutoAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnemyAutoAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnemyAutoAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnemyAutoAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnemyAutoAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnemyAutoAttack& from) {
    S2C_EnemyAutoAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnemyAutoAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnemyAutoAttack";
  }
  protected:
  explicit S2C_EnemyAutoAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 2,
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // .Protocol.SRotator rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnemyAutoAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SRotator* rotation_;
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_HitEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_HitEnemy) */ {
 public:
  inline S2C_HitEnemy() : S2C_HitEnemy(nullptr) {}
  ~S2C_HitEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_HitEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_HitEnemy(const S2C_HitEnemy& from);
  S2C_HitEnemy(S2C_HitEnemy&& from) noexcept
    : S2C_HitEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_HitEnemy& operator=(const S2C_HitEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_HitEnemy& operator=(S2C_HitEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_HitEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_HitEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_HitEnemy*>(
               &_S2C_HitEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(S2C_HitEnemy& a, S2C_HitEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_HitEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_HitEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_HitEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_HitEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_HitEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_HitEnemy& from) {
    S2C_HitEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_HitEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_HitEnemy";
  }
  protected:
  explicit S2C_HitEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_HitEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DeathEnemy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DeathEnemy) */ {
 public:
  inline S2C_DeathEnemy() : S2C_DeathEnemy(nullptr) {}
  ~S2C_DeathEnemy() override;
  explicit PROTOBUF_CONSTEXPR S2C_DeathEnemy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DeathEnemy(const S2C_DeathEnemy& from);
  S2C_DeathEnemy(S2C_DeathEnemy&& from) noexcept
    : S2C_DeathEnemy() {
    *this = ::std::move(from);
  }

  inline S2C_DeathEnemy& operator=(const S2C_DeathEnemy& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DeathEnemy& operator=(S2C_DeathEnemy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DeathEnemy& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DeathEnemy* internal_default_instance() {
    return reinterpret_cast<const S2C_DeathEnemy*>(
               &_S2C_DeathEnemy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(S2C_DeathEnemy& a, S2C_DeathEnemy& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DeathEnemy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DeathEnemy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DeathEnemy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DeathEnemy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DeathEnemy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DeathEnemy& from) {
    S2C_DeathEnemy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DeathEnemy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DeathEnemy";
  }
  protected:
  explicit S2C_DeathEnemy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DeathEnemy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DisAppearGameObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DisAppearGameObject) */ {
 public:
  inline S2C_DisAppearGameObject() : S2C_DisAppearGameObject(nullptr) {}
  ~S2C_DisAppearGameObject() override;
  explicit PROTOBUF_CONSTEXPR S2C_DisAppearGameObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DisAppearGameObject(const S2C_DisAppearGameObject& from);
  S2C_DisAppearGameObject(S2C_DisAppearGameObject&& from) noexcept
    : S2C_DisAppearGameObject() {
    *this = ::std::move(from);
  }

  inline S2C_DisAppearGameObject& operator=(const S2C_DisAppearGameObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DisAppearGameObject& operator=(S2C_DisAppearGameObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DisAppearGameObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DisAppearGameObject* internal_default_instance() {
    return reinterpret_cast<const S2C_DisAppearGameObject*>(
               &_S2C_DisAppearGameObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(S2C_DisAppearGameObject& a, S2C_DisAppearGameObject& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DisAppearGameObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DisAppearGameObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DisAppearGameObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DisAppearGameObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DisAppearGameObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DisAppearGameObject& from) {
    S2C_DisAppearGameObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DisAppearGameObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DisAppearGameObject";
  }
  protected:
  explicit S2C_DisAppearGameObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DisAppearGameObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_LoadInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_LoadInventory) */ {
 public:
  inline C2S_LoadInventory() : C2S_LoadInventory(nullptr) {}
  ~C2S_LoadInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_LoadInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_LoadInventory(const C2S_LoadInventory& from);
  C2S_LoadInventory(C2S_LoadInventory&& from) noexcept
    : C2S_LoadInventory() {
    *this = ::std::move(from);
  }

  inline C2S_LoadInventory& operator=(const C2S_LoadInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_LoadInventory& operator=(C2S_LoadInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_LoadInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_LoadInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_LoadInventory*>(
               &_C2S_LoadInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(C2S_LoadInventory& a, C2S_LoadInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_LoadInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_LoadInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_LoadInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_LoadInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_LoadInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_LoadInventory& from) {
    C2S_LoadInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_LoadInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_LoadInventory";
  }
  protected:
  explicit C2S_LoadInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_LoadInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadInventory) */ {
 public:
  inline S2C_LoadInventory() : S2C_LoadInventory(nullptr) {}
  ~S2C_LoadInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadInventory(const S2C_LoadInventory& from);
  S2C_LoadInventory(S2C_LoadInventory&& from) noexcept
    : S2C_LoadInventory() {
    *this = ::std::move(from);
  }

  inline S2C_LoadInventory& operator=(const S2C_LoadInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadInventory& operator=(S2C_LoadInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadInventory*>(
               &_S2C_LoadInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(S2C_LoadInventory& a, S2C_LoadInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadInventory& from) {
    S2C_LoadInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadInventory";
  }
  protected:
  explicit S2C_LoadInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kEqipmentFieldNumber = 2,
    kMoneyFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // repeated .Protocol.SItem item = 1;
  int item_size() const;
  private:
  int _internal_item_size() const;
  public:
  void clear_item();
  ::Protocol::SItem* mutable_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_item();
  private:
  const ::Protocol::SItem& _internal_item(int index) const;
  ::Protocol::SItem* _internal_add_item();
  public:
  const ::Protocol::SItem& item(int index) const;
  ::Protocol::SItem* add_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      item() const;

  // repeated .Protocol.SItem eqipment = 2;
  int eqipment_size() const;
  private:
  int _internal_eqipment_size() const;
  public:
  void clear_eqipment();
  ::Protocol::SItem* mutable_eqipment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
      mutable_eqipment();
  private:
  const ::Protocol::SItem& _internal_eqipment(int index) const;
  ::Protocol::SItem* _internal_add_eqipment();
  public:
  const ::Protocol::SItem& eqipment(int index) const;
  ::Protocol::SItem* add_eqipment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
      eqipment() const;

  // int32 money = 3;
  void clear_money();
  int32_t money() const;
  void set_money(int32_t value);
  private:
  int32_t _internal_money() const;
  void _internal_set_money(int32_t value);
  public:

  // int32 error = 4;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > item_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem > eqipment_;
    int32_t money_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_InsertInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_InsertInventory) */ {
 public:
  inline C2S_InsertInventory() : C2S_InsertInventory(nullptr) {}
  ~C2S_InsertInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_InsertInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_InsertInventory(const C2S_InsertInventory& from);
  C2S_InsertInventory(C2S_InsertInventory&& from) noexcept
    : C2S_InsertInventory() {
    *this = ::std::move(from);
  }

  inline C2S_InsertInventory& operator=(const C2S_InsertInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_InsertInventory& operator=(C2S_InsertInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_InsertInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_InsertInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_InsertInventory*>(
               &_C2S_InsertInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(C2S_InsertInventory& a, C2S_InsertInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_InsertInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_InsertInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_InsertInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_InsertInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_InsertInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_InsertInventory& from) {
    C2S_InsertInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_InsertInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_InsertInventory";
  }
  protected:
  explicit C2S_InsertInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_InsertInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_InsertInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_InsertInventory) */ {
 public:
  inline S2C_InsertInventory() : S2C_InsertInventory(nullptr) {}
  ~S2C_InsertInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_InsertInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_InsertInventory(const S2C_InsertInventory& from);
  S2C_InsertInventory(S2C_InsertInventory&& from) noexcept
    : S2C_InsertInventory() {
    *this = ::std::move(from);
  }

  inline S2C_InsertInventory& operator=(const S2C_InsertInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_InsertInventory& operator=(S2C_InsertInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_InsertInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_InsertInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_InsertInventory*>(
               &_S2C_InsertInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(S2C_InsertInventory& a, S2C_InsertInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_InsertInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_InsertInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_InsertInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_InsertInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_InsertInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_InsertInventory& from) {
    S2C_InsertInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_InsertInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_InsertInventory";
  }
  protected:
  explicit S2C_InsertInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kErrorFieldNumber = 3,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int32 error = 3;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_InsertInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t object_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_UpdateInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_UpdateInventory) */ {
 public:
  inline C2S_UpdateInventory() : C2S_UpdateInventory(nullptr) {}
  ~C2S_UpdateInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_UpdateInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_UpdateInventory(const C2S_UpdateInventory& from);
  C2S_UpdateInventory(C2S_UpdateInventory&& from) noexcept
    : C2S_UpdateInventory() {
    *this = ::std::move(from);
  }

  inline C2S_UpdateInventory& operator=(const C2S_UpdateInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_UpdateInventory& operator=(C2S_UpdateInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_UpdateInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_UpdateInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_UpdateInventory*>(
               &_C2S_UpdateInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(C2S_UpdateInventory& a, C2S_UpdateInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_UpdateInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_UpdateInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_UpdateInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_UpdateInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_UpdateInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_UpdateInventory& from) {
    C2S_UpdateInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_UpdateInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_UpdateInventory";
  }
  protected:
  explicit C2S_UpdateInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_UpdateInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_UpdateInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_UpdateInventory) */ {
 public:
  inline S2C_UpdateInventory() : S2C_UpdateInventory(nullptr) {}
  ~S2C_UpdateInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_UpdateInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_UpdateInventory(const S2C_UpdateInventory& from);
  S2C_UpdateInventory(S2C_UpdateInventory&& from) noexcept
    : S2C_UpdateInventory() {
    *this = ::std::move(from);
  }

  inline S2C_UpdateInventory& operator=(const S2C_UpdateInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_UpdateInventory& operator=(S2C_UpdateInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_UpdateInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_UpdateInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_UpdateInventory*>(
               &_S2C_UpdateInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(S2C_UpdateInventory& a, S2C_UpdateInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_UpdateInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_UpdateInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_UpdateInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_UpdateInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_UpdateInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_UpdateInventory& from) {
    S2C_UpdateInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_UpdateInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_UpdateInventory";
  }
  protected:
  explicit S2C_UpdateInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_UpdateInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_DeleteInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_DeleteInventory) */ {
 public:
  inline C2S_DeleteInventory() : C2S_DeleteInventory(nullptr) {}
  ~C2S_DeleteInventory() override;
  explicit PROTOBUF_CONSTEXPR C2S_DeleteInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_DeleteInventory(const C2S_DeleteInventory& from);
  C2S_DeleteInventory(C2S_DeleteInventory&& from) noexcept
    : C2S_DeleteInventory() {
    *this = ::std::move(from);
  }

  inline C2S_DeleteInventory& operator=(const C2S_DeleteInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_DeleteInventory& operator=(C2S_DeleteInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_DeleteInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_DeleteInventory* internal_default_instance() {
    return reinterpret_cast<const C2S_DeleteInventory*>(
               &_C2S_DeleteInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(C2S_DeleteInventory& a, C2S_DeleteInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_DeleteInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_DeleteInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_DeleteInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_DeleteInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_DeleteInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_DeleteInventory& from) {
    C2S_DeleteInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_DeleteInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_DeleteInventory";
  }
  protected:
  explicit C2S_DeleteInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kLocationFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // .Protocol.SVector location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_DeleteInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    ::Protocol::SVector* location_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DeleteInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DeleteInventory) */ {
 public:
  inline S2C_DeleteInventory() : S2C_DeleteInventory(nullptr) {}
  ~S2C_DeleteInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_DeleteInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DeleteInventory(const S2C_DeleteInventory& from);
  S2C_DeleteInventory(S2C_DeleteInventory&& from) noexcept
    : S2C_DeleteInventory() {
    *this = ::std::move(from);
  }

  inline S2C_DeleteInventory& operator=(const S2C_DeleteInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DeleteInventory& operator=(S2C_DeleteInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DeleteInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DeleteInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_DeleteInventory*>(
               &_S2C_DeleteInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(S2C_DeleteInventory& a, S2C_DeleteInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DeleteInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DeleteInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DeleteInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DeleteInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DeleteInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DeleteInventory& from) {
    S2C_DeleteInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DeleteInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DeleteInventory";
  }
  protected:
  explicit S2C_DeleteInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 3,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 3;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DeleteInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RollbackInventory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RollbackInventory) */ {
 public:
  inline S2C_RollbackInventory() : S2C_RollbackInventory(nullptr) {}
  ~S2C_RollbackInventory() override;
  explicit PROTOBUF_CONSTEXPR S2C_RollbackInventory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RollbackInventory(const S2C_RollbackInventory& from);
  S2C_RollbackInventory(S2C_RollbackInventory&& from) noexcept
    : S2C_RollbackInventory() {
    *this = ::std::move(from);
  }

  inline S2C_RollbackInventory& operator=(const S2C_RollbackInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RollbackInventory& operator=(S2C_RollbackInventory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RollbackInventory& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RollbackInventory* internal_default_instance() {
    return reinterpret_cast<const S2C_RollbackInventory*>(
               &_S2C_RollbackInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(S2C_RollbackInventory& a, S2C_RollbackInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RollbackInventory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RollbackInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RollbackInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RollbackInventory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RollbackInventory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RollbackInventory& from) {
    S2C_RollbackInventory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RollbackInventory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RollbackInventory";
  }
  protected:
  explicit S2C_RollbackInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
  };
  // .Protocol.SItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::SItem& item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_item();
  ::Protocol::SItem* mutable_item();
  void set_allocated_item(::Protocol::SItem* item);
  private:
  const ::Protocol::SItem& _internal_item() const;
  ::Protocol::SItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::SItem* item);
  ::Protocol::SItem* unsafe_arena_release_item();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RollbackInventory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* item_;
    int64_t remote_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_ReplaceEqipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_ReplaceEqipment) */ {
 public:
  inline C2S_ReplaceEqipment() : C2S_ReplaceEqipment(nullptr) {}
  ~C2S_ReplaceEqipment() override;
  explicit PROTOBUF_CONSTEXPR C2S_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_ReplaceEqipment(const C2S_ReplaceEqipment& from);
  C2S_ReplaceEqipment(C2S_ReplaceEqipment&& from) noexcept
    : C2S_ReplaceEqipment() {
    *this = ::std::move(from);
  }

  inline C2S_ReplaceEqipment& operator=(const C2S_ReplaceEqipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ReplaceEqipment& operator=(C2S_ReplaceEqipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_ReplaceEqipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_ReplaceEqipment* internal_default_instance() {
    return reinterpret_cast<const C2S_ReplaceEqipment*>(
               &_C2S_ReplaceEqipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(C2S_ReplaceEqipment& a, C2S_ReplaceEqipment& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ReplaceEqipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_ReplaceEqipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_ReplaceEqipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_ReplaceEqipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_ReplaceEqipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_ReplaceEqipment& from) {
    C2S_ReplaceEqipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_ReplaceEqipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_ReplaceEqipment";
  }
  protected:
  explicit C2S_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertInvenItemFieldNumber = 2,
    kInsertEqipItemFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kPartFieldNumber = 4,
  };
  // .Protocol.SItem insert_inven_item = 2;
  bool has_insert_inven_item() const;
  private:
  bool _internal_has_insert_inven_item() const;
  public:
  void clear_insert_inven_item();
  const ::Protocol::SItem& insert_inven_item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_insert_inven_item();
  ::Protocol::SItem* mutable_insert_inven_item();
  void set_allocated_insert_inven_item(::Protocol::SItem* insert_inven_item);
  private:
  const ::Protocol::SItem& _internal_insert_inven_item() const;
  ::Protocol::SItem* _internal_mutable_insert_inven_item();
  public:
  void unsafe_arena_set_allocated_insert_inven_item(
      ::Protocol::SItem* insert_inven_item);
  ::Protocol::SItem* unsafe_arena_release_insert_inven_item();

  // .Protocol.SItem insert_eqip_item = 3;
  bool has_insert_eqip_item() const;
  private:
  bool _internal_has_insert_eqip_item() const;
  public:
  void clear_insert_eqip_item();
  const ::Protocol::SItem& insert_eqip_item() const;
  PROTOBUF_NODISCARD ::Protocol::SItem* release_insert_eqip_item();
  ::Protocol::SItem* mutable_insert_eqip_item();
  void set_allocated_insert_eqip_item(::Protocol::SItem* insert_eqip_item);
  private:
  const ::Protocol::SItem& _internal_insert_eqip_item() const;
  ::Protocol::SItem* _internal_mutable_insert_eqip_item();
  public:
  void unsafe_arena_set_allocated_insert_eqip_item(
      ::Protocol::SItem* insert_eqip_item);
  ::Protocol::SItem* unsafe_arena_release_insert_eqip_item();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .Protocol.ECharacterPart part = 4;
  void clear_part();
  ::Protocol::ECharacterPart part() const;
  void set_part(::Protocol::ECharacterPart value);
  private:
  ::Protocol::ECharacterPart _internal_part() const;
  void _internal_set_part(::Protocol::ECharacterPart value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_ReplaceEqipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SItem* insert_inven_item_;
    ::Protocol::SItem* insert_eqip_item_;
    int64_t timestamp_;
    int part_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ReplaceEqipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ReplaceEqipment) */ {
 public:
  inline S2C_ReplaceEqipment() : S2C_ReplaceEqipment(nullptr) {}
  ~S2C_ReplaceEqipment() override;
  explicit PROTOBUF_CONSTEXPR S2C_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ReplaceEqipment(const S2C_ReplaceEqipment& from);
  S2C_ReplaceEqipment(S2C_ReplaceEqipment&& from) noexcept
    : S2C_ReplaceEqipment() {
    *this = ::std::move(from);
  }

  inline S2C_ReplaceEqipment& operator=(const S2C_ReplaceEqipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ReplaceEqipment& operator=(S2C_ReplaceEqipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ReplaceEqipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ReplaceEqipment* internal_default_instance() {
    return reinterpret_cast<const S2C_ReplaceEqipment*>(
               &_S2C_ReplaceEqipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(S2C_ReplaceEqipment& a, S2C_ReplaceEqipment& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ReplaceEqipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ReplaceEqipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ReplaceEqipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ReplaceEqipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ReplaceEqipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ReplaceEqipment& from) {
    S2C_ReplaceEqipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ReplaceEqipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ReplaceEqipment";
  }
  protected:
  explicit S2C_ReplaceEqipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEqipmentFieldNumber = 2,
    kRemoteIdFieldNumber = 1,
    kErrorFieldNumber = 3,
  };
  // .Protocol.SCharacterEqipment eqipment = 2;
  bool has_eqipment() const;
  private:
  bool _internal_has_eqipment() const;
  public:
  void clear_eqipment();
  const ::Protocol::SCharacterEqipment& eqipment() const;
  PROTOBUF_NODISCARD ::Protocol::SCharacterEqipment* release_eqipment();
  ::Protocol::SCharacterEqipment* mutable_eqipment();
  void set_allocated_eqipment(::Protocol::SCharacterEqipment* eqipment);
  private:
  const ::Protocol::SCharacterEqipment& _internal_eqipment() const;
  ::Protocol::SCharacterEqipment* _internal_mutable_eqipment();
  public:
  void unsafe_arena_set_allocated_eqipment(
      ::Protocol::SCharacterEqipment* eqipment);
  ::Protocol::SCharacterEqipment* unsafe_arena_release_eqipment();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int32 error = 3;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ReplaceEqipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SCharacterEqipment* eqipment_;
    int64_t remote_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LoadSkillTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_LoadSkillTree) */ {
 public:
  inline S2C_LoadSkillTree() : S2C_LoadSkillTree(nullptr) {}
  ~S2C_LoadSkillTree() override;
  explicit PROTOBUF_CONSTEXPR S2C_LoadSkillTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LoadSkillTree(const S2C_LoadSkillTree& from);
  S2C_LoadSkillTree(S2C_LoadSkillTree&& from) noexcept
    : S2C_LoadSkillTree() {
    *this = ::std::move(from);
  }

  inline S2C_LoadSkillTree& operator=(const S2C_LoadSkillTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LoadSkillTree& operator=(S2C_LoadSkillTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LoadSkillTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LoadSkillTree* internal_default_instance() {
    return reinterpret_cast<const S2C_LoadSkillTree*>(
               &_S2C_LoadSkillTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(S2C_LoadSkillTree& a, S2C_LoadSkillTree& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LoadSkillTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LoadSkillTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LoadSkillTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LoadSkillTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_LoadSkillTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_LoadSkillTree& from) {
    S2C_LoadSkillTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_LoadSkillTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LoadSkillTree";
  }
  protected:
  explicit S2C_LoadSkillTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kSkillCountFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // repeated int32 skill_id = 1;
  int skill_id_size() const;
  private:
  int _internal_skill_id_size() const;
  public:
  void clear_skill_id();
  private:
  int32_t _internal_skill_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_skill_id() const;
  void _internal_add_skill_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_skill_id();
  public:
  int32_t skill_id(int index) const;
  void set_skill_id(int index, int32_t value);
  void add_skill_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      skill_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_skill_id();

  // repeated int32 skill_count = 2;
  int skill_count_size() const;
  private:
  int _internal_skill_count_size() const;
  public:
  void clear_skill_count();
  private:
  int32_t _internal_skill_count(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_skill_count() const;
  void _internal_add_skill_count(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_skill_count();
  public:
  int32_t skill_count(int index) const;
  void set_skill_count(int index, int32_t value);
  void add_skill_count(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      skill_count() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_skill_count();

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LoadSkillTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > skill_id_;
    mutable std::atomic<int> _skill_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > skill_count_;
    mutable std::atomic<int> _skill_count_cached_byte_size_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_UpdateSkillTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_UpdateSkillTree) */ {
 public:
  inline C2S_UpdateSkillTree() : C2S_UpdateSkillTree(nullptr) {}
  ~C2S_UpdateSkillTree() override;
  explicit PROTOBUF_CONSTEXPR C2S_UpdateSkillTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_UpdateSkillTree(const C2S_UpdateSkillTree& from);
  C2S_UpdateSkillTree(C2S_UpdateSkillTree&& from) noexcept
    : C2S_UpdateSkillTree() {
    *this = ::std::move(from);
  }

  inline C2S_UpdateSkillTree& operator=(const C2S_UpdateSkillTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_UpdateSkillTree& operator=(C2S_UpdateSkillTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_UpdateSkillTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_UpdateSkillTree* internal_default_instance() {
    return reinterpret_cast<const C2S_UpdateSkillTree*>(
               &_C2S_UpdateSkillTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(C2S_UpdateSkillTree& a, C2S_UpdateSkillTree& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_UpdateSkillTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_UpdateSkillTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_UpdateSkillTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_UpdateSkillTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_UpdateSkillTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_UpdateSkillTree& from) {
    C2S_UpdateSkillTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_UpdateSkillTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_UpdateSkillTree";
  }
  protected:
  explicit C2S_UpdateSkillTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kSkillCountFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // int32 skill_id = 1;
  void clear_skill_id();
  int32_t skill_id() const;
  void set_skill_id(int32_t value);
  private:
  int32_t _internal_skill_id() const;
  void _internal_set_skill_id(int32_t value);
  public:

  // int32 skill_count = 2;
  void clear_skill_count();
  int32_t skill_count() const;
  void set_skill_count(int32_t value);
  private:
  int32_t _internal_skill_count() const;
  void _internal_set_skill_count(int32_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_UpdateSkillTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t skill_id_;
    int32_t skill_count_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_UpdateSkillTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_UpdateSkillTree) */ {
 public:
  inline S2C_UpdateSkillTree() : S2C_UpdateSkillTree(nullptr) {}
  ~S2C_UpdateSkillTree() override;
  explicit PROTOBUF_CONSTEXPR S2C_UpdateSkillTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_UpdateSkillTree(const S2C_UpdateSkillTree& from);
  S2C_UpdateSkillTree(S2C_UpdateSkillTree&& from) noexcept
    : S2C_UpdateSkillTree() {
    *this = ::std::move(from);
  }

  inline S2C_UpdateSkillTree& operator=(const S2C_UpdateSkillTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_UpdateSkillTree& operator=(S2C_UpdateSkillTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_UpdateSkillTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_UpdateSkillTree* internal_default_instance() {
    return reinterpret_cast<const S2C_UpdateSkillTree*>(
               &_S2C_UpdateSkillTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(S2C_UpdateSkillTree& a, S2C_UpdateSkillTree& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_UpdateSkillTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_UpdateSkillTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_UpdateSkillTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_UpdateSkillTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_UpdateSkillTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_UpdateSkillTree& from) {
    S2C_UpdateSkillTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_UpdateSkillTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_UpdateSkillTree";
  }
  protected:
  explicit S2C_UpdateSkillTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kSkillIdFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kSkillCountFieldNumber = 3,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 skill_id = 2;
  void clear_skill_id();
  int32_t skill_id() const;
  void set_skill_id(int32_t value);
  private:
  int32_t _internal_skill_id() const;
  void _internal_set_skill_id(int32_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 skill_count = 3;
  void clear_skill_count();
  int32_t skill_count() const;
  void set_skill_count(int32_t value);
  private:
  int32_t _internal_skill_count() const;
  void _internal_set_skill_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_UpdateSkillTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    int32_t skill_id_;
    int64_t timestamp_;
    int32_t skill_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_SetUseKeyAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_SetUseKeyAction) */ {
 public:
  inline C2S_SetUseKeyAction() : C2S_SetUseKeyAction(nullptr) {}
  ~C2S_SetUseKeyAction() override;
  explicit PROTOBUF_CONSTEXPR C2S_SetUseKeyAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_SetUseKeyAction(const C2S_SetUseKeyAction& from);
  C2S_SetUseKeyAction(C2S_SetUseKeyAction&& from) noexcept
    : C2S_SetUseKeyAction() {
    *this = ::std::move(from);
  }

  inline C2S_SetUseKeyAction& operator=(const C2S_SetUseKeyAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_SetUseKeyAction& operator=(C2S_SetUseKeyAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_SetUseKeyAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_SetUseKeyAction* internal_default_instance() {
    return reinterpret_cast<const C2S_SetUseKeyAction*>(
               &_C2S_SetUseKeyAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(C2S_SetUseKeyAction& a, C2S_SetUseKeyAction& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_SetUseKeyAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_SetUseKeyAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_SetUseKeyAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_SetUseKeyAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_SetUseKeyAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_SetUseKeyAction& from) {
    C2S_SetUseKeyAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_SetUseKeyAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_SetUseKeyAction";
  }
  protected:
  explicit C2S_SetUseKeyAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 1,
    kActionIdFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kActionTypeFieldNumber = 3,
  };
  // int32 key_id = 1;
  void clear_key_id();
  int32_t key_id() const;
  void set_key_id(int32_t value);
  private:
  int32_t _internal_key_id() const;
  void _internal_set_key_id(int32_t value);
  public:

  // int32 action_id = 2;
  void clear_action_id();
  int32_t action_id() const;
  void set_action_id(int32_t value);
  private:
  int32_t _internal_action_id() const;
  void _internal_set_action_id(int32_t value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // .Protocol.EActionType action_type = 3;
  void clear_action_type();
  ::Protocol::EActionType action_type() const;
  void set_action_type(::Protocol::EActionType value);
  private:
  ::Protocol::EActionType _internal_action_type() const;
  void _internal_set_action_type(::Protocol::EActionType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_SetUseKeyAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t key_id_;
    int32_t action_id_;
    int64_t timestamp_;
    int action_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_SetUseKeyAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_SetUseKeyAction) */ {
 public:
  inline S2C_SetUseKeyAction() : S2C_SetUseKeyAction(nullptr) {}
  ~S2C_SetUseKeyAction() override;
  explicit PROTOBUF_CONSTEXPR S2C_SetUseKeyAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SetUseKeyAction(const S2C_SetUseKeyAction& from);
  S2C_SetUseKeyAction(S2C_SetUseKeyAction&& from) noexcept
    : S2C_SetUseKeyAction() {
    *this = ::std::move(from);
  }

  inline S2C_SetUseKeyAction& operator=(const S2C_SetUseKeyAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SetUseKeyAction& operator=(S2C_SetUseKeyAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SetUseKeyAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SetUseKeyAction* internal_default_instance() {
    return reinterpret_cast<const S2C_SetUseKeyAction*>(
               &_S2C_SetUseKeyAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(S2C_SetUseKeyAction& a, S2C_SetUseKeyAction& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SetUseKeyAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SetUseKeyAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SetUseKeyAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SetUseKeyAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_SetUseKeyAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_SetUseKeyAction& from) {
    S2C_SetUseKeyAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_SetUseKeyAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SetUseKeyAction";
  }
  protected:
  explicit S2C_SetUseKeyAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SetUseKeyAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_PressedUseKeyAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_PressedUseKeyAction) */ {
 public:
  inline C2S_PressedUseKeyAction() : C2S_PressedUseKeyAction(nullptr) {}
  ~C2S_PressedUseKeyAction() override;
  explicit PROTOBUF_CONSTEXPR C2S_PressedUseKeyAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_PressedUseKeyAction(const C2S_PressedUseKeyAction& from);
  C2S_PressedUseKeyAction(C2S_PressedUseKeyAction&& from) noexcept
    : C2S_PressedUseKeyAction() {
    *this = ::std::move(from);
  }

  inline C2S_PressedUseKeyAction& operator=(const C2S_PressedUseKeyAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PressedUseKeyAction& operator=(C2S_PressedUseKeyAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PressedUseKeyAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PressedUseKeyAction* internal_default_instance() {
    return reinterpret_cast<const C2S_PressedUseKeyAction*>(
               &_C2S_PressedUseKeyAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(C2S_PressedUseKeyAction& a, C2S_PressedUseKeyAction& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_PressedUseKeyAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PressedUseKeyAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PressedUseKeyAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_PressedUseKeyAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_PressedUseKeyAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_PressedUseKeyAction& from) {
    C2S_PressedUseKeyAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_PressedUseKeyAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_PressedUseKeyAction";
  }
  protected:
  explicit C2S_PressedUseKeyAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kKeyIdFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 key_id = 1;
  void clear_key_id();
  int32_t key_id() const;
  void set_key_id(int32_t value);
  private:
  int32_t _internal_key_id() const;
  void _internal_set_key_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_PressedUseKeyAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t key_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_ReleaseUseKeyAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_ReleaseUseKeyAction) */ {
 public:
  inline C2S_ReleaseUseKeyAction() : C2S_ReleaseUseKeyAction(nullptr) {}
  ~C2S_ReleaseUseKeyAction() override;
  explicit PROTOBUF_CONSTEXPR C2S_ReleaseUseKeyAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_ReleaseUseKeyAction(const C2S_ReleaseUseKeyAction& from);
  C2S_ReleaseUseKeyAction(C2S_ReleaseUseKeyAction&& from) noexcept
    : C2S_ReleaseUseKeyAction() {
    *this = ::std::move(from);
  }

  inline C2S_ReleaseUseKeyAction& operator=(const C2S_ReleaseUseKeyAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_ReleaseUseKeyAction& operator=(C2S_ReleaseUseKeyAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_ReleaseUseKeyAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_ReleaseUseKeyAction* internal_default_instance() {
    return reinterpret_cast<const C2S_ReleaseUseKeyAction*>(
               &_C2S_ReleaseUseKeyAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(C2S_ReleaseUseKeyAction& a, C2S_ReleaseUseKeyAction& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_ReleaseUseKeyAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_ReleaseUseKeyAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_ReleaseUseKeyAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_ReleaseUseKeyAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_ReleaseUseKeyAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_ReleaseUseKeyAction& from) {
    C2S_ReleaseUseKeyAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_ReleaseUseKeyAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_ReleaseUseKeyAction";
  }
  protected:
  explicit C2S_ReleaseUseKeyAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kKeyIdFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 key_id = 1;
  void clear_key_id();
  int32_t key_id() const;
  void set_key_id(int32_t value);
  private:
  int32_t _internal_key_id() const;
  void _internal_set_key_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_ReleaseUseKeyAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t key_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ResponseUseKeyAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ResponseUseKeyAction) */ {
 public:
  inline S2C_ResponseUseKeyAction() : S2C_ResponseUseKeyAction(nullptr) {}
  ~S2C_ResponseUseKeyAction() override;
  explicit PROTOBUF_CONSTEXPR S2C_ResponseUseKeyAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ResponseUseKeyAction(const S2C_ResponseUseKeyAction& from);
  S2C_ResponseUseKeyAction(S2C_ResponseUseKeyAction&& from) noexcept
    : S2C_ResponseUseKeyAction() {
    *this = ::std::move(from);
  }

  inline S2C_ResponseUseKeyAction& operator=(const S2C_ResponseUseKeyAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ResponseUseKeyAction& operator=(S2C_ResponseUseKeyAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ResponseUseKeyAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ResponseUseKeyAction* internal_default_instance() {
    return reinterpret_cast<const S2C_ResponseUseKeyAction*>(
               &_S2C_ResponseUseKeyAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(S2C_ResponseUseKeyAction& a, S2C_ResponseUseKeyAction& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ResponseUseKeyAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ResponseUseKeyAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ResponseUseKeyAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ResponseUseKeyAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ResponseUseKeyAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ResponseUseKeyAction& from) {
    S2C_ResponseUseKeyAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ResponseUseKeyAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ResponseUseKeyAction";
  }
  protected:
  explicit S2C_ResponseUseKeyAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // int32 key_id = 1;
  void clear_key_id();
  int32_t key_id() const;
  void set_key_id(int32_t value);
  private:
  int32_t _internal_key_id() const;
  void _internal_set_key_id(int32_t value);
  public:

  // int32 error = 2;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ResponseUseKeyAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t key_id_;
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_AppearSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_AppearSkill) */ {
 public:
  inline S2C_AppearSkill() : S2C_AppearSkill(nullptr) {}
  ~S2C_AppearSkill() override;
  explicit PROTOBUF_CONSTEXPR S2C_AppearSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_AppearSkill(const S2C_AppearSkill& from);
  S2C_AppearSkill(S2C_AppearSkill&& from) noexcept
    : S2C_AppearSkill() {
    *this = ::std::move(from);
  }

  inline S2C_AppearSkill& operator=(const S2C_AppearSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AppearSkill& operator=(S2C_AppearSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AppearSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AppearSkill* internal_default_instance() {
    return reinterpret_cast<const S2C_AppearSkill*>(
               &_S2C_AppearSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(S2C_AppearSkill& a, S2C_AppearSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_AppearSkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AppearSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AppearSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_AppearSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_AppearSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_AppearSkill& from) {
    S2C_AppearSkill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_AppearSkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_AppearSkill";
  }
  protected:
  explicit S2C_AppearSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 4,
    kRotationFieldNumber = 5,
    kRemoteIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kDurationFieldNumber = 6,
    kSkillIdFieldNumber = 3,
  };
  // .Protocol.SVector location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 duration = 6;
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // int32 skill_id = 3;
  void clear_skill_id();
  int32_t skill_id() const;
  void set_skill_id(int32_t value);
  private:
  int32_t _internal_skill_id() const;
  void _internal_set_skill_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_AppearSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    int64_t remote_id_;
    int64_t object_id_;
    int64_t duration_;
    int32_t skill_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ReactionSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ReactionSkill) */ {
 public:
  inline S2C_ReactionSkill() : S2C_ReactionSkill(nullptr) {}
  ~S2C_ReactionSkill() override;
  explicit PROTOBUF_CONSTEXPR S2C_ReactionSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ReactionSkill(const S2C_ReactionSkill& from);
  S2C_ReactionSkill(S2C_ReactionSkill&& from) noexcept
    : S2C_ReactionSkill() {
    *this = ::std::move(from);
  }

  inline S2C_ReactionSkill& operator=(const S2C_ReactionSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ReactionSkill& operator=(S2C_ReactionSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ReactionSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ReactionSkill* internal_default_instance() {
    return reinterpret_cast<const S2C_ReactionSkill*>(
               &_S2C_ReactionSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(S2C_ReactionSkill& a, S2C_ReactionSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ReactionSkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ReactionSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ReactionSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ReactionSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ReactionSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ReactionSkill& from) {
    S2C_ReactionSkill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ReactionSkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ReactionSkill";
  }
  protected:
  explicit S2C_ReactionSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 4,
    kRotationFieldNumber = 5,
    kRemoteIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kDurationFieldNumber = 6,
    kSkillIdFieldNumber = 3,
  };
  // .Protocol.SVector location = 4;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // .Protocol.SRotator rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 duration = 6;
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // int32 skill_id = 3;
  void clear_skill_id();
  int32_t skill_id() const;
  void set_skill_id(int32_t value);
  private:
  int32_t _internal_skill_id() const;
  void _internal_set_skill_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ReactionSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    ::Protocol::SRotator* rotation_;
    int64_t remote_id_;
    int64_t object_id_;
    int64_t duration_;
    int32_t skill_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EndReactionSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EndReactionSkill) */ {
 public:
  inline S2C_EndReactionSkill() : S2C_EndReactionSkill(nullptr) {}
  ~S2C_EndReactionSkill() override;
  explicit PROTOBUF_CONSTEXPR S2C_EndReactionSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EndReactionSkill(const S2C_EndReactionSkill& from);
  S2C_EndReactionSkill(S2C_EndReactionSkill&& from) noexcept
    : S2C_EndReactionSkill() {
    *this = ::std::move(from);
  }

  inline S2C_EndReactionSkill& operator=(const S2C_EndReactionSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EndReactionSkill& operator=(S2C_EndReactionSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EndReactionSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EndReactionSkill* internal_default_instance() {
    return reinterpret_cast<const S2C_EndReactionSkill*>(
               &_S2C_EndReactionSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(S2C_EndReactionSkill& a, S2C_EndReactionSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EndReactionSkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EndReactionSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EndReactionSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EndReactionSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EndReactionSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EndReactionSkill& from) {
    S2C_EndReactionSkill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EndReactionSkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EndReactionSkill";
  }
  protected:
  explicit S2C_EndReactionSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // int64 remote_id = 1;
  void clear_remote_id();
  int64_t remote_id() const;
  void set_remote_id(int64_t value);
  private:
  int64_t _internal_remote_id() const;
  void _internal_set_remote_id(int64_t value);
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EndReactionSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t remote_id_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_SkillCoolTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_SkillCoolTime) */ {
 public:
  inline S2C_SkillCoolTime() : S2C_SkillCoolTime(nullptr) {}
  ~S2C_SkillCoolTime() override;
  explicit PROTOBUF_CONSTEXPR S2C_SkillCoolTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SkillCoolTime(const S2C_SkillCoolTime& from);
  S2C_SkillCoolTime(S2C_SkillCoolTime&& from) noexcept
    : S2C_SkillCoolTime() {
    *this = ::std::move(from);
  }

  inline S2C_SkillCoolTime& operator=(const S2C_SkillCoolTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SkillCoolTime& operator=(S2C_SkillCoolTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SkillCoolTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SkillCoolTime* internal_default_instance() {
    return reinterpret_cast<const S2C_SkillCoolTime*>(
               &_S2C_SkillCoolTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(S2C_SkillCoolTime& a, S2C_SkillCoolTime& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SkillCoolTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SkillCoolTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SkillCoolTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SkillCoolTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_SkillCoolTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_SkillCoolTime& from) {
    S2C_SkillCoolTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_SkillCoolTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SkillCoolTime";
  }
  protected:
  explicit S2C_SkillCoolTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kSkillTimeFieldNumber = 2,
  };
  // repeated int32 skill_id = 1;
  int skill_id_size() const;
  private:
  int _internal_skill_id_size() const;
  public:
  void clear_skill_id();
  private:
  int32_t _internal_skill_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_skill_id() const;
  void _internal_add_skill_id(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_skill_id();
  public:
  int32_t skill_id(int index) const;
  void set_skill_id(int index, int32_t value);
  void add_skill_id(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      skill_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_skill_id();

  // repeated int64 skill_time = 2;
  int skill_time_size() const;
  private:
  int _internal_skill_time_size() const;
  public:
  void clear_skill_time();
  private:
  int64_t _internal_skill_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_skill_time() const;
  void _internal_add_skill_time(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_skill_time();
  public:
  int64_t skill_time(int index) const;
  void set_skill_time(int index, int64_t value);
  void add_skill_time(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      skill_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_skill_time();

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SkillCoolTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > skill_id_;
    mutable std::atomic<int> _skill_id_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > skill_time_;
    mutable std::atomic<int> _skill_time_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DebugBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DebugBox) */ {
 public:
  inline S2C_DebugBox() : S2C_DebugBox(nullptr) {}
  ~S2C_DebugBox() override;
  explicit PROTOBUF_CONSTEXPR S2C_DebugBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DebugBox(const S2C_DebugBox& from);
  S2C_DebugBox(S2C_DebugBox&& from) noexcept
    : S2C_DebugBox() {
    *this = ::std::move(from);
  }

  inline S2C_DebugBox& operator=(const S2C_DebugBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DebugBox& operator=(S2C_DebugBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DebugBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DebugBox* internal_default_instance() {
    return reinterpret_cast<const S2C_DebugBox*>(
               &_S2C_DebugBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(S2C_DebugBox& a, S2C_DebugBox& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DebugBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DebugBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DebugBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DebugBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DebugBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DebugBox& from) {
    S2C_DebugBox::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DebugBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DebugBox";
  }
  protected:
  explicit S2C_DebugBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartLocationFieldNumber = 1,
    kEndLocationFieldNumber = 2,
    kExtentFieldNumber = 3,
    kRotationFieldNumber = 4,
    kDurationFieldNumber = 5,
  };
  // .Protocol.SVector start_location = 1;
  bool has_start_location() const;
  private:
  bool _internal_has_start_location() const;
  public:
  void clear_start_location();
  const ::Protocol::SVector& start_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_start_location();
  ::Protocol::SVector* mutable_start_location();
  void set_allocated_start_location(::Protocol::SVector* start_location);
  private:
  const ::Protocol::SVector& _internal_start_location() const;
  ::Protocol::SVector* _internal_mutable_start_location();
  public:
  void unsafe_arena_set_allocated_start_location(
      ::Protocol::SVector* start_location);
  ::Protocol::SVector* unsafe_arena_release_start_location();

  // .Protocol.SVector end_location = 2;
  bool has_end_location() const;
  private:
  bool _internal_has_end_location() const;
  public:
  void clear_end_location();
  const ::Protocol::SVector& end_location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_end_location();
  ::Protocol::SVector* mutable_end_location();
  void set_allocated_end_location(::Protocol::SVector* end_location);
  private:
  const ::Protocol::SVector& _internal_end_location() const;
  ::Protocol::SVector* _internal_mutable_end_location();
  public:
  void unsafe_arena_set_allocated_end_location(
      ::Protocol::SVector* end_location);
  ::Protocol::SVector* unsafe_arena_release_end_location();

  // .Protocol.SVector extent = 3;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::Protocol::SVector& extent() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_extent();
  ::Protocol::SVector* mutable_extent();
  void set_allocated_extent(::Protocol::SVector* extent);
  private:
  const ::Protocol::SVector& _internal_extent() const;
  ::Protocol::SVector* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::Protocol::SVector* extent);
  ::Protocol::SVector* unsafe_arena_release_extent();

  // .Protocol.SRotator rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::SRotator& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::SRotator* release_rotation();
  ::Protocol::SRotator* mutable_rotation();
  void set_allocated_rotation(::Protocol::SRotator* rotation);
  private:
  const ::Protocol::SRotator& _internal_rotation() const;
  ::Protocol::SRotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::SRotator* rotation);
  ::Protocol::SRotator* unsafe_arena_release_rotation();

  // float duration = 5;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DebugBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* start_location_;
    ::Protocol::SVector* end_location_;
    ::Protocol::SVector* extent_;
    ::Protocol::SRotator* rotation_;
    float duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_DebugCircle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_DebugCircle) */ {
 public:
  inline S2C_DebugCircle() : S2C_DebugCircle(nullptr) {}
  ~S2C_DebugCircle() override;
  explicit PROTOBUF_CONSTEXPR S2C_DebugCircle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_DebugCircle(const S2C_DebugCircle& from);
  S2C_DebugCircle(S2C_DebugCircle&& from) noexcept
    : S2C_DebugCircle() {
    *this = ::std::move(from);
  }

  inline S2C_DebugCircle& operator=(const S2C_DebugCircle& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DebugCircle& operator=(S2C_DebugCircle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DebugCircle& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DebugCircle* internal_default_instance() {
    return reinterpret_cast<const S2C_DebugCircle*>(
               &_S2C_DebugCircle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(S2C_DebugCircle& a, S2C_DebugCircle& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_DebugCircle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DebugCircle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DebugCircle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_DebugCircle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_DebugCircle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_DebugCircle& from) {
    S2C_DebugCircle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_DebugCircle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_DebugCircle";
  }
  protected:
  explicit S2C_DebugCircle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kRadiusFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // .Protocol.SVector location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::Protocol::SVector& location() const;
  PROTOBUF_NODISCARD ::Protocol::SVector* release_location();
  ::Protocol::SVector* mutable_location();
  void set_allocated_location(::Protocol::SVector* location);
  private:
  const ::Protocol::SVector& _internal_location() const;
  ::Protocol::SVector* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::Protocol::SVector* location);
  ::Protocol::SVector* unsafe_arena_release_location();

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // float duration = 3;
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_DebugCircle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::SVector* location_;
    float radius_;
    float duration_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_RequestEnterDungeon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_RequestEnterDungeon) */ {
 public:
  inline C2S_RequestEnterDungeon() : C2S_RequestEnterDungeon(nullptr) {}
  ~C2S_RequestEnterDungeon() override;
  explicit PROTOBUF_CONSTEXPR C2S_RequestEnterDungeon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_RequestEnterDungeon(const C2S_RequestEnterDungeon& from);
  C2S_RequestEnterDungeon(C2S_RequestEnterDungeon&& from) noexcept
    : C2S_RequestEnterDungeon() {
    *this = ::std::move(from);
  }

  inline C2S_RequestEnterDungeon& operator=(const C2S_RequestEnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_RequestEnterDungeon& operator=(C2S_RequestEnterDungeon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_RequestEnterDungeon& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_RequestEnterDungeon* internal_default_instance() {
    return reinterpret_cast<const C2S_RequestEnterDungeon*>(
               &_C2S_RequestEnterDungeon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(C2S_RequestEnterDungeon& a, C2S_RequestEnterDungeon& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_RequestEnterDungeon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_RequestEnterDungeon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_RequestEnterDungeon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_RequestEnterDungeon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_RequestEnterDungeon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_RequestEnterDungeon& from) {
    C2S_RequestEnterDungeon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_RequestEnterDungeon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_RequestEnterDungeon";
  }
  protected:
  explicit C2S_RequestEnterDungeon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDungeonTypeFieldNumber = 1,
  };
  // int32 dungeon_type = 1;
  void clear_dungeon_type();
  int32_t dungeon_type() const;
  void set_dungeon_type(int32_t value);
  private:
  int32_t _internal_dungeon_type() const;
  void _internal_set_dungeon_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_RequestEnterDungeon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t dungeon_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_RequestEnterDungeon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_RequestEnterDungeon) */ {
 public:
  inline S2C_RequestEnterDungeon() : S2C_RequestEnterDungeon(nullptr) {}
  ~S2C_RequestEnterDungeon() override;
  explicit PROTOBUF_CONSTEXPR S2C_RequestEnterDungeon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_RequestEnterDungeon(const S2C_RequestEnterDungeon& from);
  S2C_RequestEnterDungeon(S2C_RequestEnterDungeon&& from) noexcept
    : S2C_RequestEnterDungeon() {
    *this = ::std::move(from);
  }

  inline S2C_RequestEnterDungeon& operator=(const S2C_RequestEnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_RequestEnterDungeon& operator=(S2C_RequestEnterDungeon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_RequestEnterDungeon& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_RequestEnterDungeon* internal_default_instance() {
    return reinterpret_cast<const S2C_RequestEnterDungeon*>(
               &_S2C_RequestEnterDungeon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(S2C_RequestEnterDungeon& a, S2C_RequestEnterDungeon& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_RequestEnterDungeon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_RequestEnterDungeon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_RequestEnterDungeon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_RequestEnterDungeon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_RequestEnterDungeon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_RequestEnterDungeon& from) {
    S2C_RequestEnterDungeon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_RequestEnterDungeon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_RequestEnterDungeon";
  }
  protected:
  explicit S2C_RequestEnterDungeon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
  };
  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_RequestEnterDungeon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_ResponseEnterDungeon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_ResponseEnterDungeon) */ {
 public:
  inline S2C_ResponseEnterDungeon() : S2C_ResponseEnterDungeon(nullptr) {}
  ~S2C_ResponseEnterDungeon() override;
  explicit PROTOBUF_CONSTEXPR S2C_ResponseEnterDungeon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_ResponseEnterDungeon(const S2C_ResponseEnterDungeon& from);
  S2C_ResponseEnterDungeon(S2C_ResponseEnterDungeon&& from) noexcept
    : S2C_ResponseEnterDungeon() {
    *this = ::std::move(from);
  }

  inline S2C_ResponseEnterDungeon& operator=(const S2C_ResponseEnterDungeon& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_ResponseEnterDungeon& operator=(S2C_ResponseEnterDungeon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_ResponseEnterDungeon& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_ResponseEnterDungeon* internal_default_instance() {
    return reinterpret_cast<const S2C_ResponseEnterDungeon*>(
               &_S2C_ResponseEnterDungeon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(S2C_ResponseEnterDungeon& a, S2C_ResponseEnterDungeon& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_ResponseEnterDungeon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_ResponseEnterDungeon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_ResponseEnterDungeon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_ResponseEnterDungeon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_ResponseEnterDungeon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_ResponseEnterDungeon& from) {
    S2C_ResponseEnterDungeon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_ResponseEnterDungeon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_ResponseEnterDungeon";
  }
  protected:
  explicit S2C_ResponseEnterDungeon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 3,
    kErrorFieldNumber = 1,
    kDungeonIdFieldNumber = 2,
  };
  // bytes level = 3;
  void clear_level();
  const std::string& level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level();
  PROTOBUF_NODISCARD std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // int32 error = 1;
  void clear_error();
  int32_t error() const;
  void set_error(int32_t value);
  private:
  int32_t _internal_error() const;
  void _internal_set_error(int32_t value);
  public:

  // int32 dungeon_id = 2;
  void clear_dungeon_id();
  int32_t dungeon_id() const;
  void set_dungeon_id(int32_t value);
  private:
  int32_t _internal_dungeon_id() const;
  void _internal_set_dungeon_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_ResponseEnterDungeon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
    int32_t error_;
    int32_t dungeon_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_CompleteLoadDungeon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_CompleteLoadDungeon) */ {
 public:
  inline C2S_CompleteLoadDungeon() : C2S_CompleteLoadDungeon(nullptr) {}
  ~C2S_CompleteLoadDungeon() override;
  explicit PROTOBUF_CONSTEXPR C2S_CompleteLoadDungeon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_CompleteLoadDungeon(const C2S_CompleteLoadDungeon& from);
  C2S_CompleteLoadDungeon(C2S_CompleteLoadDungeon&& from) noexcept
    : C2S_CompleteLoadDungeon() {
    *this = ::std::move(from);
  }

  inline C2S_CompleteLoadDungeon& operator=(const C2S_CompleteLoadDungeon& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_CompleteLoadDungeon& operator=(C2S_CompleteLoadDungeon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_CompleteLoadDungeon& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_CompleteLoadDungeon* internal_default_instance() {
    return reinterpret_cast<const C2S_CompleteLoadDungeon*>(
               &_C2S_CompleteLoadDungeon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(C2S_CompleteLoadDungeon& a, C2S_CompleteLoadDungeon& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_CompleteLoadDungeon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_CompleteLoadDungeon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_CompleteLoadDungeon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_CompleteLoadDungeon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_CompleteLoadDungeon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_CompleteLoadDungeon& from) {
    C2S_CompleteLoadDungeon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_CompleteLoadDungeon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_CompleteLoadDungeon";
  }
  protected:
  explicit C2S_CompleteLoadDungeon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDungeonIdFieldNumber = 1,
  };
  // int32 dungeon_id = 1;
  void clear_dungeon_id();
  int32_t dungeon_id() const;
  void set_dungeon_id(int32_t value);
  private:
  int32_t _internal_dungeon_id() const;
  void _internal_set_dungeon_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_CompleteLoadDungeon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t dungeon_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_WaitingLoadDungeon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_WaitingLoadDungeon) */ {
 public:
  inline S2C_WaitingLoadDungeon() : S2C_WaitingLoadDungeon(nullptr) {}
  ~S2C_WaitingLoadDungeon() override;
  explicit PROTOBUF_CONSTEXPR S2C_WaitingLoadDungeon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_WaitingLoadDungeon(const S2C_WaitingLoadDungeon& from);
  S2C_WaitingLoadDungeon(S2C_WaitingLoadDungeon&& from) noexcept
    : S2C_WaitingLoadDungeon() {
    *this = ::std::move(from);
  }

  inline S2C_WaitingLoadDungeon& operator=(const S2C_WaitingLoadDungeon& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_WaitingLoadDungeon& operator=(S2C_WaitingLoadDungeon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_WaitingLoadDungeon& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_WaitingLoadDungeon* internal_default_instance() {
    return reinterpret_cast<const S2C_WaitingLoadDungeon*>(
               &_S2C_WaitingLoadDungeon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(S2C_WaitingLoadDungeon& a, S2C_WaitingLoadDungeon& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_WaitingLoadDungeon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_WaitingLoadDungeon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_WaitingLoadDungeon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_WaitingLoadDungeon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_WaitingLoadDungeon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_WaitingLoadDungeon& from) {
    S2C_WaitingLoadDungeon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_WaitingLoadDungeon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_WaitingLoadDungeon";
  }
  protected:
  explicit S2C_WaitingLoadDungeon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxNumberFieldNumber = 1,
    kLeastNumberFieldNumber = 2,
  };
  // int32 max_number = 1;
  void clear_max_number();
  int32_t max_number() const;
  void set_max_number(int32_t value);
  private:
  int32_t _internal_max_number() const;
  void _internal_set_max_number(int32_t value);
  public:

  // int32 least_number = 2;
  void clear_least_number();
  int32_t least_number() const;
  void set_least_number(int32_t value);
  private:
  int32_t _internal_least_number() const;
  void _internal_set_least_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_WaitingLoadDungeon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t max_number_;
    int32_t least_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_CompleteLoadDungeon final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_CompleteLoadDungeon) */ {
 public:
  inline S2C_CompleteLoadDungeon() : S2C_CompleteLoadDungeon(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S2C_CompleteLoadDungeon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_CompleteLoadDungeon(const S2C_CompleteLoadDungeon& from);
  S2C_CompleteLoadDungeon(S2C_CompleteLoadDungeon&& from) noexcept
    : S2C_CompleteLoadDungeon() {
    *this = ::std::move(from);
  }

  inline S2C_CompleteLoadDungeon& operator=(const S2C_CompleteLoadDungeon& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CompleteLoadDungeon& operator=(S2C_CompleteLoadDungeon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CompleteLoadDungeon& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CompleteLoadDungeon* internal_default_instance() {
    return reinterpret_cast<const S2C_CompleteLoadDungeon*>(
               &_S2C_CompleteLoadDungeon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(S2C_CompleteLoadDungeon& a, S2C_CompleteLoadDungeon& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_CompleteLoadDungeon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CompleteLoadDungeon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CompleteLoadDungeon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_CompleteLoadDungeon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_CompleteLoadDungeon& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_CompleteLoadDungeon& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_CompleteLoadDungeon";
  }
  protected:
  explicit S2C_CompleteLoadDungeon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_CompleteLoadDungeon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EnterPortal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_EnterPortal) */ {
 public:
  inline S2C_EnterPortal() : S2C_EnterPortal(nullptr) {}
  ~S2C_EnterPortal() override;
  explicit PROTOBUF_CONSTEXPR S2C_EnterPortal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EnterPortal(const S2C_EnterPortal& from);
  S2C_EnterPortal(S2C_EnterPortal&& from) noexcept
    : S2C_EnterPortal() {
    *this = ::std::move(from);
  }

  inline S2C_EnterPortal& operator=(const S2C_EnterPortal& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EnterPortal& operator=(S2C_EnterPortal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EnterPortal& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EnterPortal* internal_default_instance() {
    return reinterpret_cast<const S2C_EnterPortal*>(
               &_S2C_EnterPortal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(S2C_EnterPortal& a, S2C_EnterPortal& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EnterPortal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EnterPortal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EnterPortal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EnterPortal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_EnterPortal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_EnterPortal& from) {
    S2C_EnterPortal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_EnterPortal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EnterPortal";
  }
  protected:
  explicit S2C_EnterPortal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // bytes title = 1;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int64 time = 2;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EnterPortal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int64_t time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_LeavePortal final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_LeavePortal) */ {
 public:
  inline S2C_LeavePortal() : S2C_LeavePortal(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S2C_LeavePortal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_LeavePortal(const S2C_LeavePortal& from);
  S2C_LeavePortal(S2C_LeavePortal&& from) noexcept
    : S2C_LeavePortal() {
    *this = ::std::move(from);
  }

  inline S2C_LeavePortal& operator=(const S2C_LeavePortal& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_LeavePortal& operator=(S2C_LeavePortal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_LeavePortal& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_LeavePortal* internal_default_instance() {
    return reinterpret_cast<const S2C_LeavePortal*>(
               &_S2C_LeavePortal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(S2C_LeavePortal& a, S2C_LeavePortal& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_LeavePortal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_LeavePortal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_LeavePortal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_LeavePortal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_LeavePortal& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_LeavePortal& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_LeavePortal";
  }
  protected:
  explicit S2C_LeavePortal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_LeavePortal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlaySequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_PlaySequence) */ {
 public:
  inline S2C_PlaySequence() : S2C_PlaySequence(nullptr) {}
  ~S2C_PlaySequence() override;
  explicit PROTOBUF_CONSTEXPR S2C_PlaySequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_PlaySequence(const S2C_PlaySequence& from);
  S2C_PlaySequence(S2C_PlaySequence&& from) noexcept
    : S2C_PlaySequence() {
    *this = ::std::move(from);
  }

  inline S2C_PlaySequence& operator=(const S2C_PlaySequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlaySequence& operator=(S2C_PlaySequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlaySequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlaySequence* internal_default_instance() {
    return reinterpret_cast<const S2C_PlaySequence*>(
               &_S2C_PlaySequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(S2C_PlaySequence& a, S2C_PlaySequence& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_PlaySequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlaySequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlaySequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_PlaySequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_PlaySequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_PlaySequence& from) {
    S2C_PlaySequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_PlaySequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_PlaySequence";
  }
  protected:
  explicit S2C_PlaySequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 1,
    kMaxNumberFieldNumber = 2,
  };
  // int32 sequence = 1;
  void clear_sequence();
  int32_t sequence() const;
  void set_sequence(int32_t value);
  private:
  int32_t _internal_sequence() const;
  void _internal_set_sequence(int32_t value);
  public:

  // int32 max_number = 2;
  void clear_max_number();
  int32_t max_number() const;
  void set_max_number(int32_t value);
  private:
  int32_t _internal_max_number() const;
  void _internal_set_max_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_PlaySequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t sequence_;
    int32_t max_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class C2S_SkipSequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C2S_SkipSequence) */ {
 public:
  inline C2S_SkipSequence() : C2S_SkipSequence(nullptr) {}
  ~C2S_SkipSequence() override;
  explicit PROTOBUF_CONSTEXPR C2S_SkipSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2S_SkipSequence(const C2S_SkipSequence& from);
  C2S_SkipSequence(C2S_SkipSequence&& from) noexcept
    : C2S_SkipSequence() {
    *this = ::std::move(from);
  }

  inline C2S_SkipSequence& operator=(const C2S_SkipSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_SkipSequence& operator=(C2S_SkipSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_SkipSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_SkipSequence* internal_default_instance() {
    return reinterpret_cast<const C2S_SkipSequence*>(
               &_C2S_SkipSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(C2S_SkipSequence& a, C2S_SkipSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(C2S_SkipSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_SkipSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_SkipSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2S_SkipSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2S_SkipSequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C2S_SkipSequence& from) {
    C2S_SkipSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2S_SkipSequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C2S_SkipSequence";
  }
  protected:
  explicit C2S_SkipSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDungeonIdFieldNumber = 1,
  };
  // int32 dungeon_id = 1;
  void clear_dungeon_id();
  int32_t dungeon_id() const;
  void set_dungeon_id(int32_t value);
  private:
  int32_t _internal_dungeon_id() const;
  void _internal_set_dungeon_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C2S_SkipSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t dungeon_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_SkipSequence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S2C_SkipSequence) */ {
 public:
  inline S2C_SkipSequence() : S2C_SkipSequence(nullptr) {}
  ~S2C_SkipSequence() override;
  explicit PROTOBUF_CONSTEXPR S2C_SkipSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_SkipSequence(const S2C_SkipSequence& from);
  S2C_SkipSequence(S2C_SkipSequence&& from) noexcept
    : S2C_SkipSequence() {
    *this = ::std::move(from);
  }

  inline S2C_SkipSequence& operator=(const S2C_SkipSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_SkipSequence& operator=(S2C_SkipSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_SkipSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_SkipSequence* internal_default_instance() {
    return reinterpret_cast<const S2C_SkipSequence*>(
               &_S2C_SkipSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(S2C_SkipSequence& a, S2C_SkipSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_SkipSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_SkipSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_SkipSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_SkipSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S2C_SkipSequence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S2C_SkipSequence& from) {
    S2C_SkipSequence::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S2C_SkipSequence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_SkipSequence";
  }
  protected:
  explicit S2C_SkipSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxNumberFieldNumber = 1,
    kLeastNumberFieldNumber = 2,
  };
  // int32 max_number = 1;
  void clear_max_number();
  int32_t max_number() const;
  void set_max_number(int32_t value);
  private:
  int32_t _internal_max_number() const;
  void _internal_set_max_number(int32_t value);
  public:

  // int32 least_number = 2;
  void clear_least_number();
  int32_t least_number() const;
  void set_least_number(int32_t value);
  private:
  int32_t _internal_least_number() const;
  void _internal_set_least_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S2C_SkipSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t max_number_;
    int32_t least_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// -------------------------------------------------------------------

class S2C_EndSequence final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S2C_EndSequence) */ {
 public:
  inline S2C_EndSequence() : S2C_EndSequence(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S2C_EndSequence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S2C_EndSequence(const S2C_EndSequence& from);
  S2C_EndSequence(S2C_EndSequence&& from) noexcept
    : S2C_EndSequence() {
    *this = ::std::move(from);
  }

  inline S2C_EndSequence& operator=(const S2C_EndSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_EndSequence& operator=(S2C_EndSequence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_EndSequence& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_EndSequence* internal_default_instance() {
    return reinterpret_cast<const S2C_EndSequence*>(
               &_S2C_EndSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(S2C_EndSequence& a, S2C_EndSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(S2C_EndSequence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_EndSequence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_EndSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S2C_EndSequence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S2C_EndSequence& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S2C_EndSequence& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S2C_EndSequence";
  }
  protected:
  explicit S2C_EndSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S2C_EndSequence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_GamePacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C2S_EnterGameServer

// bytes token = 1;
inline void C2S_EnterGameServer::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& C2S_EnterGameServer::token() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_EnterGameServer.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_EnterGameServer::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_EnterGameServer.token)
}
inline std::string* C2S_EnterGameServer::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_EnterGameServer.token)
  return _s;
}
inline const std::string& C2S_EnterGameServer::_internal_token() const {
  return _impl_.token_.Get();
}
inline void C2S_EnterGameServer::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_EnterGameServer::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_EnterGameServer::release_token() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_EnterGameServer.token)
  return _impl_.token_.Release();
}
inline void C2S_EnterGameServer::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_EnterGameServer.token)
}

// -------------------------------------------------------------------

// S2C_EnterGameServer

// int64 remote_id = 1;
inline void S2C_EnterGameServer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_EnterGameServer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_EnterGameServer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.remote_id)
  return _internal_remote_id();
}
inline void S2C_EnterGameServer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_EnterGameServer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterGameServer.remote_id)
}

// .Protocol.SCharacterData character_data = 2;
inline bool S2C_EnterGameServer::_internal_has_character_data() const {
  return this != internal_default_instance() && _impl_.character_data_ != nullptr;
}
inline bool S2C_EnterGameServer::has_character_data() const {
  return _internal_has_character_data();
}
inline const ::Protocol::SCharacterData& S2C_EnterGameServer::_internal_character_data() const {
  const ::Protocol::SCharacterData* p = _impl_.character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& S2C_EnterGameServer::character_data() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.character_data)
  return _internal_character_data();
}
inline void S2C_EnterGameServer::unsafe_arena_set_allocated_character_data(
    ::Protocol::SCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  _impl_.character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_EnterGameServer.character_data)
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::release_character_data() {
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnterGameServer.character_data)
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::_internal_mutable_character_data() {
  
  if (_impl_.character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.character_data_ = p;
  }
  return _impl_.character_data_;
}
inline ::Protocol::SCharacterData* S2C_EnterGameServer::mutable_character_data() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.character_data)
  return _msg;
}
inline void S2C_EnterGameServer::set_allocated_character_data(::Protocol::SCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data));
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnterGameServer.character_data)
}

// repeated .Protocol.SItem item = 3;
inline int S2C_EnterGameServer::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int S2C_EnterGameServer::item_size() const {
  return _internal_item_size();
}
inline ::Protocol::SItem* S2C_EnterGameServer::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_EnterGameServer::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_EnterGameServer.item)
  return &_impl_.item_;
}
inline const ::Protocol::SItem& S2C_EnterGameServer::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::Protocol::SItem& S2C_EnterGameServer::item(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.item)
  return _internal_item(index);
}
inline ::Protocol::SItem* S2C_EnterGameServer::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::Protocol::SItem* S2C_EnterGameServer::add_item() {
  ::Protocol::SItem* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:Protocol.S2C_EnterGameServer.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_EnterGameServer::item() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_EnterGameServer.item)
  return _impl_.item_;
}

// repeated .Protocol.SItem eqipment = 4;
inline int S2C_EnterGameServer::_internal_eqipment_size() const {
  return _impl_.eqipment_.size();
}
inline int S2C_EnterGameServer::eqipment_size() const {
  return _internal_eqipment_size();
}
inline ::Protocol::SItem* S2C_EnterGameServer::mutable_eqipment(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.eqipment)
  return _impl_.eqipment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_EnterGameServer::mutable_eqipment() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_EnterGameServer.eqipment)
  return &_impl_.eqipment_;
}
inline const ::Protocol::SItem& S2C_EnterGameServer::_internal_eqipment(int index) const {
  return _impl_.eqipment_.Get(index);
}
inline const ::Protocol::SItem& S2C_EnterGameServer::eqipment(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.eqipment)
  return _internal_eqipment(index);
}
inline ::Protocol::SItem* S2C_EnterGameServer::_internal_add_eqipment() {
  return _impl_.eqipment_.Add();
}
inline ::Protocol::SItem* S2C_EnterGameServer::add_eqipment() {
  ::Protocol::SItem* _add = _internal_add_eqipment();
  // @@protoc_insertion_point(field_add:Protocol.S2C_EnterGameServer.eqipment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_EnterGameServer::eqipment() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_EnterGameServer.eqipment)
  return _impl_.eqipment_;
}

// int32 money = 5;
inline void S2C_EnterGameServer::clear_money() {
  _impl_.money_ = 0;
}
inline int32_t S2C_EnterGameServer::_internal_money() const {
  return _impl_.money_;
}
inline int32_t S2C_EnterGameServer::money() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.money)
  return _internal_money();
}
inline void S2C_EnterGameServer::_internal_set_money(int32_t value) {
  
  _impl_.money_ = value;
}
inline void S2C_EnterGameServer::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterGameServer.money)
}

// .Protocol.STransform transform = 6;
inline bool S2C_EnterGameServer::_internal_has_transform() const {
  return this != internal_default_instance() && _impl_.transform_ != nullptr;
}
inline bool S2C_EnterGameServer::has_transform() const {
  return _internal_has_transform();
}
inline const ::Protocol::STransform& S2C_EnterGameServer::_internal_transform() const {
  const ::Protocol::STransform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::STransform&>(
      ::Protocol::_STransform_default_instance_);
}
inline const ::Protocol::STransform& S2C_EnterGameServer::transform() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.transform)
  return _internal_transform();
}
inline void S2C_EnterGameServer::unsafe_arena_set_allocated_transform(
    ::Protocol::STransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_EnterGameServer.transform)
}
inline ::Protocol::STransform* S2C_EnterGameServer::release_transform() {
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::STransform* S2C_EnterGameServer::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnterGameServer.transform)
  
  ::Protocol::STransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::Protocol::STransform* S2C_EnterGameServer::_internal_mutable_transform() {
  
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::STransform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::Protocol::STransform* S2C_EnterGameServer::mutable_transform() {
  ::Protocol::STransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterGameServer.transform)
  return _msg;
}
inline void S2C_EnterGameServer::set_allocated_transform(::Protocol::STransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnterGameServer.transform)
}

// int32 error = 7;
inline void S2C_EnterGameServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_EnterGameServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_EnterGameServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterGameServer.error)
  return _internal_error();
}
inline void S2C_EnterGameServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_EnterGameServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterGameServer.error)
}

// -------------------------------------------------------------------

// C2S_LeaveGameServer

// -------------------------------------------------------------------

// S2C_LeaveGameServer

// int64 remote_id = 1;
inline void S2C_LeaveGameServer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_LeaveGameServer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_LeaveGameServer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveGameServer.remote_id)
  return _internal_remote_id();
}
inline void S2C_LeaveGameServer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_LeaveGameServer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveGameServer.remote_id)
}

// int32 error = 2;
inline void S2C_LeaveGameServer::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LeaveGameServer::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LeaveGameServer::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeaveGameServer.error)
  return _internal_error();
}
inline void S2C_LeaveGameServer::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LeaveGameServer::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeaveGameServer.error)
}

// -------------------------------------------------------------------

// C2S_Tick

// .Protocol.SVector cur_location = 2;
inline bool C2S_Tick::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool C2S_Tick::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& C2S_Tick::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_Tick::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Tick.cur_location)
  return _internal_cur_location();
}
inline void C2S_Tick::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_Tick.cur_location)
}
inline ::Protocol::SVector* C2S_Tick::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_Tick::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Tick.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_Tick::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* C2S_Tick::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Tick.cur_location)
  return _msg;
}
inline void C2S_Tick::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Tick.cur_location)
}

// -------------------------------------------------------------------

// S2C_Tick

// -------------------------------------------------------------------

// S2C_AppearCharacter

// int64 remote_id = 1;
inline void S2C_AppearCharacter::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_AppearCharacter::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_AppearCharacter::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.remote_id)
  return _internal_remote_id();
}
inline void S2C_AppearCharacter::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_AppearCharacter::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearCharacter.remote_id)
}

// int64 timestamp = 2;
inline void S2C_AppearCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AppearCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AppearCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.timestamp)
  return _internal_timestamp();
}
inline void S2C_AppearCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AppearCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearCharacter.timestamp)
}

// .Protocol.SVector cur_location = 3;
inline bool S2C_AppearCharacter::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_AppearCharacter::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_AppearCharacter::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearCharacter::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.cur_location)
  return _internal_cur_location();
}
inline void S2C_AppearCharacter::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearCharacter.cur_location)
}
inline ::Protocol::SVector* S2C_AppearCharacter::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearCharacter.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_AppearCharacter::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearCharacter.cur_location)
  return _msg;
}
inline void S2C_AppearCharacter::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearCharacter.cur_location)
}

// .Protocol.SVector move_location = 4;
inline bool S2C_AppearCharacter::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_AppearCharacter::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_AppearCharacter::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearCharacter::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.move_location)
  return _internal_move_location();
}
inline void S2C_AppearCharacter::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearCharacter.move_location)
}
inline ::Protocol::SVector* S2C_AppearCharacter::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearCharacter.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearCharacter::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_AppearCharacter::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearCharacter.move_location)
  return _msg;
}
inline void S2C_AppearCharacter::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearCharacter.move_location)
}

// .Protocol.SCharacterData character_data = 5;
inline bool S2C_AppearCharacter::_internal_has_character_data() const {
  return this != internal_default_instance() && _impl_.character_data_ != nullptr;
}
inline bool S2C_AppearCharacter::has_character_data() const {
  return _internal_has_character_data();
}
inline const ::Protocol::SCharacterData& S2C_AppearCharacter::_internal_character_data() const {
  const ::Protocol::SCharacterData* p = _impl_.character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterData&>(
      ::Protocol::_SCharacterData_default_instance_);
}
inline const ::Protocol::SCharacterData& S2C_AppearCharacter::character_data() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearCharacter.character_data)
  return _internal_character_data();
}
inline void S2C_AppearCharacter::unsafe_arena_set_allocated_character_data(
    ::Protocol::SCharacterData* character_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  _impl_.character_data_ = character_data;
  if (character_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearCharacter.character_data)
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::release_character_data() {
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::unsafe_arena_release_character_data() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearCharacter.character_data)
  
  ::Protocol::SCharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::_internal_mutable_character_data() {
  
  if (_impl_.character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterData>(GetArenaForAllocation());
    _impl_.character_data_ = p;
  }
  return _impl_.character_data_;
}
inline ::Protocol::SCharacterData* S2C_AppearCharacter::mutable_character_data() {
  ::Protocol::SCharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearCharacter.character_data)
  return _msg;
}
inline void S2C_AppearCharacter::set_allocated_character_data(::Protocol::SCharacterData* character_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_data_);
  }
  if (character_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_data));
    if (message_arena != submessage_arena) {
      character_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_data_ = character_data;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearCharacter.character_data)
}

// -------------------------------------------------------------------

// S2C_DisAppearCharacter

// int64 remote_id = 1;
inline void S2C_DisAppearCharacter::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_DisAppearCharacter::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_DisAppearCharacter::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DisAppearCharacter.remote_id)
  return _internal_remote_id();
}
inline void S2C_DisAppearCharacter::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_DisAppearCharacter::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DisAppearCharacter.remote_id)
}

// -------------------------------------------------------------------

// C2S_MovementCharacter

// int64 timestamp = 1;
inline void C2S_MovementCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_MovementCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_MovementCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.timestamp)
  return _internal_timestamp();
}
inline void C2S_MovementCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_MovementCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_MovementCharacter.timestamp)
}

// .Protocol.SVector cur_location = 2;
inline bool C2S_MovementCharacter::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool C2S_MovementCharacter::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& C2S_MovementCharacter::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_MovementCharacter::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.cur_location)
  return _internal_cur_location();
}
inline void C2S_MovementCharacter::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MovementCharacter.cur_location)
}
inline ::Protocol::SVector* C2S_MovementCharacter::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MovementCharacter.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* C2S_MovementCharacter::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MovementCharacter.cur_location)
  return _msg;
}
inline void C2S_MovementCharacter::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MovementCharacter.cur_location)
}

// .Protocol.SVector move_location = 3;
inline bool C2S_MovementCharacter::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool C2S_MovementCharacter::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& C2S_MovementCharacter::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_MovementCharacter::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.move_location)
  return _internal_move_location();
}
inline void C2S_MovementCharacter::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MovementCharacter.move_location)
}
inline ::Protocol::SVector* C2S_MovementCharacter::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MovementCharacter.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* C2S_MovementCharacter::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MovementCharacter.move_location)
  return _msg;
}
inline void C2S_MovementCharacter::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MovementCharacter.move_location)
}

// .Protocol.SVector move_velocity = 4;
inline bool C2S_MovementCharacter::_internal_has_move_velocity() const {
  return this != internal_default_instance() && _impl_.move_velocity_ != nullptr;
}
inline bool C2S_MovementCharacter::has_move_velocity() const {
  return _internal_has_move_velocity();
}
inline const ::Protocol::SVector& C2S_MovementCharacter::_internal_move_velocity() const {
  const ::Protocol::SVector* p = _impl_.move_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_MovementCharacter::move_velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_MovementCharacter.move_velocity)
  return _internal_move_velocity();
}
inline void C2S_MovementCharacter::unsafe_arena_set_allocated_move_velocity(
    ::Protocol::SVector* move_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  _impl_.move_velocity_ = move_velocity;
  if (move_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_MovementCharacter.move_velocity)
}
inline ::Protocol::SVector* C2S_MovementCharacter::release_move_velocity() {
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::unsafe_arena_release_move_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_MovementCharacter.move_velocity)
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_MovementCharacter::_internal_mutable_move_velocity() {
  
  if (_impl_.move_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_velocity_ = p;
  }
  return _impl_.move_velocity_;
}
inline ::Protocol::SVector* C2S_MovementCharacter::mutable_move_velocity() {
  ::Protocol::SVector* _msg = _internal_mutable_move_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_MovementCharacter.move_velocity)
  return _msg;
}
inline void C2S_MovementCharacter::set_allocated_move_velocity(::Protocol::SVector* move_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  if (move_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_velocity));
    if (message_arena != submessage_arena) {
      move_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_velocity_ = move_velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_MovementCharacter.move_velocity)
}

// -------------------------------------------------------------------

// S2C_MovementCharacter

// int64 remote_id = 1;
inline void S2C_MovementCharacter::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_MovementCharacter::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_MovementCharacter::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.remote_id)
  return _internal_remote_id();
}
inline void S2C_MovementCharacter::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_MovementCharacter::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementCharacter.remote_id)
}

// int64 timestamp = 2;
inline void S2C_MovementCharacter::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_MovementCharacter::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_MovementCharacter::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.timestamp)
  return _internal_timestamp();
}
inline void S2C_MovementCharacter::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_MovementCharacter::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementCharacter.timestamp)
}

// .Protocol.SVector cur_location = 3;
inline bool S2C_MovementCharacter::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_MovementCharacter::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_MovementCharacter::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementCharacter::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.cur_location)
  return _internal_cur_location();
}
inline void S2C_MovementCharacter::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementCharacter.cur_location)
}
inline ::Protocol::SVector* S2C_MovementCharacter::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementCharacter.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_MovementCharacter::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementCharacter.cur_location)
  return _msg;
}
inline void S2C_MovementCharacter::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementCharacter.cur_location)
}

// .Protocol.SVector move_location = 4;
inline bool S2C_MovementCharacter::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_MovementCharacter::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_MovementCharacter::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementCharacter::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.move_location)
  return _internal_move_location();
}
inline void S2C_MovementCharacter::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementCharacter.move_location)
}
inline ::Protocol::SVector* S2C_MovementCharacter::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementCharacter.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_MovementCharacter::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementCharacter.move_location)
  return _msg;
}
inline void S2C_MovementCharacter::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementCharacter.move_location)
}

// .Protocol.SVector move_velocity = 5;
inline bool S2C_MovementCharacter::_internal_has_move_velocity() const {
  return this != internal_default_instance() && _impl_.move_velocity_ != nullptr;
}
inline bool S2C_MovementCharacter::has_move_velocity() const {
  return _internal_has_move_velocity();
}
inline const ::Protocol::SVector& S2C_MovementCharacter::_internal_move_velocity() const {
  const ::Protocol::SVector* p = _impl_.move_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementCharacter::move_velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementCharacter.move_velocity)
  return _internal_move_velocity();
}
inline void S2C_MovementCharacter::unsafe_arena_set_allocated_move_velocity(
    ::Protocol::SVector* move_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  _impl_.move_velocity_ = move_velocity;
  if (move_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementCharacter.move_velocity)
}
inline ::Protocol::SVector* S2C_MovementCharacter::release_move_velocity() {
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::unsafe_arena_release_move_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementCharacter.move_velocity)
  
  ::Protocol::SVector* temp = _impl_.move_velocity_;
  _impl_.move_velocity_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementCharacter::_internal_mutable_move_velocity() {
  
  if (_impl_.move_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_velocity_ = p;
  }
  return _impl_.move_velocity_;
}
inline ::Protocol::SVector* S2C_MovementCharacter::mutable_move_velocity() {
  ::Protocol::SVector* _msg = _internal_mutable_move_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementCharacter.move_velocity)
  return _msg;
}
inline void S2C_MovementCharacter::set_allocated_move_velocity(::Protocol::SVector* move_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_velocity_);
  }
  if (move_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_velocity));
    if (message_arena != submessage_arena) {
      move_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_velocity_ = move_velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementCharacter.move_velocity)
}

// -------------------------------------------------------------------

// C2S_PlayAnimation

// int64 timestamp = 1;
inline void C2S_PlayAnimation::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_PlayAnimation::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_PlayAnimation::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PlayAnimation.timestamp)
  return _internal_timestamp();
}
inline void C2S_PlayAnimation::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_PlayAnimation::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PlayAnimation.timestamp)
}

// -------------------------------------------------------------------

// S2C_PlayAnimation

// int64 remote_id = 1;
inline void S2C_PlayAnimation::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_PlayAnimation::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_PlayAnimation::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayAnimation.remote_id)
  return _internal_remote_id();
}
inline void S2C_PlayAnimation::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_PlayAnimation::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayAnimation.remote_id)
}

// int64 timestamp = 2;
inline void S2C_PlayAnimation::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_PlayAnimation::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_PlayAnimation::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayAnimation.timestamp)
  return _internal_timestamp();
}
inline void S2C_PlayAnimation::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_PlayAnimation::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayAnimation.timestamp)
}

// int32 type = 3;
inline void S2C_PlayAnimation::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t S2C_PlayAnimation::_internal_type() const {
  return _impl_.type_;
}
inline int32_t S2C_PlayAnimation::type() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayAnimation.type)
  return _internal_type();
}
inline void S2C_PlayAnimation::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void S2C_PlayAnimation::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayAnimation.type)
}

// -------------------------------------------------------------------

// S2C_DetectChangePlayer

// int64 remote_id = 1;
inline void S2C_DetectChangePlayer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_DetectChangePlayer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_DetectChangePlayer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangePlayer.remote_id)
  return _internal_remote_id();
}
inline void S2C_DetectChangePlayer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_DetectChangePlayer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangePlayer.remote_id)
}

// repeated .Protocol.SStat stats = 2;
inline int S2C_DetectChangePlayer::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int S2C_DetectChangePlayer::stats_size() const {
  return _internal_stats_size();
}
inline ::Protocol::SStat* S2C_DetectChangePlayer::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DetectChangePlayer.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
S2C_DetectChangePlayer::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_DetectChangePlayer.stats)
  return &_impl_.stats_;
}
inline const ::Protocol::SStat& S2C_DetectChangePlayer::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::Protocol::SStat& S2C_DetectChangePlayer::stats(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangePlayer.stats)
  return _internal_stats(index);
}
inline ::Protocol::SStat* S2C_DetectChangePlayer::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::Protocol::SStat* S2C_DetectChangePlayer::add_stats() {
  ::Protocol::SStat* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:Protocol.S2C_DetectChangePlayer.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
S2C_DetectChangePlayer::stats() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_DetectChangePlayer.stats)
  return _impl_.stats_;
}

// int64 timestamp = 3;
inline void S2C_DetectChangePlayer::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_DetectChangePlayer::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_DetectChangePlayer::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangePlayer.timestamp)
  return _internal_timestamp();
}
inline void S2C_DetectChangePlayer::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_DetectChangePlayer::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangePlayer.timestamp)
}

// -------------------------------------------------------------------

// C2S_PlayerAutoAttack

// int64 timestamp = 1;
inline void C2S_PlayerAutoAttack::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_PlayerAutoAttack::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_PlayerAutoAttack::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PlayerAutoAttack.timestamp)
  return _internal_timestamp();
}
inline void C2S_PlayerAutoAttack::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_PlayerAutoAttack::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PlayerAutoAttack.timestamp)
}

// int64 object_id = 2;
inline void C2S_PlayerAutoAttack::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t C2S_PlayerAutoAttack::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t C2S_PlayerAutoAttack::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PlayerAutoAttack.object_id)
  return _internal_object_id();
}
inline void C2S_PlayerAutoAttack::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void C2S_PlayerAutoAttack::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PlayerAutoAttack.object_id)
}

// -------------------------------------------------------------------

// S2C_PlayerAutoAttack

// int64 remote_id = 1;
inline void S2C_PlayerAutoAttack::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_PlayerAutoAttack::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_PlayerAutoAttack::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.remote_id)
  return _internal_remote_id();
}
inline void S2C_PlayerAutoAttack::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_PlayerAutoAttack::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerAutoAttack.remote_id)
}

// int32 combo = 2;
inline void S2C_PlayerAutoAttack::clear_combo() {
  _impl_.combo_ = 0;
}
inline int32_t S2C_PlayerAutoAttack::_internal_combo() const {
  return _impl_.combo_;
}
inline int32_t S2C_PlayerAutoAttack::combo() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.combo)
  return _internal_combo();
}
inline void S2C_PlayerAutoAttack::_internal_set_combo(int32_t value) {
  
  _impl_.combo_ = value;
}
inline void S2C_PlayerAutoAttack::set_combo(int32_t value) {
  _internal_set_combo(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerAutoAttack.combo)
}

// .Protocol.SVector location = 3;
inline bool S2C_PlayerAutoAttack::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_PlayerAutoAttack::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_PlayerAutoAttack::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_PlayerAutoAttack::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.location)
  return _internal_location();
}
inline void S2C_PlayerAutoAttack::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_PlayerAutoAttack.location)
}
inline ::Protocol::SVector* S2C_PlayerAutoAttack::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_PlayerAutoAttack::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_PlayerAutoAttack.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_PlayerAutoAttack::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_PlayerAutoAttack::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_PlayerAutoAttack.location)
  return _msg;
}
inline void S2C_PlayerAutoAttack::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_PlayerAutoAttack.location)
}

// .Protocol.SRotator rotation = 4;
inline bool S2C_PlayerAutoAttack::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_PlayerAutoAttack::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_PlayerAutoAttack::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_PlayerAutoAttack::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.rotation)
  return _internal_rotation();
}
inline void S2C_PlayerAutoAttack::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_PlayerAutoAttack.rotation)
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_PlayerAutoAttack.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_PlayerAutoAttack::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_PlayerAutoAttack.rotation)
  return _msg;
}
inline void S2C_PlayerAutoAttack::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_PlayerAutoAttack.rotation)
}

// int64 timestamp = 5;
inline void S2C_PlayerAutoAttack::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_PlayerAutoAttack::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_PlayerAutoAttack::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerAutoAttack.timestamp)
  return _internal_timestamp();
}
inline void S2C_PlayerAutoAttack::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_PlayerAutoAttack::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerAutoAttack.timestamp)
}

// -------------------------------------------------------------------

// S2C_PlayerEndAutoAttack

// int64 remote_id = 1;
inline void S2C_PlayerEndAutoAttack::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_PlayerEndAutoAttack::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_PlayerEndAutoAttack::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerEndAutoAttack.remote_id)
  return _internal_remote_id();
}
inline void S2C_PlayerEndAutoAttack::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_PlayerEndAutoAttack::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerEndAutoAttack.remote_id)
}

// int64 timestamp = 2;
inline void S2C_PlayerEndAutoAttack::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_PlayerEndAutoAttack::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_PlayerEndAutoAttack::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlayerEndAutoAttack.timestamp)
  return _internal_timestamp();
}
inline void S2C_PlayerEndAutoAttack::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_PlayerEndAutoAttack::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlayerEndAutoAttack.timestamp)
}

// -------------------------------------------------------------------

// S2C_UpdateExperience

// int64 remote_id = 1;
inline void S2C_UpdateExperience::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_UpdateExperience::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_UpdateExperience::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateExperience.remote_id)
  return _internal_remote_id();
}
inline void S2C_UpdateExperience::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_UpdateExperience::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateExperience.remote_id)
}

// int32 experience = 2;
inline void S2C_UpdateExperience::clear_experience() {
  _impl_.experience_ = 0;
}
inline int32_t S2C_UpdateExperience::_internal_experience() const {
  return _impl_.experience_;
}
inline int32_t S2C_UpdateExperience::experience() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateExperience.experience)
  return _internal_experience();
}
inline void S2C_UpdateExperience::_internal_set_experience(int32_t value) {
  
  _impl_.experience_ = value;
}
inline void S2C_UpdateExperience::set_experience(int32_t value) {
  _internal_set_experience(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateExperience.experience)
}

// int64 timestamp = 3;
inline void S2C_UpdateExperience::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_UpdateExperience::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_UpdateExperience::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateExperience.timestamp)
  return _internal_timestamp();
}
inline void S2C_UpdateExperience::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_UpdateExperience::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateExperience.timestamp)
}

// -------------------------------------------------------------------

// S2C_LevelUp

// int64 remote_id = 1;
inline void S2C_LevelUp::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_LevelUp::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_LevelUp::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LevelUp.remote_id)
  return _internal_remote_id();
}
inline void S2C_LevelUp::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_LevelUp::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LevelUp.remote_id)
}

// int32 level = 2;
inline void S2C_LevelUp::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t S2C_LevelUp::_internal_level() const {
  return _impl_.level_;
}
inline int32_t S2C_LevelUp::level() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LevelUp.level)
  return _internal_level();
}
inline void S2C_LevelUp::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void S2C_LevelUp::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LevelUp.level)
}

// int32 experience = 3;
inline void S2C_LevelUp::clear_experience() {
  _impl_.experience_ = 0;
}
inline int32_t S2C_LevelUp::_internal_experience() const {
  return _impl_.experience_;
}
inline int32_t S2C_LevelUp::experience() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LevelUp.experience)
  return _internal_experience();
}
inline void S2C_LevelUp::_internal_set_experience(int32_t value) {
  
  _impl_.experience_ = value;
}
inline void S2C_LevelUp::set_experience(int32_t value) {
  _internal_set_experience(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LevelUp.experience)
}

// int64 timestamp = 4;
inline void S2C_LevelUp::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_LevelUp::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_LevelUp::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LevelUp.timestamp)
  return _internal_timestamp();
}
inline void S2C_LevelUp::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_LevelUp::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LevelUp.timestamp)
}

// -------------------------------------------------------------------

// C2S_Chat

// bytes message = 1;
inline void C2S_Chat::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& C2S_Chat::message() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Chat.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_Chat::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_Chat.message)
}
inline std::string* C2S_Chat::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_Chat.message)
  return _s;
}
inline const std::string& C2S_Chat::_internal_message() const {
  return _impl_.message_.Get();
}
inline void C2S_Chat::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_Chat::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_Chat::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_Chat.message)
  return _impl_.message_.Release();
}
inline void C2S_Chat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_Chat.message)
}

// int64 timestamp = 2;
inline void C2S_Chat::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_Chat::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_Chat::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_Chat.timestamp)
  return _internal_timestamp();
}
inline void C2S_Chat::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_Chat::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_Chat.timestamp)
}

// -------------------------------------------------------------------

// S2C_Chat

// int64 remote_id = 1;
inline void S2C_Chat::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_Chat::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_Chat::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Chat.remote_id)
  return _internal_remote_id();
}
inline void S2C_Chat::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_Chat::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Chat.remote_id)
}

// bytes name = 2;
inline void S2C_Chat::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& S2C_Chat::name() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Chat.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_Chat::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_Chat.name)
}
inline std::string* S2C_Chat::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_Chat.name)
  return _s;
}
inline const std::string& S2C_Chat::_internal_name() const {
  return _impl_.name_.Get();
}
inline void S2C_Chat::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_Chat::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_Chat::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_Chat.name)
  return _impl_.name_.Release();
}
inline void S2C_Chat::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_Chat.name)
}

// bytes message = 3;
inline void S2C_Chat::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S2C_Chat::message() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Chat.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_Chat::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_Chat.message)
}
inline std::string* S2C_Chat::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_Chat.message)
  return _s;
}
inline const std::string& S2C_Chat::_internal_message() const {
  return _impl_.message_.Get();
}
inline void S2C_Chat::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_Chat::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_Chat::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_Chat.message)
  return _impl_.message_.Release();
}
inline void S2C_Chat::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_Chat.message)
}

// .Protocol.EChat chat_type = 4;
inline void S2C_Chat::clear_chat_type() {
  _impl_.chat_type_ = 0;
}
inline ::Protocol::EChat S2C_Chat::_internal_chat_type() const {
  return static_cast< ::Protocol::EChat >(_impl_.chat_type_);
}
inline ::Protocol::EChat S2C_Chat::chat_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Chat.chat_type)
  return _internal_chat_type();
}
inline void S2C_Chat::_internal_set_chat_type(::Protocol::EChat value) {
  
  _impl_.chat_type_ = value;
}
inline void S2C_Chat::set_chat_type(::Protocol::EChat value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Chat.chat_type)
}

// int64 timestamp = 5;
inline void S2C_Chat::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_Chat::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_Chat::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Chat.timestamp)
  return _internal_timestamp();
}
inline void S2C_Chat::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_Chat::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Chat.timestamp)
}

// -------------------------------------------------------------------

// C2S_LoadFriendList

// int32 list_type = 1;
inline void C2S_LoadFriendList::clear_list_type() {
  _impl_.list_type_ = 0;
}
inline int32_t C2S_LoadFriendList::_internal_list_type() const {
  return _impl_.list_type_;
}
inline int32_t C2S_LoadFriendList::list_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoadFriendList.list_type)
  return _internal_list_type();
}
inline void C2S_LoadFriendList::_internal_set_list_type(int32_t value) {
  
  _impl_.list_type_ = value;
}
inline void C2S_LoadFriendList::set_list_type(int32_t value) {
  _internal_set_list_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoadFriendList.list_type)
}

// int64 timestamp = 2;
inline void C2S_LoadFriendList::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_LoadFriendList::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_LoadFriendList::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoadFriendList.timestamp)
  return _internal_timestamp();
}
inline void C2S_LoadFriendList::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_LoadFriendList::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoadFriendList.timestamp)
}

// -------------------------------------------------------------------

// S2C_LoadFriendList

// repeated .Protocol.SFriend friends = 1;
inline int S2C_LoadFriendList::_internal_friends_size() const {
  return _impl_.friends_.size();
}
inline int S2C_LoadFriendList::friends_size() const {
  return _internal_friends_size();
}
inline ::Protocol::SFriend* S2C_LoadFriendList::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadFriendList.friends)
  return _impl_.friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SFriend >*
S2C_LoadFriendList::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadFriendList.friends)
  return &_impl_.friends_;
}
inline const ::Protocol::SFriend& S2C_LoadFriendList::_internal_friends(int index) const {
  return _impl_.friends_.Get(index);
}
inline const ::Protocol::SFriend& S2C_LoadFriendList::friends(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadFriendList.friends)
  return _internal_friends(index);
}
inline ::Protocol::SFriend* S2C_LoadFriendList::_internal_add_friends() {
  return _impl_.friends_.Add();
}
inline ::Protocol::SFriend* S2C_LoadFriendList::add_friends() {
  ::Protocol::SFriend* _add = _internal_add_friends();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadFriendList.friends)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SFriend >&
S2C_LoadFriendList::friends() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadFriendList.friends)
  return _impl_.friends_;
}

// int32 list_type = 2;
inline void S2C_LoadFriendList::clear_list_type() {
  _impl_.list_type_ = 0;
}
inline int32_t S2C_LoadFriendList::_internal_list_type() const {
  return _impl_.list_type_;
}
inline int32_t S2C_LoadFriendList::list_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadFriendList.list_type)
  return _internal_list_type();
}
inline void S2C_LoadFriendList::_internal_set_list_type(int32_t value) {
  
  _impl_.list_type_ = value;
}
inline void S2C_LoadFriendList::set_list_type(int32_t value) {
  _internal_set_list_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadFriendList.list_type)
}

// int64 timestamp = 3;
inline void S2C_LoadFriendList::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_LoadFriendList::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_LoadFriendList::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadFriendList.timestamp)
  return _internal_timestamp();
}
inline void S2C_LoadFriendList::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_LoadFriendList::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadFriendList.timestamp)
}

// -------------------------------------------------------------------

// C2S_RequestFriend

// bytes nick_name = 1;
inline void C2S_RequestFriend::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& C2S_RequestFriend::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestFriend.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_RequestFriend::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestFriend.nick_name)
}
inline std::string* C2S_RequestFriend::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_RequestFriend.nick_name)
  return _s;
}
inline const std::string& C2S_RequestFriend::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void C2S_RequestFriend::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_RequestFriend::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_RequestFriend::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_RequestFriend.nick_name)
  return _impl_.nick_name_.Release();
}
inline void C2S_RequestFriend::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_RequestFriend.nick_name)
}

// int32 action = 2;
inline void C2S_RequestFriend::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t C2S_RequestFriend::_internal_action() const {
  return _impl_.action_;
}
inline int32_t C2S_RequestFriend::action() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestFriend.action)
  return _internal_action();
}
inline void C2S_RequestFriend::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void C2S_RequestFriend::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestFriend.action)
}

// int64 timestamp = 3;
inline void C2S_RequestFriend::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_RequestFriend::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_RequestFriend::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestFriend.timestamp)
  return _internal_timestamp();
}
inline void C2S_RequestFriend::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_RequestFriend::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestFriend.timestamp)
}

// -------------------------------------------------------------------

// S2C_RequestFriend

// int32 error = 1;
inline void S2C_RequestFriend::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_RequestFriend::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_RequestFriend::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestFriend.error)
  return _internal_error();
}
inline void S2C_RequestFriend::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_RequestFriend::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestFriend.error)
}

// int32 action = 2;
inline void S2C_RequestFriend::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t S2C_RequestFriend::_internal_action() const {
  return _impl_.action_;
}
inline int32_t S2C_RequestFriend::action() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestFriend.action)
  return _internal_action();
}
inline void S2C_RequestFriend::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void S2C_RequestFriend::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestFriend.action)
}

// int64 timestamp = 3;
inline void S2C_RequestFriend::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_RequestFriend::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_RequestFriend::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestFriend.timestamp)
  return _internal_timestamp();
}
inline void S2C_RequestFriend::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_RequestFriend::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestFriend.timestamp)
}

// -------------------------------------------------------------------

// C2S_BlockFriend

// bytes nick_name = 1;
inline void C2S_BlockFriend::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& C2S_BlockFriend::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_BlockFriend.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_BlockFriend::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_BlockFriend.nick_name)
}
inline std::string* C2S_BlockFriend::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_BlockFriend.nick_name)
  return _s;
}
inline const std::string& C2S_BlockFriend::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void C2S_BlockFriend::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_BlockFriend::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_BlockFriend::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_BlockFriend.nick_name)
  return _impl_.nick_name_.Release();
}
inline void C2S_BlockFriend::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_BlockFriend.nick_name)
}

// int32 action = 2;
inline void C2S_BlockFriend::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t C2S_BlockFriend::_internal_action() const {
  return _impl_.action_;
}
inline int32_t C2S_BlockFriend::action() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_BlockFriend.action)
  return _internal_action();
}
inline void C2S_BlockFriend::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void C2S_BlockFriend::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_BlockFriend.action)
}

// int64 timestamp = 3;
inline void C2S_BlockFriend::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_BlockFriend::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_BlockFriend::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_BlockFriend.timestamp)
  return _internal_timestamp();
}
inline void C2S_BlockFriend::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_BlockFriend::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_BlockFriend.timestamp)
}

// -------------------------------------------------------------------

// S2C_BlockFriend

// int32 error = 1;
inline void S2C_BlockFriend::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_BlockFriend::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_BlockFriend::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_BlockFriend.error)
  return _internal_error();
}
inline void S2C_BlockFriend::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_BlockFriend::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_BlockFriend.error)
}

// int32 action = 2;
inline void S2C_BlockFriend::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t S2C_BlockFriend::_internal_action() const {
  return _impl_.action_;
}
inline int32_t S2C_BlockFriend::action() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_BlockFriend.action)
  return _internal_action();
}
inline void S2C_BlockFriend::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void S2C_BlockFriend::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_BlockFriend.action)
}

// int64 timestamp = 3;
inline void S2C_BlockFriend::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_BlockFriend::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_BlockFriend::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_BlockFriend.timestamp)
  return _internal_timestamp();
}
inline void S2C_BlockFriend::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_BlockFriend::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_BlockFriend.timestamp)
}

// -------------------------------------------------------------------

// S2C_ConnectFriend

// bytes nick_name = 1;
inline void S2C_ConnectFriend::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& S2C_ConnectFriend::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ConnectFriend.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_ConnectFriend::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_ConnectFriend.nick_name)
}
inline std::string* S2C_ConnectFriend::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ConnectFriend.nick_name)
  return _s;
}
inline const std::string& S2C_ConnectFriend::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void S2C_ConnectFriend::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_ConnectFriend::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_ConnectFriend::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ConnectFriend.nick_name)
  return _impl_.nick_name_.Release();
}
inline void S2C_ConnectFriend::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ConnectFriend.nick_name)
}

// int64 timestamp = 2;
inline void S2C_ConnectFriend::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_ConnectFriend::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_ConnectFriend::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ConnectFriend.timestamp)
  return _internal_timestamp();
}
inline void S2C_ConnectFriend::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_ConnectFriend::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ConnectFriend.timestamp)
}

// -------------------------------------------------------------------

// S2C_DisConnectFriend

// bytes nick_name = 1;
inline void S2C_DisConnectFriend::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& S2C_DisConnectFriend::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DisConnectFriend.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_DisConnectFriend::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_DisConnectFriend.nick_name)
}
inline std::string* S2C_DisConnectFriend::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DisConnectFriend.nick_name)
  return _s;
}
inline const std::string& S2C_DisConnectFriend::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void S2C_DisConnectFriend::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_DisConnectFriend::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_DisConnectFriend::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DisConnectFriend.nick_name)
  return _impl_.nick_name_.Release();
}
inline void S2C_DisConnectFriend::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DisConnectFriend.nick_name)
}

// int64 timestamp = 2;
inline void S2C_DisConnectFriend::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_DisConnectFriend::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_DisConnectFriend::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DisConnectFriend.timestamp)
  return _internal_timestamp();
}
inline void S2C_DisConnectFriend::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_DisConnectFriend::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DisConnectFriend.timestamp)
}

// -------------------------------------------------------------------

// C2S_CreateParty

// int64 timestamp = 1;
inline void C2S_CreateParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_CreateParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_CreateParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CreateParty.timestamp)
  return _internal_timestamp();
}
inline void C2S_CreateParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_CreateParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_CreateParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_CreateParty

// int32 error = 1;
inline void S2C_CreateParty::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_CreateParty::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_CreateParty::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateParty.error)
  return _internal_error();
}
inline void S2C_CreateParty::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_CreateParty::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_CreateParty.error)
}

// int64 timestamp = 2;
inline void S2C_CreateParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_CreateParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_CreateParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_CreateParty.timestamp)
  return _internal_timestamp();
}
inline void S2C_CreateParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_CreateParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_CreateParty.timestamp)
}

// -------------------------------------------------------------------

// C2S_RequestEnterParty

// bytes nick_name = 1;
inline void C2S_RequestEnterParty::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& C2S_RequestEnterParty::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestEnterParty.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C2S_RequestEnterParty::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestEnterParty.nick_name)
}
inline std::string* C2S_RequestEnterParty::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_RequestEnterParty.nick_name)
  return _s;
}
inline const std::string& C2S_RequestEnterParty::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void C2S_RequestEnterParty::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C2S_RequestEnterParty::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C2S_RequestEnterParty::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_RequestEnterParty.nick_name)
  return _impl_.nick_name_.Release();
}
inline void C2S_RequestEnterParty::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_RequestEnterParty.nick_name)
}

// int64 timestamp = 2;
inline void C2S_RequestEnterParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_RequestEnterParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_RequestEnterParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestEnterParty.timestamp)
  return _internal_timestamp();
}
inline void C2S_RequestEnterParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_RequestEnterParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestEnterParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_RequestEnterParty

// int32 error = 1;
inline void S2C_RequestEnterParty::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_RequestEnterParty::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_RequestEnterParty::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestEnterParty.error)
  return _internal_error();
}
inline void S2C_RequestEnterParty::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_RequestEnterParty::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestEnterParty.error)
}

// int64 timestamp = 2;
inline void S2C_RequestEnterParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_RequestEnterParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_RequestEnterParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestEnterParty.timestamp)
  return _internal_timestamp();
}
inline void S2C_RequestEnterParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_RequestEnterParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestEnterParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_RequestParty

// int64 remote_id = 1;
inline void S2C_RequestParty::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_RequestParty::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_RequestParty::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestParty.remote_id)
  return _internal_remote_id();
}
inline void S2C_RequestParty::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_RequestParty::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestParty.remote_id)
}

// bytes nick_name = 2;
inline void S2C_RequestParty::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& S2C_RequestParty::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestParty.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_RequestParty::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestParty.nick_name)
}
inline std::string* S2C_RequestParty::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_RequestParty.nick_name)
  return _s;
}
inline const std::string& S2C_RequestParty::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void S2C_RequestParty::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_RequestParty::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_RequestParty::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_RequestParty.nick_name)
  return _impl_.nick_name_.Release();
}
inline void S2C_RequestParty::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_RequestParty.nick_name)
}

// int32 level = 3;
inline void S2C_RequestParty::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t S2C_RequestParty::_internal_level() const {
  return _impl_.level_;
}
inline int32_t S2C_RequestParty::level() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestParty.level)
  return _internal_level();
}
inline void S2C_RequestParty::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void S2C_RequestParty::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestParty.level)
}

// .Protocol.ECharacterClass character_class = 4;
inline void S2C_RequestParty::clear_character_class() {
  _impl_.character_class_ = 0;
}
inline ::Protocol::ECharacterClass S2C_RequestParty::_internal_character_class() const {
  return static_cast< ::Protocol::ECharacterClass >(_impl_.character_class_);
}
inline ::Protocol::ECharacterClass S2C_RequestParty::character_class() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestParty.character_class)
  return _internal_character_class();
}
inline void S2C_RequestParty::_internal_set_character_class(::Protocol::ECharacterClass value) {
  
  _impl_.character_class_ = value;
}
inline void S2C_RequestParty::set_character_class(::Protocol::ECharacterClass value) {
  _internal_set_character_class(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestParty.character_class)
}

// -------------------------------------------------------------------

// C2S_RequestLeaveParty

// int64 remote_id = 1;
inline void C2S_RequestLeaveParty::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t C2S_RequestLeaveParty::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t C2S_RequestLeaveParty::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestLeaveParty.remote_id)
  return _internal_remote_id();
}
inline void C2S_RequestLeaveParty::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void C2S_RequestLeaveParty::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestLeaveParty.remote_id)
}

// int64 timestamp = 2;
inline void C2S_RequestLeaveParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_RequestLeaveParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_RequestLeaveParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestLeaveParty.timestamp)
  return _internal_timestamp();
}
inline void C2S_RequestLeaveParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_RequestLeaveParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestLeaveParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_RequestLeaveParty

// int32 error = 1;
inline void S2C_RequestLeaveParty::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_RequestLeaveParty::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_RequestLeaveParty::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestLeaveParty.error)
  return _internal_error();
}
inline void S2C_RequestLeaveParty::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_RequestLeaveParty::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestLeaveParty.error)
}

// int32 cause = 2;
inline void S2C_RequestLeaveParty::clear_cause() {
  _impl_.cause_ = 0;
}
inline int32_t S2C_RequestLeaveParty::_internal_cause() const {
  return _impl_.cause_;
}
inline int32_t S2C_RequestLeaveParty::cause() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestLeaveParty.cause)
  return _internal_cause();
}
inline void S2C_RequestLeaveParty::_internal_set_cause(int32_t value) {
  
  _impl_.cause_ = value;
}
inline void S2C_RequestLeaveParty::set_cause(int32_t value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestLeaveParty.cause)
}

// int64 timestamp = 3;
inline void S2C_RequestLeaveParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_RequestLeaveParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_RequestLeaveParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestLeaveParty.timestamp)
  return _internal_timestamp();
}
inline void S2C_RequestLeaveParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_RequestLeaveParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestLeaveParty.timestamp)
}

// -------------------------------------------------------------------

// C2S_RequestLeaderParty

// int64 remote_id = 1;
inline void C2S_RequestLeaderParty::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t C2S_RequestLeaderParty::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t C2S_RequestLeaderParty::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestLeaderParty.remote_id)
  return _internal_remote_id();
}
inline void C2S_RequestLeaderParty::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void C2S_RequestLeaderParty::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestLeaderParty.remote_id)
}

// int64 timestamp = 2;
inline void C2S_RequestLeaderParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_RequestLeaderParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_RequestLeaderParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestLeaderParty.timestamp)
  return _internal_timestamp();
}
inline void C2S_RequestLeaderParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_RequestLeaderParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestLeaderParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_RequestLeaderParty

// int32 error = 1;
inline void S2C_RequestLeaderParty::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_RequestLeaderParty::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_RequestLeaderParty::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestLeaderParty.error)
  return _internal_error();
}
inline void S2C_RequestLeaderParty::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_RequestLeaderParty::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestLeaderParty.error)
}

// int64 timestamp = 3;
inline void S2C_RequestLeaderParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_RequestLeaderParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_RequestLeaderParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestLeaderParty.timestamp)
  return _internal_timestamp();
}
inline void S2C_RequestLeaderParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_RequestLeaderParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestLeaderParty.timestamp)
}

// -------------------------------------------------------------------

// C2S_ResponeParty

// int64 remote_id = 1;
inline void C2S_ResponeParty::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t C2S_ResponeParty::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t C2S_ResponeParty::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ResponeParty.remote_id)
  return _internal_remote_id();
}
inline void C2S_ResponeParty::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void C2S_ResponeParty::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ResponeParty.remote_id)
}

// int32 action = 2;
inline void C2S_ResponeParty::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t C2S_ResponeParty::_internal_action() const {
  return _impl_.action_;
}
inline int32_t C2S_ResponeParty::action() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ResponeParty.action)
  return _internal_action();
}
inline void C2S_ResponeParty::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void C2S_ResponeParty::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ResponeParty.action)
}

// int64 timestamp = 3;
inline void C2S_ResponeParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_ResponeParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_ResponeParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ResponeParty.timestamp)
  return _internal_timestamp();
}
inline void C2S_ResponeParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_ResponeParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ResponeParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_ResponeParty

// int32 error = 1;
inline void S2C_ResponeParty::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_ResponeParty::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_ResponeParty::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponeParty.error)
  return _internal_error();
}
inline void S2C_ResponeParty::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_ResponeParty::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponeParty.error)
}

// int64 remote_id = 2;
inline void S2C_ResponeParty::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_ResponeParty::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_ResponeParty::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponeParty.remote_id)
  return _internal_remote_id();
}
inline void S2C_ResponeParty::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_ResponeParty::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponeParty.remote_id)
}

// int32 action = 3;
inline void S2C_ResponeParty::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t S2C_ResponeParty::_internal_action() const {
  return _impl_.action_;
}
inline int32_t S2C_ResponeParty::action() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponeParty.action)
  return _internal_action();
}
inline void S2C_ResponeParty::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void S2C_ResponeParty::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponeParty.action)
}

// int64 timestamp = 4;
inline void S2C_ResponeParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_ResponeParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_ResponeParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponeParty.timestamp)
  return _internal_timestamp();
}
inline void S2C_ResponeParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_ResponeParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponeParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_LoadParty

// int32 error = 1;
inline void S2C_LoadParty::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LoadParty::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LoadParty::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadParty.error)
  return _internal_error();
}
inline void S2C_LoadParty::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LoadParty::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.error)
}

// int64 leader_id = 2;
inline void S2C_LoadParty::clear_leader_id() {
  _impl_.leader_id_ = int64_t{0};
}
inline int64_t S2C_LoadParty::_internal_leader_id() const {
  return _impl_.leader_id_;
}
inline int64_t S2C_LoadParty::leader_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadParty.leader_id)
  return _internal_leader_id();
}
inline void S2C_LoadParty::_internal_set_leader_id(int64_t value) {
  
  _impl_.leader_id_ = value;
}
inline void S2C_LoadParty::set_leader_id(int64_t value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.leader_id)
}

// repeated int64 remote_id = 3;
inline int S2C_LoadParty::_internal_remote_id_size() const {
  return _impl_.remote_id_.size();
}
inline int S2C_LoadParty::remote_id_size() const {
  return _internal_remote_id_size();
}
inline void S2C_LoadParty::clear_remote_id() {
  _impl_.remote_id_.Clear();
}
inline int64_t S2C_LoadParty::_internal_remote_id(int index) const {
  return _impl_.remote_id_.Get(index);
}
inline int64_t S2C_LoadParty::remote_id(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadParty.remote_id)
  return _internal_remote_id(index);
}
inline void S2C_LoadParty::set_remote_id(int index, int64_t value) {
  _impl_.remote_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.remote_id)
}
inline void S2C_LoadParty::_internal_add_remote_id(int64_t value) {
  _impl_.remote_id_.Add(value);
}
inline void S2C_LoadParty::add_remote_id(int64_t value) {
  _internal_add_remote_id(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadParty.remote_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
S2C_LoadParty::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
S2C_LoadParty::remote_id() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadParty.remote_id)
  return _internal_remote_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
S2C_LoadParty::_internal_mutable_remote_id() {
  return &_impl_.remote_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
S2C_LoadParty::mutable_remote_id() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadParty.remote_id)
  return _internal_mutable_remote_id();
}

// repeated bytes nick_name = 4;
inline int S2C_LoadParty::_internal_nick_name_size() const {
  return _impl_.nick_name_.size();
}
inline int S2C_LoadParty::nick_name_size() const {
  return _internal_nick_name_size();
}
inline void S2C_LoadParty::clear_nick_name() {
  _impl_.nick_name_.Clear();
}
inline std::string* S2C_LoadParty::add_nick_name() {
  std::string* _s = _internal_add_nick_name();
  // @@protoc_insertion_point(field_add_mutable:Protocol.S2C_LoadParty.nick_name)
  return _s;
}
inline const std::string& S2C_LoadParty::_internal_nick_name(int index) const {
  return _impl_.nick_name_.Get(index);
}
inline const std::string& S2C_LoadParty::nick_name(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadParty.nick_name)
  return _internal_nick_name(index);
}
inline std::string* S2C_LoadParty::mutable_nick_name(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadParty.nick_name)
  return _impl_.nick_name_.Mutable(index);
}
inline void S2C_LoadParty::set_nick_name(int index, const std::string& value) {
  _impl_.nick_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.nick_name)
}
inline void S2C_LoadParty::set_nick_name(int index, std::string&& value) {
  _impl_.nick_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.nick_name)
}
inline void S2C_LoadParty::set_nick_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nick_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S2C_LoadParty.nick_name)
}
inline void S2C_LoadParty::set_nick_name(int index, const void* value, size_t size) {
  _impl_.nick_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S2C_LoadParty.nick_name)
}
inline std::string* S2C_LoadParty::_internal_add_nick_name() {
  return _impl_.nick_name_.Add();
}
inline void S2C_LoadParty::add_nick_name(const std::string& value) {
  _impl_.nick_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadParty.nick_name)
}
inline void S2C_LoadParty::add_nick_name(std::string&& value) {
  _impl_.nick_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadParty.nick_name)
}
inline void S2C_LoadParty::add_nick_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nick_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S2C_LoadParty.nick_name)
}
inline void S2C_LoadParty::add_nick_name(const void* value, size_t size) {
  _impl_.nick_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S2C_LoadParty.nick_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S2C_LoadParty::nick_name() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadParty.nick_name)
  return _impl_.nick_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S2C_LoadParty::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadParty.nick_name)
  return &_impl_.nick_name_;
}

// repeated int32 level = 5;
inline int S2C_LoadParty::_internal_level_size() const {
  return _impl_.level_.size();
}
inline int S2C_LoadParty::level_size() const {
  return _internal_level_size();
}
inline void S2C_LoadParty::clear_level() {
  _impl_.level_.Clear();
}
inline int32_t S2C_LoadParty::_internal_level(int index) const {
  return _impl_.level_.Get(index);
}
inline int32_t S2C_LoadParty::level(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadParty.level)
  return _internal_level(index);
}
inline void S2C_LoadParty::set_level(int index, int32_t value) {
  _impl_.level_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.level)
}
inline void S2C_LoadParty::_internal_add_level(int32_t value) {
  _impl_.level_.Add(value);
}
inline void S2C_LoadParty::add_level(int32_t value) {
  _internal_add_level(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadParty.level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadParty::_internal_level() const {
  return _impl_.level_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadParty::level() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadParty.level)
  return _internal_level();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadParty::_internal_mutable_level() {
  return &_impl_.level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadParty::mutable_level() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadParty.level)
  return _internal_mutable_level();
}

// repeated .Protocol.ECharacterClass character_class = 6;
inline int S2C_LoadParty::_internal_character_class_size() const {
  return _impl_.character_class_.size();
}
inline int S2C_LoadParty::character_class_size() const {
  return _internal_character_class_size();
}
inline void S2C_LoadParty::clear_character_class() {
  _impl_.character_class_.Clear();
}
inline ::Protocol::ECharacterClass S2C_LoadParty::_internal_character_class(int index) const {
  return static_cast< ::Protocol::ECharacterClass >(_impl_.character_class_.Get(index));
}
inline ::Protocol::ECharacterClass S2C_LoadParty::character_class(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadParty.character_class)
  return _internal_character_class(index);
}
inline void S2C_LoadParty::set_character_class(int index, ::Protocol::ECharacterClass value) {
  _impl_.character_class_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.character_class)
}
inline void S2C_LoadParty::_internal_add_character_class(::Protocol::ECharacterClass value) {
  _impl_.character_class_.Add(value);
}
inline void S2C_LoadParty::add_character_class(::Protocol::ECharacterClass value) {
  _internal_add_character_class(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadParty.character_class)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
S2C_LoadParty::character_class() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadParty.character_class)
  return _impl_.character_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
S2C_LoadParty::_internal_mutable_character_class() {
  return &_impl_.character_class_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
S2C_LoadParty::mutable_character_class() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadParty.character_class)
  return _internal_mutable_character_class();
}

// int64 timestamp = 7;
inline void S2C_LoadParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_LoadParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_LoadParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadParty.timestamp)
  return _internal_timestamp();
}
inline void S2C_LoadParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_LoadParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_NotifyParty

// bytes nick_name = 1;
inline void S2C_NotifyParty::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& S2C_NotifyParty::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_NotifyParty.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_NotifyParty::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_NotifyParty.nick_name)
}
inline std::string* S2C_NotifyParty::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_NotifyParty.nick_name)
  return _s;
}
inline const std::string& S2C_NotifyParty::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void S2C_NotifyParty::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_NotifyParty::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_NotifyParty::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_NotifyParty.nick_name)
  return _impl_.nick_name_.Release();
}
inline void S2C_NotifyParty::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_NotifyParty.nick_name)
}

// int32 action = 2;
inline void S2C_NotifyParty::clear_action() {
  _impl_.action_ = 0;
}
inline int32_t S2C_NotifyParty::_internal_action() const {
  return _impl_.action_;
}
inline int32_t S2C_NotifyParty::action() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_NotifyParty.action)
  return _internal_action();
}
inline void S2C_NotifyParty::_internal_set_action(int32_t value) {
  
  _impl_.action_ = value;
}
inline void S2C_NotifyParty::set_action(int32_t value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_NotifyParty.action)
}

// int64 timestamp = 3;
inline void S2C_NotifyParty::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_NotifyParty::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_NotifyParty::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_NotifyParty.timestamp)
  return _internal_timestamp();
}
inline void S2C_NotifyParty::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_NotifyParty::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_NotifyParty.timestamp)
}

// -------------------------------------------------------------------

// S2C_EnterPartyPlayer

// int64 remote_id = 1;
inline void S2C_EnterPartyPlayer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_EnterPartyPlayer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_EnterPartyPlayer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPartyPlayer.remote_id)
  return _internal_remote_id();
}
inline void S2C_EnterPartyPlayer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_EnterPartyPlayer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPartyPlayer.remote_id)
}

// int64 leader_id = 2;
inline void S2C_EnterPartyPlayer::clear_leader_id() {
  _impl_.leader_id_ = int64_t{0};
}
inline int64_t S2C_EnterPartyPlayer::_internal_leader_id() const {
  return _impl_.leader_id_;
}
inline int64_t S2C_EnterPartyPlayer::leader_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPartyPlayer.leader_id)
  return _internal_leader_id();
}
inline void S2C_EnterPartyPlayer::_internal_set_leader_id(int64_t value) {
  
  _impl_.leader_id_ = value;
}
inline void S2C_EnterPartyPlayer::set_leader_id(int64_t value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPartyPlayer.leader_id)
}

// bytes nick_name = 3;
inline void S2C_EnterPartyPlayer::clear_nick_name() {
  _impl_.nick_name_.ClearToEmpty();
}
inline const std::string& S2C_EnterPartyPlayer::nick_name() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPartyPlayer.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_EnterPartyPlayer::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nick_name_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPartyPlayer.nick_name)
}
inline std::string* S2C_EnterPartyPlayer::mutable_nick_name() {
  std::string* _s = _internal_mutable_nick_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterPartyPlayer.nick_name)
  return _s;
}
inline const std::string& S2C_EnterPartyPlayer::_internal_nick_name() const {
  return _impl_.nick_name_.Get();
}
inline void S2C_EnterPartyPlayer::_internal_set_nick_name(const std::string& value) {
  
  _impl_.nick_name_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_EnterPartyPlayer::_internal_mutable_nick_name() {
  
  return _impl_.nick_name_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_EnterPartyPlayer::release_nick_name() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnterPartyPlayer.nick_name)
  return _impl_.nick_name_.Release();
}
inline void S2C_EnterPartyPlayer::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  _impl_.nick_name_.SetAllocated(nick_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nick_name_.IsDefault()) {
    _impl_.nick_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnterPartyPlayer.nick_name)
}

// int32 level = 4;
inline void S2C_EnterPartyPlayer::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t S2C_EnterPartyPlayer::_internal_level() const {
  return _impl_.level_;
}
inline int32_t S2C_EnterPartyPlayer::level() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPartyPlayer.level)
  return _internal_level();
}
inline void S2C_EnterPartyPlayer::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void S2C_EnterPartyPlayer::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPartyPlayer.level)
}

// .Protocol.ECharacterClass character_class = 5;
inline void S2C_EnterPartyPlayer::clear_character_class() {
  _impl_.character_class_ = 0;
}
inline ::Protocol::ECharacterClass S2C_EnterPartyPlayer::_internal_character_class() const {
  return static_cast< ::Protocol::ECharacterClass >(_impl_.character_class_);
}
inline ::Protocol::ECharacterClass S2C_EnterPartyPlayer::character_class() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPartyPlayer.character_class)
  return _internal_character_class();
}
inline void S2C_EnterPartyPlayer::_internal_set_character_class(::Protocol::ECharacterClass value) {
  
  _impl_.character_class_ = value;
}
inline void S2C_EnterPartyPlayer::set_character_class(::Protocol::ECharacterClass value) {
  _internal_set_character_class(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPartyPlayer.character_class)
}

// int64 timestamp = 6;
inline void S2C_EnterPartyPlayer::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_EnterPartyPlayer::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_EnterPartyPlayer::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPartyPlayer.timestamp)
  return _internal_timestamp();
}
inline void S2C_EnterPartyPlayer::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_EnterPartyPlayer::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPartyPlayer.timestamp)
}

// -------------------------------------------------------------------

// S2C_LeavePartyPlayer

// int64 remote_id = 1;
inline void S2C_LeavePartyPlayer::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_LeavePartyPlayer::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_LeavePartyPlayer::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeavePartyPlayer.remote_id)
  return _internal_remote_id();
}
inline void S2C_LeavePartyPlayer::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_LeavePartyPlayer::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeavePartyPlayer.remote_id)
}

// int64 timestamp = 2;
inline void S2C_LeavePartyPlayer::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_LeavePartyPlayer::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_LeavePartyPlayer::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LeavePartyPlayer.timestamp)
  return _internal_timestamp();
}
inline void S2C_LeavePartyPlayer::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_LeavePartyPlayer::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LeavePartyPlayer.timestamp)
}

// -------------------------------------------------------------------

// S2C_AppearItem

// .Protocol.SItem item = 1;
inline bool S2C_AppearItem::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool S2C_AppearItem::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& S2C_AppearItem::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& S2C_AppearItem::item() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearItem.item)
  return _internal_item();
}
inline void S2C_AppearItem::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearItem.item)
}
inline ::Protocol::SItem* S2C_AppearItem::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* S2C_AppearItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearItem.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* S2C_AppearItem::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* S2C_AppearItem::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearItem.item)
  return _msg;
}
inline void S2C_AppearItem::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearItem.item)
}

// -------------------------------------------------------------------

// S2C_AppearArrow

// int64 object_id = 1;
inline void S2C_AppearArrow::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AppearArrow::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AppearArrow::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.object_id)
  return _internal_object_id();
}
inline void S2C_AppearArrow::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AppearArrow::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearArrow.object_id)
}

// .Protocol.SVector location = 2;
inline bool S2C_AppearArrow::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_AppearArrow::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_AppearArrow::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearArrow::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.location)
  return _internal_location();
}
inline void S2C_AppearArrow::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearArrow.location)
}
inline ::Protocol::SVector* S2C_AppearArrow::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearArrow::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearArrow.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearArrow::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_AppearArrow::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearArrow.location)
  return _msg;
}
inline void S2C_AppearArrow::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearArrow.location)
}

// .Protocol.SRotator rotation = 3;
inline bool S2C_AppearArrow::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_AppearArrow::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_AppearArrow::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_AppearArrow::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.rotation)
  return _internal_rotation();
}
inline void S2C_AppearArrow::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearArrow.rotation)
}
inline ::Protocol::SRotator* S2C_AppearArrow::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearArrow::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearArrow.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearArrow::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_AppearArrow::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearArrow.rotation)
  return _msg;
}
inline void S2C_AppearArrow::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearArrow.rotation)
}

// int64 timestamp = 4;
inline void S2C_AppearArrow::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AppearArrow::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AppearArrow::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearArrow.timestamp)
  return _internal_timestamp();
}
inline void S2C_AppearArrow::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AppearArrow::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearArrow.timestamp)
}

// -------------------------------------------------------------------

// S2C_AppearProtal

// int64 object_id = 1;
inline void S2C_AppearProtal::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AppearProtal::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AppearProtal::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearProtal.object_id)
  return _internal_object_id();
}
inline void S2C_AppearProtal::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AppearProtal::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearProtal.object_id)
}

// .Protocol.SVector location = 2;
inline bool S2C_AppearProtal::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_AppearProtal::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_AppearProtal::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearProtal::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearProtal.location)
  return _internal_location();
}
inline void S2C_AppearProtal::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearProtal.location)
}
inline ::Protocol::SVector* S2C_AppearProtal::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearProtal::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearProtal.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearProtal::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_AppearProtal::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearProtal.location)
  return _msg;
}
inline void S2C_AppearProtal::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearProtal.location)
}

// .Protocol.SRotator rotation = 3;
inline bool S2C_AppearProtal::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_AppearProtal::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_AppearProtal::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_AppearProtal::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearProtal.rotation)
  return _internal_rotation();
}
inline void S2C_AppearProtal::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearProtal.rotation)
}
inline ::Protocol::SRotator* S2C_AppearProtal::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearProtal::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearProtal.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearProtal::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_AppearProtal::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearProtal.rotation)
  return _msg;
}
inline void S2C_AppearProtal::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearProtal.rotation)
}

// int64 timestamp = 4;
inline void S2C_AppearProtal::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AppearProtal::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AppearProtal::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearProtal.timestamp)
  return _internal_timestamp();
}
inline void S2C_AppearProtal::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AppearProtal::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearProtal.timestamp)
}

// -------------------------------------------------------------------

// S2C_AppearObstruction

// int64 object_id = 1;
inline void S2C_AppearObstruction::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AppearObstruction::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AppearObstruction::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearObstruction.object_id)
  return _internal_object_id();
}
inline void S2C_AppearObstruction::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AppearObstruction::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearObstruction.object_id)
}

// int32 type = 2;
inline void S2C_AppearObstruction::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t S2C_AppearObstruction::_internal_type() const {
  return _impl_.type_;
}
inline int32_t S2C_AppearObstruction::type() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearObstruction.type)
  return _internal_type();
}
inline void S2C_AppearObstruction::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void S2C_AppearObstruction::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearObstruction.type)
}

// .Protocol.SVector location = 3;
inline bool S2C_AppearObstruction::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_AppearObstruction::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_AppearObstruction::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearObstruction::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearObstruction.location)
  return _internal_location();
}
inline void S2C_AppearObstruction::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearObstruction.location)
}
inline ::Protocol::SVector* S2C_AppearObstruction::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearObstruction::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearObstruction.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearObstruction::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_AppearObstruction::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearObstruction.location)
  return _msg;
}
inline void S2C_AppearObstruction::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearObstruction.location)
}

// .Protocol.SRotator rotation = 4;
inline bool S2C_AppearObstruction::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_AppearObstruction::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_AppearObstruction::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_AppearObstruction::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearObstruction.rotation)
  return _internal_rotation();
}
inline void S2C_AppearObstruction::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearObstruction.rotation)
}
inline ::Protocol::SRotator* S2C_AppearObstruction::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearObstruction::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearObstruction.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearObstruction::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_AppearObstruction::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearObstruction.rotation)
  return _msg;
}
inline void S2C_AppearObstruction::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearObstruction.rotation)
}

// .Protocol.SVector extent = 5;
inline bool S2C_AppearObstruction::_internal_has_extent() const {
  return this != internal_default_instance() && _impl_.extent_ != nullptr;
}
inline bool S2C_AppearObstruction::has_extent() const {
  return _internal_has_extent();
}
inline const ::Protocol::SVector& S2C_AppearObstruction::_internal_extent() const {
  const ::Protocol::SVector* p = _impl_.extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearObstruction::extent() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearObstruction.extent)
  return _internal_extent();
}
inline void S2C_AppearObstruction::unsafe_arena_set_allocated_extent(
    ::Protocol::SVector* extent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extent_);
  }
  _impl_.extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearObstruction.extent)
}
inline ::Protocol::SVector* S2C_AppearObstruction::release_extent() {
  
  ::Protocol::SVector* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearObstruction::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearObstruction.extent)
  
  ::Protocol::SVector* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearObstruction::_internal_mutable_extent() {
  
  if (_impl_.extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.extent_ = p;
  }
  return _impl_.extent_;
}
inline ::Protocol::SVector* S2C_AppearObstruction::mutable_extent() {
  ::Protocol::SVector* _msg = _internal_mutable_extent();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearObstruction.extent)
  return _msg;
}
inline void S2C_AppearObstruction::set_allocated_extent(::Protocol::SVector* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extent_);
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent));
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearObstruction.extent)
}

// -------------------------------------------------------------------

// C2S_InteractiveObject

// int64 object_id = 1;
inline void C2S_InteractiveObject::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t C2S_InteractiveObject::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t C2S_InteractiveObject::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_InteractiveObject.object_id)
  return _internal_object_id();
}
inline void C2S_InteractiveObject::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void C2S_InteractiveObject::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_InteractiveObject.object_id)
}

// -------------------------------------------------------------------

// S2C_MovementProjectile

// int64 object_id = 1;
inline void S2C_MovementProjectile::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_MovementProjectile::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_MovementProjectile::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementProjectile.object_id)
  return _internal_object_id();
}
inline void S2C_MovementProjectile::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_MovementProjectile::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementProjectile.object_id)
}

// .Protocol.SVector location = 2;
inline bool S2C_MovementProjectile::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_MovementProjectile::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_MovementProjectile::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementProjectile::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementProjectile.location)
  return _internal_location();
}
inline void S2C_MovementProjectile::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementProjectile.location)
}
inline ::Protocol::SVector* S2C_MovementProjectile::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementProjectile::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementProjectile.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementProjectile::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_MovementProjectile::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementProjectile.location)
  return _msg;
}
inline void S2C_MovementProjectile::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementProjectile.location)
}

// .Protocol.SRotator rotation = 3;
inline bool S2C_MovementProjectile::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_MovementProjectile::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_MovementProjectile::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_MovementProjectile::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementProjectile.rotation)
  return _internal_rotation();
}
inline void S2C_MovementProjectile::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementProjectile.rotation)
}
inline ::Protocol::SRotator* S2C_MovementProjectile::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_MovementProjectile::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementProjectile.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_MovementProjectile::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_MovementProjectile::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementProjectile.rotation)
  return _msg;
}
inline void S2C_MovementProjectile::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementProjectile.rotation)
}

// int64 timestamp = 4;
inline void S2C_MovementProjectile::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_MovementProjectile::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_MovementProjectile::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementProjectile.timestamp)
  return _internal_timestamp();
}
inline void S2C_MovementProjectile::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_MovementProjectile::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementProjectile.timestamp)
}

// -------------------------------------------------------------------

// S2C_Teleport

// int64 object_id = 1;
inline void S2C_Teleport::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_Teleport::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_Teleport::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Teleport.object_id)
  return _internal_object_id();
}
inline void S2C_Teleport::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_Teleport::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_Teleport.object_id)
}

// .Protocol.SVector location = 2;
inline bool S2C_Teleport::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_Teleport::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_Teleport::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_Teleport::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_Teleport.location)
  return _internal_location();
}
inline void S2C_Teleport::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_Teleport.location)
}
inline ::Protocol::SVector* S2C_Teleport::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_Teleport::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_Teleport.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_Teleport::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_Teleport::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_Teleport.location)
  return _msg;
}
inline void S2C_Teleport::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_Teleport.location)
}

// -------------------------------------------------------------------

// S2C_AppearEnemy

// int64 object_id = 1;
inline void S2C_AppearEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AppearEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AppearEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_AppearEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AppearEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.object_id)
}

// int32 enemy_id = 2;
inline void S2C_AppearEnemy::clear_enemy_id() {
  _impl_.enemy_id_ = 0;
}
inline int32_t S2C_AppearEnemy::_internal_enemy_id() const {
  return _impl_.enemy_id_;
}
inline int32_t S2C_AppearEnemy::enemy_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.enemy_id)
  return _internal_enemy_id();
}
inline void S2C_AppearEnemy::_internal_set_enemy_id(int32_t value) {
  
  _impl_.enemy_id_ = value;
}
inline void S2C_AppearEnemy::set_enemy_id(int32_t value) {
  _internal_set_enemy_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.enemy_id)
}

// .Protocol.EEnemyState state = 3;
inline void S2C_AppearEnemy::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::EEnemyState S2C_AppearEnemy::_internal_state() const {
  return static_cast< ::Protocol::EEnemyState >(_impl_.state_);
}
inline ::Protocol::EEnemyState S2C_AppearEnemy::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.state)
  return _internal_state();
}
inline void S2C_AppearEnemy::_internal_set_state(::Protocol::EEnemyState value) {
  
  _impl_.state_ = value;
}
inline void S2C_AppearEnemy::set_state(::Protocol::EEnemyState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.state)
}

// repeated .Protocol.SStat stats = 4;
inline int S2C_AppearEnemy::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int S2C_AppearEnemy::stats_size() const {
  return _internal_stats_size();
}
inline ::Protocol::SStat* S2C_AppearEnemy::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearEnemy.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
S2C_AppearEnemy::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_AppearEnemy.stats)
  return &_impl_.stats_;
}
inline const ::Protocol::SStat& S2C_AppearEnemy::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::Protocol::SStat& S2C_AppearEnemy::stats(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.stats)
  return _internal_stats(index);
}
inline ::Protocol::SStat* S2C_AppearEnemy::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::Protocol::SStat* S2C_AppearEnemy::add_stats() {
  ::Protocol::SStat* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:Protocol.S2C_AppearEnemy.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
S2C_AppearEnemy::stats() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_AppearEnemy.stats)
  return _impl_.stats_;
}

// .Protocol.SVector cur_location = 5;
inline bool S2C_AppearEnemy::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_AppearEnemy::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_AppearEnemy::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearEnemy::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.cur_location)
  return _internal_cur_location();
}
inline void S2C_AppearEnemy::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearEnemy.cur_location)
}
inline ::Protocol::SVector* S2C_AppearEnemy::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearEnemy.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_AppearEnemy::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearEnemy.cur_location)
  return _msg;
}
inline void S2C_AppearEnemy::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearEnemy.cur_location)
}

// .Protocol.SVector move_location = 6;
inline bool S2C_AppearEnemy::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_AppearEnemy::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_AppearEnemy::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearEnemy::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.move_location)
  return _internal_move_location();
}
inline void S2C_AppearEnemy::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearEnemy.move_location)
}
inline ::Protocol::SVector* S2C_AppearEnemy::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearEnemy.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearEnemy::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_AppearEnemy::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearEnemy.move_location)
  return _msg;
}
inline void S2C_AppearEnemy::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearEnemy.move_location)
}

// int64 timestamp = 7;
inline void S2C_AppearEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AppearEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AppearEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_AppearEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AppearEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_DetectChangeEnemy

// int64 object_id = 1;
inline void S2C_DetectChangeEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_DetectChangeEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_DetectChangeEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_DetectChangeEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_DetectChangeEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangeEnemy.object_id)
}

// repeated .Protocol.SStat stats = 2;
inline int S2C_DetectChangeEnemy::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int S2C_DetectChangeEnemy::stats_size() const {
  return _internal_stats_size();
}
inline ::Protocol::SStat* S2C_DetectChangeEnemy::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DetectChangeEnemy.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >*
S2C_DetectChangeEnemy::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_DetectChangeEnemy.stats)
  return &_impl_.stats_;
}
inline const ::Protocol::SStat& S2C_DetectChangeEnemy::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::Protocol::SStat& S2C_DetectChangeEnemy::stats(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.stats)
  return _internal_stats(index);
}
inline ::Protocol::SStat* S2C_DetectChangeEnemy::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::Protocol::SStat* S2C_DetectChangeEnemy::add_stats() {
  ::Protocol::SStat* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:Protocol.S2C_DetectChangeEnemy.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SStat >&
S2C_DetectChangeEnemy::stats() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_DetectChangeEnemy.stats)
  return _impl_.stats_;
}

// .Protocol.EEnemyState state = 3;
inline void S2C_DetectChangeEnemy::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::EEnemyState S2C_DetectChangeEnemy::_internal_state() const {
  return static_cast< ::Protocol::EEnemyState >(_impl_.state_);
}
inline ::Protocol::EEnemyState S2C_DetectChangeEnemy::state() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.state)
  return _internal_state();
}
inline void S2C_DetectChangeEnemy::_internal_set_state(::Protocol::EEnemyState value) {
  
  _impl_.state_ = value;
}
inline void S2C_DetectChangeEnemy::set_state(::Protocol::EEnemyState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangeEnemy.state)
}

// int64 timestamp = 4;
inline void S2C_DetectChangeEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_DetectChangeEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_DetectChangeEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DetectChangeEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_DetectChangeEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_DetectChangeEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DetectChangeEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_MovementEnemy

// int64 object_id = 1;
inline void S2C_MovementEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_MovementEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_MovementEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_MovementEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_MovementEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementEnemy.object_id)
}

// .Protocol.SVector cur_location = 2;
inline bool S2C_MovementEnemy::_internal_has_cur_location() const {
  return this != internal_default_instance() && _impl_.cur_location_ != nullptr;
}
inline bool S2C_MovementEnemy::has_cur_location() const {
  return _internal_has_cur_location();
}
inline const ::Protocol::SVector& S2C_MovementEnemy::_internal_cur_location() const {
  const ::Protocol::SVector* p = _impl_.cur_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementEnemy::cur_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.cur_location)
  return _internal_cur_location();
}
inline void S2C_MovementEnemy::unsafe_arena_set_allocated_cur_location(
    ::Protocol::SVector* cur_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  _impl_.cur_location_ = cur_location;
  if (cur_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementEnemy.cur_location)
}
inline ::Protocol::SVector* S2C_MovementEnemy::release_cur_location() {
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::unsafe_arena_release_cur_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementEnemy.cur_location)
  
  ::Protocol::SVector* temp = _impl_.cur_location_;
  _impl_.cur_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::_internal_mutable_cur_location() {
  
  if (_impl_.cur_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.cur_location_ = p;
  }
  return _impl_.cur_location_;
}
inline ::Protocol::SVector* S2C_MovementEnemy::mutable_cur_location() {
  ::Protocol::SVector* _msg = _internal_mutable_cur_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementEnemy.cur_location)
  return _msg;
}
inline void S2C_MovementEnemy::set_allocated_cur_location(::Protocol::SVector* cur_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cur_location_);
  }
  if (cur_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_location));
    if (message_arena != submessage_arena) {
      cur_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cur_location_ = cur_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementEnemy.cur_location)
}

// .Protocol.SVector move_location = 3;
inline bool S2C_MovementEnemy::_internal_has_move_location() const {
  return this != internal_default_instance() && _impl_.move_location_ != nullptr;
}
inline bool S2C_MovementEnemy::has_move_location() const {
  return _internal_has_move_location();
}
inline const ::Protocol::SVector& S2C_MovementEnemy::_internal_move_location() const {
  const ::Protocol::SVector* p = _impl_.move_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_MovementEnemy::move_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.move_location)
  return _internal_move_location();
}
inline void S2C_MovementEnemy::unsafe_arena_set_allocated_move_location(
    ::Protocol::SVector* move_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  _impl_.move_location_ = move_location;
  if (move_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_MovementEnemy.move_location)
}
inline ::Protocol::SVector* S2C_MovementEnemy::release_move_location() {
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::unsafe_arena_release_move_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_MovementEnemy.move_location)
  
  ::Protocol::SVector* temp = _impl_.move_location_;
  _impl_.move_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_MovementEnemy::_internal_mutable_move_location() {
  
  if (_impl_.move_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.move_location_ = p;
  }
  return _impl_.move_location_;
}
inline ::Protocol::SVector* S2C_MovementEnemy::mutable_move_location() {
  ::Protocol::SVector* _msg = _internal_mutable_move_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_MovementEnemy.move_location)
  return _msg;
}
inline void S2C_MovementEnemy::set_allocated_move_location(::Protocol::SVector* move_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.move_location_);
  }
  if (move_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(move_location));
    if (message_arena != submessage_arena) {
      move_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.move_location_ = move_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_MovementEnemy.move_location)
}

// int64 timestamp = 4;
inline void S2C_MovementEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_MovementEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_MovementEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_MovementEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_MovementEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_MovementEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_MovementEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_AnimationMovementEnemy

// int64 object_id = 1;
inline void S2C_AnimationMovementEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AnimationMovementEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AnimationMovementEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AnimationMovementEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_AnimationMovementEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AnimationMovementEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AnimationMovementEnemy.object_id)
}

// .Protocol.SVector start_location = 2;
inline bool S2C_AnimationMovementEnemy::_internal_has_start_location() const {
  return this != internal_default_instance() && _impl_.start_location_ != nullptr;
}
inline bool S2C_AnimationMovementEnemy::has_start_location() const {
  return _internal_has_start_location();
}
inline const ::Protocol::SVector& S2C_AnimationMovementEnemy::_internal_start_location() const {
  const ::Protocol::SVector* p = _impl_.start_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AnimationMovementEnemy::start_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AnimationMovementEnemy.start_location)
  return _internal_start_location();
}
inline void S2C_AnimationMovementEnemy::unsafe_arena_set_allocated_start_location(
    ::Protocol::SVector* start_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_location_);
  }
  _impl_.start_location_ = start_location;
  if (start_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AnimationMovementEnemy.start_location)
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::release_start_location() {
  
  ::Protocol::SVector* temp = _impl_.start_location_;
  _impl_.start_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::unsafe_arena_release_start_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AnimationMovementEnemy.start_location)
  
  ::Protocol::SVector* temp = _impl_.start_location_;
  _impl_.start_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::_internal_mutable_start_location() {
  
  if (_impl_.start_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.start_location_ = p;
  }
  return _impl_.start_location_;
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::mutable_start_location() {
  ::Protocol::SVector* _msg = _internal_mutable_start_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AnimationMovementEnemy.start_location)
  return _msg;
}
inline void S2C_AnimationMovementEnemy::set_allocated_start_location(::Protocol::SVector* start_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_location_);
  }
  if (start_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_location));
    if (message_arena != submessage_arena) {
      start_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_location_ = start_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AnimationMovementEnemy.start_location)
}

// .Protocol.SVector end_location = 3;
inline bool S2C_AnimationMovementEnemy::_internal_has_end_location() const {
  return this != internal_default_instance() && _impl_.end_location_ != nullptr;
}
inline bool S2C_AnimationMovementEnemy::has_end_location() const {
  return _internal_has_end_location();
}
inline const ::Protocol::SVector& S2C_AnimationMovementEnemy::_internal_end_location() const {
  const ::Protocol::SVector* p = _impl_.end_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AnimationMovementEnemy::end_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AnimationMovementEnemy.end_location)
  return _internal_end_location();
}
inline void S2C_AnimationMovementEnemy::unsafe_arena_set_allocated_end_location(
    ::Protocol::SVector* end_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_location_);
  }
  _impl_.end_location_ = end_location;
  if (end_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AnimationMovementEnemy.end_location)
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::release_end_location() {
  
  ::Protocol::SVector* temp = _impl_.end_location_;
  _impl_.end_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::unsafe_arena_release_end_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AnimationMovementEnemy.end_location)
  
  ::Protocol::SVector* temp = _impl_.end_location_;
  _impl_.end_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::_internal_mutable_end_location() {
  
  if (_impl_.end_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.end_location_ = p;
  }
  return _impl_.end_location_;
}
inline ::Protocol::SVector* S2C_AnimationMovementEnemy::mutable_end_location() {
  ::Protocol::SVector* _msg = _internal_mutable_end_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AnimationMovementEnemy.end_location)
  return _msg;
}
inline void S2C_AnimationMovementEnemy::set_allocated_end_location(::Protocol::SVector* end_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_location_);
  }
  if (end_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_location));
    if (message_arena != submessage_arena) {
      end_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_location_ = end_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AnimationMovementEnemy.end_location)
}

// int64 duration = 4;
inline void S2C_AnimationMovementEnemy::clear_duration() {
  _impl_.duration_ = int64_t{0};
}
inline int64_t S2C_AnimationMovementEnemy::_internal_duration() const {
  return _impl_.duration_;
}
inline int64_t S2C_AnimationMovementEnemy::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AnimationMovementEnemy.duration)
  return _internal_duration();
}
inline void S2C_AnimationMovementEnemy::_internal_set_duration(int64_t value) {
  
  _impl_.duration_ = value;
}
inline void S2C_AnimationMovementEnemy::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AnimationMovementEnemy.duration)
}

// int64 timestamp = 5;
inline void S2C_AnimationMovementEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_AnimationMovementEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_AnimationMovementEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AnimationMovementEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_AnimationMovementEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_AnimationMovementEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AnimationMovementEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_EnemyAutoAttack

// int64 object_id = 1;
inline void S2C_EnemyAutoAttack::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_EnemyAutoAttack::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_EnemyAutoAttack::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnemyAutoAttack.object_id)
  return _internal_object_id();
}
inline void S2C_EnemyAutoAttack::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_EnemyAutoAttack::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnemyAutoAttack.object_id)
}

// .Protocol.SRotator rotation = 2;
inline bool S2C_EnemyAutoAttack::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_EnemyAutoAttack::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_EnemyAutoAttack::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_EnemyAutoAttack::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnemyAutoAttack.rotation)
  return _internal_rotation();
}
inline void S2C_EnemyAutoAttack::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_EnemyAutoAttack.rotation)
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnemyAutoAttack.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_EnemyAutoAttack::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnemyAutoAttack.rotation)
  return _msg;
}
inline void S2C_EnemyAutoAttack::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnemyAutoAttack.rotation)
}

// int64 timestamp = 3;
inline void S2C_EnemyAutoAttack::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_EnemyAutoAttack::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_EnemyAutoAttack::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnemyAutoAttack.timestamp)
  return _internal_timestamp();
}
inline void S2C_EnemyAutoAttack::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_EnemyAutoAttack::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnemyAutoAttack.timestamp)
}

// -------------------------------------------------------------------

// S2C_HitEnemy

// int64 object_id = 1;
inline void S2C_HitEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_HitEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_HitEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_HitEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_HitEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_HitEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_HitEnemy.object_id)
}

// int64 timestamp = 3;
inline void S2C_HitEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_HitEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_HitEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_HitEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_HitEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_HitEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_HitEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_DeathEnemy

// int64 object_id = 1;
inline void S2C_DeathEnemy::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_DeathEnemy::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_DeathEnemy::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeathEnemy.object_id)
  return _internal_object_id();
}
inline void S2C_DeathEnemy::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_DeathEnemy::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeathEnemy.object_id)
}

// int64 timestamp = 2;
inline void S2C_DeathEnemy::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_DeathEnemy::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_DeathEnemy::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeathEnemy.timestamp)
  return _internal_timestamp();
}
inline void S2C_DeathEnemy::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_DeathEnemy::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeathEnemy.timestamp)
}

// -------------------------------------------------------------------

// S2C_DisAppearGameObject

// int64 object_id = 1;
inline void S2C_DisAppearGameObject::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_DisAppearGameObject::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_DisAppearGameObject::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DisAppearGameObject.object_id)
  return _internal_object_id();
}
inline void S2C_DisAppearGameObject::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_DisAppearGameObject::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DisAppearGameObject.object_id)
}

// -------------------------------------------------------------------

// C2S_LoadInventory

// int64 timestamp = 1;
inline void C2S_LoadInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_LoadInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_LoadInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_LoadInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_LoadInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_LoadInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_LoadInventory.timestamp)
}

// -------------------------------------------------------------------

// S2C_LoadInventory

// repeated .Protocol.SItem item = 1;
inline int S2C_LoadInventory::_internal_item_size() const {
  return _impl_.item_.size();
}
inline int S2C_LoadInventory::item_size() const {
  return _internal_item_size();
}
inline ::Protocol::SItem* S2C_LoadInventory::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadInventory.item)
  return _impl_.item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_LoadInventory::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadInventory.item)
  return &_impl_.item_;
}
inline const ::Protocol::SItem& S2C_LoadInventory::_internal_item(int index) const {
  return _impl_.item_.Get(index);
}
inline const ::Protocol::SItem& S2C_LoadInventory::item(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.item)
  return _internal_item(index);
}
inline ::Protocol::SItem* S2C_LoadInventory::_internal_add_item() {
  return _impl_.item_.Add();
}
inline ::Protocol::SItem* S2C_LoadInventory::add_item() {
  ::Protocol::SItem* _add = _internal_add_item();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadInventory.item)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_LoadInventory::item() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadInventory.item)
  return _impl_.item_;
}

// repeated .Protocol.SItem eqipment = 2;
inline int S2C_LoadInventory::_internal_eqipment_size() const {
  return _impl_.eqipment_.size();
}
inline int S2C_LoadInventory::eqipment_size() const {
  return _internal_eqipment_size();
}
inline ::Protocol::SItem* S2C_LoadInventory::mutable_eqipment(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_LoadInventory.eqipment)
  return _impl_.eqipment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >*
S2C_LoadInventory::mutable_eqipment() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadInventory.eqipment)
  return &_impl_.eqipment_;
}
inline const ::Protocol::SItem& S2C_LoadInventory::_internal_eqipment(int index) const {
  return _impl_.eqipment_.Get(index);
}
inline const ::Protocol::SItem& S2C_LoadInventory::eqipment(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.eqipment)
  return _internal_eqipment(index);
}
inline ::Protocol::SItem* S2C_LoadInventory::_internal_add_eqipment() {
  return _impl_.eqipment_.Add();
}
inline ::Protocol::SItem* S2C_LoadInventory::add_eqipment() {
  ::Protocol::SItem* _add = _internal_add_eqipment();
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadInventory.eqipment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::SItem >&
S2C_LoadInventory::eqipment() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadInventory.eqipment)
  return _impl_.eqipment_;
}

// int32 money = 3;
inline void S2C_LoadInventory::clear_money() {
  _impl_.money_ = 0;
}
inline int32_t S2C_LoadInventory::_internal_money() const {
  return _impl_.money_;
}
inline int32_t S2C_LoadInventory::money() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.money)
  return _internal_money();
}
inline void S2C_LoadInventory::_internal_set_money(int32_t value) {
  
  _impl_.money_ = value;
}
inline void S2C_LoadInventory::set_money(int32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadInventory.money)
}

// int32 error = 4;
inline void S2C_LoadInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_LoadInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_LoadInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadInventory.error)
  return _internal_error();
}
inline void S2C_LoadInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_LoadInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadInventory.error)
}

// -------------------------------------------------------------------

// C2S_InsertInventory

// int64 timestamp = 1;
inline void C2S_InsertInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_InsertInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_InsertInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_InsertInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_InsertInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_InsertInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_InsertInventory.timestamp)
}

// .Protocol.SItem item = 2;
inline bool C2S_InsertInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C2S_InsertInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& C2S_InsertInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_InsertInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_InsertInventory.item)
  return _internal_item();
}
inline void C2S_InsertInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_InsertInventory.item)
}
inline ::Protocol::SItem* C2S_InsertInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_InsertInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_InsertInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_InsertInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* C2S_InsertInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_InsertInventory.item)
  return _msg;
}
inline void C2S_InsertInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_InsertInventory.item)
}

// -------------------------------------------------------------------

// S2C_InsertInventory

// int64 remote_id = 1;
inline void S2C_InsertInventory::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_InsertInventory::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_InsertInventory::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InsertInventory.remote_id)
  return _internal_remote_id();
}
inline void S2C_InsertInventory::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_InsertInventory::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_InsertInventory.remote_id)
}

// int64 object_id = 2;
inline void S2C_InsertInventory::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_InsertInventory::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_InsertInventory::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InsertInventory.object_id)
  return _internal_object_id();
}
inline void S2C_InsertInventory::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_InsertInventory::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_InsertInventory.object_id)
}

// int32 error = 3;
inline void S2C_InsertInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_InsertInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_InsertInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_InsertInventory.error)
  return _internal_error();
}
inline void S2C_InsertInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_InsertInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_InsertInventory.error)
}

// -------------------------------------------------------------------

// C2S_UpdateInventory

// int64 timestamp = 1;
inline void C2S_UpdateInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_UpdateInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_UpdateInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_UpdateInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_UpdateInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_UpdateInventory.timestamp)
}

// .Protocol.SItem item = 2;
inline bool C2S_UpdateInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C2S_UpdateInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& C2S_UpdateInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_UpdateInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateInventory.item)
  return _internal_item();
}
inline void C2S_UpdateInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_UpdateInventory.item)
}
inline ::Protocol::SItem* C2S_UpdateInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_UpdateInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_UpdateInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_UpdateInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* C2S_UpdateInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_UpdateInventory.item)
  return _msg;
}
inline void C2S_UpdateInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_UpdateInventory.item)
}

// -------------------------------------------------------------------

// S2C_UpdateInventory

// int32 error = 1;
inline void S2C_UpdateInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_UpdateInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_UpdateInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateInventory.error)
  return _internal_error();
}
inline void S2C_UpdateInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_UpdateInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateInventory.error)
}

// -------------------------------------------------------------------

// C2S_DeleteInventory

// int64 timestamp = 1;
inline void C2S_DeleteInventory::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_DeleteInventory::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_DeleteInventory::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteInventory.timestamp)
  return _internal_timestamp();
}
inline void C2S_DeleteInventory::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_DeleteInventory::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_DeleteInventory.timestamp)
}

// .Protocol.SItem item = 2;
inline bool C2S_DeleteInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C2S_DeleteInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& C2S_DeleteInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_DeleteInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteInventory.item)
  return _internal_item();
}
inline void C2S_DeleteInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_DeleteInventory.item)
}
inline ::Protocol::SItem* C2S_DeleteInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_DeleteInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_DeleteInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_DeleteInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* C2S_DeleteInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_DeleteInventory.item)
  return _msg;
}
inline void C2S_DeleteInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_DeleteInventory.item)
}

// .Protocol.SVector location = 3;
inline bool C2S_DeleteInventory::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool C2S_DeleteInventory::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& C2S_DeleteInventory::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& C2S_DeleteInventory::location() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_DeleteInventory.location)
  return _internal_location();
}
inline void C2S_DeleteInventory::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_DeleteInventory.location)
}
inline ::Protocol::SVector* C2S_DeleteInventory::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* C2S_DeleteInventory::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_DeleteInventory.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* C2S_DeleteInventory::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* C2S_DeleteInventory::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_DeleteInventory.location)
  return _msg;
}
inline void C2S_DeleteInventory::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_DeleteInventory.location)
}

// -------------------------------------------------------------------

// S2C_DeleteInventory

// int64 remote_id = 1;
inline void S2C_DeleteInventory::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_DeleteInventory::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_DeleteInventory::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteInventory.remote_id)
  return _internal_remote_id();
}
inline void S2C_DeleteInventory::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_DeleteInventory::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeleteInventory.remote_id)
}

// .Protocol.SItem item = 2;
inline bool S2C_DeleteInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool S2C_DeleteInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& S2C_DeleteInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& S2C_DeleteInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteInventory.item)
  return _internal_item();
}
inline void S2C_DeleteInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DeleteInventory.item)
}
inline ::Protocol::SItem* S2C_DeleteInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* S2C_DeleteInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DeleteInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* S2C_DeleteInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* S2C_DeleteInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DeleteInventory.item)
  return _msg;
}
inline void S2C_DeleteInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DeleteInventory.item)
}

// int32 error = 3;
inline void S2C_DeleteInventory::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_DeleteInventory::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_DeleteInventory::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DeleteInventory.error)
  return _internal_error();
}
inline void S2C_DeleteInventory::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_DeleteInventory::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DeleteInventory.error)
}

// -------------------------------------------------------------------

// S2C_RollbackInventory

// int64 remote_id = 1;
inline void S2C_RollbackInventory::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_RollbackInventory::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_RollbackInventory::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RollbackInventory.remote_id)
  return _internal_remote_id();
}
inline void S2C_RollbackInventory::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_RollbackInventory::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RollbackInventory.remote_id)
}

// .Protocol.SItem item = 2;
inline bool S2C_RollbackInventory::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool S2C_RollbackInventory::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::SItem& S2C_RollbackInventory::_internal_item() const {
  const ::Protocol::SItem* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& S2C_RollbackInventory::item() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RollbackInventory.item)
  return _internal_item();
}
inline void S2C_RollbackInventory::unsafe_arena_set_allocated_item(
    ::Protocol::SItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_RollbackInventory.item)
}
inline ::Protocol::SItem* S2C_RollbackInventory::release_item() {
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* S2C_RollbackInventory::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_RollbackInventory.item)
  
  ::Protocol::SItem* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* S2C_RollbackInventory::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::SItem* S2C_RollbackInventory::mutable_item() {
  ::Protocol::SItem* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_RollbackInventory.item)
  return _msg;
}
inline void S2C_RollbackInventory::set_allocated_item(::Protocol::SItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_RollbackInventory.item)
}

// -------------------------------------------------------------------

// C2S_ReplaceEqipment

// int64 timestamp = 1;
inline void C2S_ReplaceEqipment::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_ReplaceEqipment::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_ReplaceEqipment::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.timestamp)
  return _internal_timestamp();
}
inline void C2S_ReplaceEqipment::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_ReplaceEqipment::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReplaceEqipment.timestamp)
}

// .Protocol.SItem insert_inven_item = 2;
inline bool C2S_ReplaceEqipment::_internal_has_insert_inven_item() const {
  return this != internal_default_instance() && _impl_.insert_inven_item_ != nullptr;
}
inline bool C2S_ReplaceEqipment::has_insert_inven_item() const {
  return _internal_has_insert_inven_item();
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::_internal_insert_inven_item() const {
  const ::Protocol::SItem* p = _impl_.insert_inven_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::insert_inven_item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.insert_inven_item)
  return _internal_insert_inven_item();
}
inline void C2S_ReplaceEqipment::unsafe_arena_set_allocated_insert_inven_item(
    ::Protocol::SItem* insert_inven_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_inven_item_);
  }
  _impl_.insert_inven_item_ = insert_inven_item;
  if (insert_inven_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_ReplaceEqipment.insert_inven_item)
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::release_insert_inven_item() {
  
  ::Protocol::SItem* temp = _impl_.insert_inven_item_;
  _impl_.insert_inven_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::unsafe_arena_release_insert_inven_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_ReplaceEqipment.insert_inven_item)
  
  ::Protocol::SItem* temp = _impl_.insert_inven_item_;
  _impl_.insert_inven_item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::_internal_mutable_insert_inven_item() {
  
  if (_impl_.insert_inven_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.insert_inven_item_ = p;
  }
  return _impl_.insert_inven_item_;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::mutable_insert_inven_item() {
  ::Protocol::SItem* _msg = _internal_mutable_insert_inven_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_ReplaceEqipment.insert_inven_item)
  return _msg;
}
inline void C2S_ReplaceEqipment::set_allocated_insert_inven_item(::Protocol::SItem* insert_inven_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_inven_item_);
  }
  if (insert_inven_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_inven_item));
    if (message_arena != submessage_arena) {
      insert_inven_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_inven_item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.insert_inven_item_ = insert_inven_item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_ReplaceEqipment.insert_inven_item)
}

// .Protocol.SItem insert_eqip_item = 3;
inline bool C2S_ReplaceEqipment::_internal_has_insert_eqip_item() const {
  return this != internal_default_instance() && _impl_.insert_eqip_item_ != nullptr;
}
inline bool C2S_ReplaceEqipment::has_insert_eqip_item() const {
  return _internal_has_insert_eqip_item();
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::_internal_insert_eqip_item() const {
  const ::Protocol::SItem* p = _impl_.insert_eqip_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SItem&>(
      ::Protocol::_SItem_default_instance_);
}
inline const ::Protocol::SItem& C2S_ReplaceEqipment::insert_eqip_item() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
  return _internal_insert_eqip_item();
}
inline void C2S_ReplaceEqipment::unsafe_arena_set_allocated_insert_eqip_item(
    ::Protocol::SItem* insert_eqip_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_eqip_item_);
  }
  _impl_.insert_eqip_item_ = insert_eqip_item;
  if (insert_eqip_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::release_insert_eqip_item() {
  
  ::Protocol::SItem* temp = _impl_.insert_eqip_item_;
  _impl_.insert_eqip_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::unsafe_arena_release_insert_eqip_item() {
  // @@protoc_insertion_point(field_release:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
  
  ::Protocol::SItem* temp = _impl_.insert_eqip_item_;
  _impl_.insert_eqip_item_ = nullptr;
  return temp;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::_internal_mutable_insert_eqip_item() {
  
  if (_impl_.insert_eqip_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SItem>(GetArenaForAllocation());
    _impl_.insert_eqip_item_ = p;
  }
  return _impl_.insert_eqip_item_;
}
inline ::Protocol::SItem* C2S_ReplaceEqipment::mutable_insert_eqip_item() {
  ::Protocol::SItem* _msg = _internal_mutable_insert_eqip_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
  return _msg;
}
inline void C2S_ReplaceEqipment::set_allocated_insert_eqip_item(::Protocol::SItem* insert_eqip_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.insert_eqip_item_);
  }
  if (insert_eqip_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_eqip_item));
    if (message_arena != submessage_arena) {
      insert_eqip_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_eqip_item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.insert_eqip_item_ = insert_eqip_item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C2S_ReplaceEqipment.insert_eqip_item)
}

// .Protocol.ECharacterPart part = 4;
inline void C2S_ReplaceEqipment::clear_part() {
  _impl_.part_ = 0;
}
inline ::Protocol::ECharacterPart C2S_ReplaceEqipment::_internal_part() const {
  return static_cast< ::Protocol::ECharacterPart >(_impl_.part_);
}
inline ::Protocol::ECharacterPart C2S_ReplaceEqipment::part() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReplaceEqipment.part)
  return _internal_part();
}
inline void C2S_ReplaceEqipment::_internal_set_part(::Protocol::ECharacterPart value) {
  
  _impl_.part_ = value;
}
inline void C2S_ReplaceEqipment::set_part(::Protocol::ECharacterPart value) {
  _internal_set_part(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReplaceEqipment.part)
}

// -------------------------------------------------------------------

// S2C_ReplaceEqipment

// int64 remote_id = 1;
inline void S2C_ReplaceEqipment::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_ReplaceEqipment::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_ReplaceEqipment::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplaceEqipment.remote_id)
  return _internal_remote_id();
}
inline void S2C_ReplaceEqipment::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_ReplaceEqipment::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReplaceEqipment.remote_id)
}

// .Protocol.SCharacterEqipment eqipment = 2;
inline bool S2C_ReplaceEqipment::_internal_has_eqipment() const {
  return this != internal_default_instance() && _impl_.eqipment_ != nullptr;
}
inline bool S2C_ReplaceEqipment::has_eqipment() const {
  return _internal_has_eqipment();
}
inline const ::Protocol::SCharacterEqipment& S2C_ReplaceEqipment::_internal_eqipment() const {
  const ::Protocol::SCharacterEqipment* p = _impl_.eqipment_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SCharacterEqipment&>(
      ::Protocol::_SCharacterEqipment_default_instance_);
}
inline const ::Protocol::SCharacterEqipment& S2C_ReplaceEqipment::eqipment() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplaceEqipment.eqipment)
  return _internal_eqipment();
}
inline void S2C_ReplaceEqipment::unsafe_arena_set_allocated_eqipment(
    ::Protocol::SCharacterEqipment* eqipment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eqipment_);
  }
  _impl_.eqipment_ = eqipment;
  if (eqipment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_ReplaceEqipment.eqipment)
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::release_eqipment() {
  
  ::Protocol::SCharacterEqipment* temp = _impl_.eqipment_;
  _impl_.eqipment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::unsafe_arena_release_eqipment() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ReplaceEqipment.eqipment)
  
  ::Protocol::SCharacterEqipment* temp = _impl_.eqipment_;
  _impl_.eqipment_ = nullptr;
  return temp;
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::_internal_mutable_eqipment() {
  
  if (_impl_.eqipment_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SCharacterEqipment>(GetArenaForAllocation());
    _impl_.eqipment_ = p;
  }
  return _impl_.eqipment_;
}
inline ::Protocol::SCharacterEqipment* S2C_ReplaceEqipment::mutable_eqipment() {
  ::Protocol::SCharacterEqipment* _msg = _internal_mutable_eqipment();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ReplaceEqipment.eqipment)
  return _msg;
}
inline void S2C_ReplaceEqipment::set_allocated_eqipment(::Protocol::SCharacterEqipment* eqipment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.eqipment_);
  }
  if (eqipment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(eqipment));
    if (message_arena != submessage_arena) {
      eqipment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eqipment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.eqipment_ = eqipment;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ReplaceEqipment.eqipment)
}

// int32 error = 3;
inline void S2C_ReplaceEqipment::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_ReplaceEqipment::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_ReplaceEqipment::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReplaceEqipment.error)
  return _internal_error();
}
inline void S2C_ReplaceEqipment::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_ReplaceEqipment::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReplaceEqipment.error)
}

// -------------------------------------------------------------------

// S2C_LoadSkillTree

// repeated int32 skill_id = 1;
inline int S2C_LoadSkillTree::_internal_skill_id_size() const {
  return _impl_.skill_id_.size();
}
inline int S2C_LoadSkillTree::skill_id_size() const {
  return _internal_skill_id_size();
}
inline void S2C_LoadSkillTree::clear_skill_id() {
  _impl_.skill_id_.Clear();
}
inline int32_t S2C_LoadSkillTree::_internal_skill_id(int index) const {
  return _impl_.skill_id_.Get(index);
}
inline int32_t S2C_LoadSkillTree::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadSkillTree.skill_id)
  return _internal_skill_id(index);
}
inline void S2C_LoadSkillTree::set_skill_id(int index, int32_t value) {
  _impl_.skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadSkillTree.skill_id)
}
inline void S2C_LoadSkillTree::_internal_add_skill_id(int32_t value) {
  _impl_.skill_id_.Add(value);
}
inline void S2C_LoadSkillTree::add_skill_id(int32_t value) {
  _internal_add_skill_id(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadSkillTree.skill_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadSkillTree::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadSkillTree::skill_id() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadSkillTree.skill_id)
  return _internal_skill_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadSkillTree::_internal_mutable_skill_id() {
  return &_impl_.skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadSkillTree::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadSkillTree.skill_id)
  return _internal_mutable_skill_id();
}

// repeated int32 skill_count = 2;
inline int S2C_LoadSkillTree::_internal_skill_count_size() const {
  return _impl_.skill_count_.size();
}
inline int S2C_LoadSkillTree::skill_count_size() const {
  return _internal_skill_count_size();
}
inline void S2C_LoadSkillTree::clear_skill_count() {
  _impl_.skill_count_.Clear();
}
inline int32_t S2C_LoadSkillTree::_internal_skill_count(int index) const {
  return _impl_.skill_count_.Get(index);
}
inline int32_t S2C_LoadSkillTree::skill_count(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadSkillTree.skill_count)
  return _internal_skill_count(index);
}
inline void S2C_LoadSkillTree::set_skill_count(int index, int32_t value) {
  _impl_.skill_count_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadSkillTree.skill_count)
}
inline void S2C_LoadSkillTree::_internal_add_skill_count(int32_t value) {
  _impl_.skill_count_.Add(value);
}
inline void S2C_LoadSkillTree::add_skill_count(int32_t value) {
  _internal_add_skill_count(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_LoadSkillTree.skill_count)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadSkillTree::_internal_skill_count() const {
  return _impl_.skill_count_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_LoadSkillTree::skill_count() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_LoadSkillTree.skill_count)
  return _internal_skill_count();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadSkillTree::_internal_mutable_skill_count() {
  return &_impl_.skill_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_LoadSkillTree::mutable_skill_count() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_LoadSkillTree.skill_count)
  return _internal_mutable_skill_count();
}

// int64 timestamp = 3;
inline void S2C_LoadSkillTree::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_LoadSkillTree::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_LoadSkillTree::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_LoadSkillTree.timestamp)
  return _internal_timestamp();
}
inline void S2C_LoadSkillTree::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_LoadSkillTree::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_LoadSkillTree.timestamp)
}

// -------------------------------------------------------------------

// C2S_UpdateSkillTree

// int32 skill_id = 1;
inline void C2S_UpdateSkillTree::clear_skill_id() {
  _impl_.skill_id_ = 0;
}
inline int32_t C2S_UpdateSkillTree::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline int32_t C2S_UpdateSkillTree::skill_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateSkillTree.skill_id)
  return _internal_skill_id();
}
inline void C2S_UpdateSkillTree::_internal_set_skill_id(int32_t value) {
  
  _impl_.skill_id_ = value;
}
inline void C2S_UpdateSkillTree::set_skill_id(int32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_UpdateSkillTree.skill_id)
}

// int32 skill_count = 2;
inline void C2S_UpdateSkillTree::clear_skill_count() {
  _impl_.skill_count_ = 0;
}
inline int32_t C2S_UpdateSkillTree::_internal_skill_count() const {
  return _impl_.skill_count_;
}
inline int32_t C2S_UpdateSkillTree::skill_count() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateSkillTree.skill_count)
  return _internal_skill_count();
}
inline void C2S_UpdateSkillTree::_internal_set_skill_count(int32_t value) {
  
  _impl_.skill_count_ = value;
}
inline void C2S_UpdateSkillTree::set_skill_count(int32_t value) {
  _internal_set_skill_count(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_UpdateSkillTree.skill_count)
}

// int64 timestamp = 3;
inline void C2S_UpdateSkillTree::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_UpdateSkillTree::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_UpdateSkillTree::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_UpdateSkillTree.timestamp)
  return _internal_timestamp();
}
inline void C2S_UpdateSkillTree::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_UpdateSkillTree::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_UpdateSkillTree.timestamp)
}

// -------------------------------------------------------------------

// S2C_UpdateSkillTree

// int32 error = 1;
inline void S2C_UpdateSkillTree::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_UpdateSkillTree::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_UpdateSkillTree::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateSkillTree.error)
  return _internal_error();
}
inline void S2C_UpdateSkillTree::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_UpdateSkillTree::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateSkillTree.error)
}

// int32 skill_id = 2;
inline void S2C_UpdateSkillTree::clear_skill_id() {
  _impl_.skill_id_ = 0;
}
inline int32_t S2C_UpdateSkillTree::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline int32_t S2C_UpdateSkillTree::skill_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateSkillTree.skill_id)
  return _internal_skill_id();
}
inline void S2C_UpdateSkillTree::_internal_set_skill_id(int32_t value) {
  
  _impl_.skill_id_ = value;
}
inline void S2C_UpdateSkillTree::set_skill_id(int32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateSkillTree.skill_id)
}

// int32 skill_count = 3;
inline void S2C_UpdateSkillTree::clear_skill_count() {
  _impl_.skill_count_ = 0;
}
inline int32_t S2C_UpdateSkillTree::_internal_skill_count() const {
  return _impl_.skill_count_;
}
inline int32_t S2C_UpdateSkillTree::skill_count() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateSkillTree.skill_count)
  return _internal_skill_count();
}
inline void S2C_UpdateSkillTree::_internal_set_skill_count(int32_t value) {
  
  _impl_.skill_count_ = value;
}
inline void S2C_UpdateSkillTree::set_skill_count(int32_t value) {
  _internal_set_skill_count(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateSkillTree.skill_count)
}

// int64 timestamp = 4;
inline void S2C_UpdateSkillTree::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_UpdateSkillTree::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_UpdateSkillTree::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_UpdateSkillTree.timestamp)
  return _internal_timestamp();
}
inline void S2C_UpdateSkillTree::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_UpdateSkillTree::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_UpdateSkillTree.timestamp)
}

// -------------------------------------------------------------------

// C2S_SetUseKeyAction

// int32 key_id = 1;
inline void C2S_SetUseKeyAction::clear_key_id() {
  _impl_.key_id_ = 0;
}
inline int32_t C2S_SetUseKeyAction::_internal_key_id() const {
  return _impl_.key_id_;
}
inline int32_t C2S_SetUseKeyAction::key_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SetUseKeyAction.key_id)
  return _internal_key_id();
}
inline void C2S_SetUseKeyAction::_internal_set_key_id(int32_t value) {
  
  _impl_.key_id_ = value;
}
inline void C2S_SetUseKeyAction::set_key_id(int32_t value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SetUseKeyAction.key_id)
}

// int32 action_id = 2;
inline void C2S_SetUseKeyAction::clear_action_id() {
  _impl_.action_id_ = 0;
}
inline int32_t C2S_SetUseKeyAction::_internal_action_id() const {
  return _impl_.action_id_;
}
inline int32_t C2S_SetUseKeyAction::action_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SetUseKeyAction.action_id)
  return _internal_action_id();
}
inline void C2S_SetUseKeyAction::_internal_set_action_id(int32_t value) {
  
  _impl_.action_id_ = value;
}
inline void C2S_SetUseKeyAction::set_action_id(int32_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SetUseKeyAction.action_id)
}

// .Protocol.EActionType action_type = 3;
inline void C2S_SetUseKeyAction::clear_action_type() {
  _impl_.action_type_ = 0;
}
inline ::Protocol::EActionType C2S_SetUseKeyAction::_internal_action_type() const {
  return static_cast< ::Protocol::EActionType >(_impl_.action_type_);
}
inline ::Protocol::EActionType C2S_SetUseKeyAction::action_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SetUseKeyAction.action_type)
  return _internal_action_type();
}
inline void C2S_SetUseKeyAction::_internal_set_action_type(::Protocol::EActionType value) {
  
  _impl_.action_type_ = value;
}
inline void C2S_SetUseKeyAction::set_action_type(::Protocol::EActionType value) {
  _internal_set_action_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SetUseKeyAction.action_type)
}

// int64 timestamp = 4;
inline void C2S_SetUseKeyAction::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_SetUseKeyAction::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_SetUseKeyAction::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SetUseKeyAction.timestamp)
  return _internal_timestamp();
}
inline void C2S_SetUseKeyAction::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_SetUseKeyAction::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SetUseKeyAction.timestamp)
}

// -------------------------------------------------------------------

// S2C_SetUseKeyAction

// int32 error = 1;
inline void S2C_SetUseKeyAction::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_SetUseKeyAction::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_SetUseKeyAction::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SetUseKeyAction.error)
  return _internal_error();
}
inline void S2C_SetUseKeyAction::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_SetUseKeyAction::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SetUseKeyAction.error)
}

// -------------------------------------------------------------------

// C2S_PressedUseKeyAction

// int32 key_id = 1;
inline void C2S_PressedUseKeyAction::clear_key_id() {
  _impl_.key_id_ = 0;
}
inline int32_t C2S_PressedUseKeyAction::_internal_key_id() const {
  return _impl_.key_id_;
}
inline int32_t C2S_PressedUseKeyAction::key_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PressedUseKeyAction.key_id)
  return _internal_key_id();
}
inline void C2S_PressedUseKeyAction::_internal_set_key_id(int32_t value) {
  
  _impl_.key_id_ = value;
}
inline void C2S_PressedUseKeyAction::set_key_id(int32_t value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PressedUseKeyAction.key_id)
}

// int64 timestamp = 2;
inline void C2S_PressedUseKeyAction::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_PressedUseKeyAction::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_PressedUseKeyAction::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_PressedUseKeyAction.timestamp)
  return _internal_timestamp();
}
inline void C2S_PressedUseKeyAction::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_PressedUseKeyAction::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_PressedUseKeyAction.timestamp)
}

// -------------------------------------------------------------------

// C2S_ReleaseUseKeyAction

// int32 key_id = 1;
inline void C2S_ReleaseUseKeyAction::clear_key_id() {
  _impl_.key_id_ = 0;
}
inline int32_t C2S_ReleaseUseKeyAction::_internal_key_id() const {
  return _impl_.key_id_;
}
inline int32_t C2S_ReleaseUseKeyAction::key_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReleaseUseKeyAction.key_id)
  return _internal_key_id();
}
inline void C2S_ReleaseUseKeyAction::_internal_set_key_id(int32_t value) {
  
  _impl_.key_id_ = value;
}
inline void C2S_ReleaseUseKeyAction::set_key_id(int32_t value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReleaseUseKeyAction.key_id)
}

// int64 timestamp = 2;
inline void C2S_ReleaseUseKeyAction::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C2S_ReleaseUseKeyAction::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C2S_ReleaseUseKeyAction::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_ReleaseUseKeyAction.timestamp)
  return _internal_timestamp();
}
inline void C2S_ReleaseUseKeyAction::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C2S_ReleaseUseKeyAction::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_ReleaseUseKeyAction.timestamp)
}

// -------------------------------------------------------------------

// S2C_ResponseUseKeyAction

// int32 key_id = 1;
inline void S2C_ResponseUseKeyAction::clear_key_id() {
  _impl_.key_id_ = 0;
}
inline int32_t S2C_ResponseUseKeyAction::_internal_key_id() const {
  return _impl_.key_id_;
}
inline int32_t S2C_ResponseUseKeyAction::key_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponseUseKeyAction.key_id)
  return _internal_key_id();
}
inline void S2C_ResponseUseKeyAction::_internal_set_key_id(int32_t value) {
  
  _impl_.key_id_ = value;
}
inline void S2C_ResponseUseKeyAction::set_key_id(int32_t value) {
  _internal_set_key_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponseUseKeyAction.key_id)
}

// int32 error = 2;
inline void S2C_ResponseUseKeyAction::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_ResponseUseKeyAction::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_ResponseUseKeyAction::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponseUseKeyAction.error)
  return _internal_error();
}
inline void S2C_ResponseUseKeyAction::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_ResponseUseKeyAction::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponseUseKeyAction.error)
}

// -------------------------------------------------------------------

// S2C_AppearSkill

// int64 remote_id = 1;
inline void S2C_AppearSkill::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_AppearSkill::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_AppearSkill::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearSkill.remote_id)
  return _internal_remote_id();
}
inline void S2C_AppearSkill::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_AppearSkill::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearSkill.remote_id)
}

// int64 object_id = 2;
inline void S2C_AppearSkill::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_AppearSkill::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_AppearSkill::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearSkill.object_id)
  return _internal_object_id();
}
inline void S2C_AppearSkill::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_AppearSkill::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearSkill.object_id)
}

// int32 skill_id = 3;
inline void S2C_AppearSkill::clear_skill_id() {
  _impl_.skill_id_ = 0;
}
inline int32_t S2C_AppearSkill::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline int32_t S2C_AppearSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearSkill.skill_id)
  return _internal_skill_id();
}
inline void S2C_AppearSkill::_internal_set_skill_id(int32_t value) {
  
  _impl_.skill_id_ = value;
}
inline void S2C_AppearSkill::set_skill_id(int32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearSkill.skill_id)
}

// .Protocol.SVector location = 4;
inline bool S2C_AppearSkill::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_AppearSkill::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_AppearSkill::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_AppearSkill::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearSkill.location)
  return _internal_location();
}
inline void S2C_AppearSkill::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearSkill.location)
}
inline ::Protocol::SVector* S2C_AppearSkill::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_AppearSkill::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearSkill.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_AppearSkill::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_AppearSkill::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearSkill.location)
  return _msg;
}
inline void S2C_AppearSkill::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearSkill.location)
}

// .Protocol.SRotator rotation = 5;
inline bool S2C_AppearSkill::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_AppearSkill::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_AppearSkill::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_AppearSkill::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearSkill.rotation)
  return _internal_rotation();
}
inline void S2C_AppearSkill::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_AppearSkill.rotation)
}
inline ::Protocol::SRotator* S2C_AppearSkill::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearSkill::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_AppearSkill.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_AppearSkill::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_AppearSkill::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_AppearSkill.rotation)
  return _msg;
}
inline void S2C_AppearSkill::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_AppearSkill.rotation)
}

// int64 duration = 6;
inline void S2C_AppearSkill::clear_duration() {
  _impl_.duration_ = int64_t{0};
}
inline int64_t S2C_AppearSkill::_internal_duration() const {
  return _impl_.duration_;
}
inline int64_t S2C_AppearSkill::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_AppearSkill.duration)
  return _internal_duration();
}
inline void S2C_AppearSkill::_internal_set_duration(int64_t value) {
  
  _impl_.duration_ = value;
}
inline void S2C_AppearSkill::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_AppearSkill.duration)
}

// -------------------------------------------------------------------

// S2C_ReactionSkill

// int64 remote_id = 1;
inline void S2C_ReactionSkill::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_ReactionSkill::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_ReactionSkill::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReactionSkill.remote_id)
  return _internal_remote_id();
}
inline void S2C_ReactionSkill::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_ReactionSkill::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReactionSkill.remote_id)
}

// int64 object_id = 2;
inline void S2C_ReactionSkill::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t S2C_ReactionSkill::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t S2C_ReactionSkill::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReactionSkill.object_id)
  return _internal_object_id();
}
inline void S2C_ReactionSkill::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S2C_ReactionSkill::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReactionSkill.object_id)
}

// int32 skill_id = 3;
inline void S2C_ReactionSkill::clear_skill_id() {
  _impl_.skill_id_ = 0;
}
inline int32_t S2C_ReactionSkill::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline int32_t S2C_ReactionSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReactionSkill.skill_id)
  return _internal_skill_id();
}
inline void S2C_ReactionSkill::_internal_set_skill_id(int32_t value) {
  
  _impl_.skill_id_ = value;
}
inline void S2C_ReactionSkill::set_skill_id(int32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReactionSkill.skill_id)
}

// .Protocol.SVector location = 4;
inline bool S2C_ReactionSkill::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_ReactionSkill::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_ReactionSkill::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_ReactionSkill::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReactionSkill.location)
  return _internal_location();
}
inline void S2C_ReactionSkill::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_ReactionSkill.location)
}
inline ::Protocol::SVector* S2C_ReactionSkill::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_ReactionSkill::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ReactionSkill.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_ReactionSkill::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_ReactionSkill::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ReactionSkill.location)
  return _msg;
}
inline void S2C_ReactionSkill::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ReactionSkill.location)
}

// .Protocol.SRotator rotation = 5;
inline bool S2C_ReactionSkill::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_ReactionSkill::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_ReactionSkill::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_ReactionSkill::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReactionSkill.rotation)
  return _internal_rotation();
}
inline void S2C_ReactionSkill::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_ReactionSkill.rotation)
}
inline ::Protocol::SRotator* S2C_ReactionSkill::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_ReactionSkill::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ReactionSkill.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_ReactionSkill::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_ReactionSkill::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ReactionSkill.rotation)
  return _msg;
}
inline void S2C_ReactionSkill::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ReactionSkill.rotation)
}

// int64 duration = 6;
inline void S2C_ReactionSkill::clear_duration() {
  _impl_.duration_ = int64_t{0};
}
inline int64_t S2C_ReactionSkill::_internal_duration() const {
  return _impl_.duration_;
}
inline int64_t S2C_ReactionSkill::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ReactionSkill.duration)
  return _internal_duration();
}
inline void S2C_ReactionSkill::_internal_set_duration(int64_t value) {
  
  _impl_.duration_ = value;
}
inline void S2C_ReactionSkill::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ReactionSkill.duration)
}

// -------------------------------------------------------------------

// S2C_EndReactionSkill

// int64 remote_id = 1;
inline void S2C_EndReactionSkill::clear_remote_id() {
  _impl_.remote_id_ = int64_t{0};
}
inline int64_t S2C_EndReactionSkill::_internal_remote_id() const {
  return _impl_.remote_id_;
}
inline int64_t S2C_EndReactionSkill::remote_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EndReactionSkill.remote_id)
  return _internal_remote_id();
}
inline void S2C_EndReactionSkill::_internal_set_remote_id(int64_t value) {
  
  _impl_.remote_id_ = value;
}
inline void S2C_EndReactionSkill::set_remote_id(int64_t value) {
  _internal_set_remote_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EndReactionSkill.remote_id)
}

// int64 timestamp = 2;
inline void S2C_EndReactionSkill::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S2C_EndReactionSkill::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S2C_EndReactionSkill::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EndReactionSkill.timestamp)
  return _internal_timestamp();
}
inline void S2C_EndReactionSkill::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S2C_EndReactionSkill::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EndReactionSkill.timestamp)
}

// -------------------------------------------------------------------

// S2C_SkillCoolTime

// repeated int32 skill_id = 1;
inline int S2C_SkillCoolTime::_internal_skill_id_size() const {
  return _impl_.skill_id_.size();
}
inline int S2C_SkillCoolTime::skill_id_size() const {
  return _internal_skill_id_size();
}
inline void S2C_SkillCoolTime::clear_skill_id() {
  _impl_.skill_id_.Clear();
}
inline int32_t S2C_SkillCoolTime::_internal_skill_id(int index) const {
  return _impl_.skill_id_.Get(index);
}
inline int32_t S2C_SkillCoolTime::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SkillCoolTime.skill_id)
  return _internal_skill_id(index);
}
inline void S2C_SkillCoolTime::set_skill_id(int index, int32_t value) {
  _impl_.skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SkillCoolTime.skill_id)
}
inline void S2C_SkillCoolTime::_internal_add_skill_id(int32_t value) {
  _impl_.skill_id_.Add(value);
}
inline void S2C_SkillCoolTime::add_skill_id(int32_t value) {
  _internal_add_skill_id(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_SkillCoolTime.skill_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_SkillCoolTime::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S2C_SkillCoolTime::skill_id() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_SkillCoolTime.skill_id)
  return _internal_skill_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_SkillCoolTime::_internal_mutable_skill_id() {
  return &_impl_.skill_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S2C_SkillCoolTime::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_SkillCoolTime.skill_id)
  return _internal_mutable_skill_id();
}

// repeated int64 skill_time = 2;
inline int S2C_SkillCoolTime::_internal_skill_time_size() const {
  return _impl_.skill_time_.size();
}
inline int S2C_SkillCoolTime::skill_time_size() const {
  return _internal_skill_time_size();
}
inline void S2C_SkillCoolTime::clear_skill_time() {
  _impl_.skill_time_.Clear();
}
inline int64_t S2C_SkillCoolTime::_internal_skill_time(int index) const {
  return _impl_.skill_time_.Get(index);
}
inline int64_t S2C_SkillCoolTime::skill_time(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SkillCoolTime.skill_time)
  return _internal_skill_time(index);
}
inline void S2C_SkillCoolTime::set_skill_time(int index, int64_t value) {
  _impl_.skill_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SkillCoolTime.skill_time)
}
inline void S2C_SkillCoolTime::_internal_add_skill_time(int64_t value) {
  _impl_.skill_time_.Add(value);
}
inline void S2C_SkillCoolTime::add_skill_time(int64_t value) {
  _internal_add_skill_time(value);
  // @@protoc_insertion_point(field_add:Protocol.S2C_SkillCoolTime.skill_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
S2C_SkillCoolTime::_internal_skill_time() const {
  return _impl_.skill_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
S2C_SkillCoolTime::skill_time() const {
  // @@protoc_insertion_point(field_list:Protocol.S2C_SkillCoolTime.skill_time)
  return _internal_skill_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
S2C_SkillCoolTime::_internal_mutable_skill_time() {
  return &_impl_.skill_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
S2C_SkillCoolTime::mutable_skill_time() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S2C_SkillCoolTime.skill_time)
  return _internal_mutable_skill_time();
}

// -------------------------------------------------------------------

// S2C_DebugBox

// .Protocol.SVector start_location = 1;
inline bool S2C_DebugBox::_internal_has_start_location() const {
  return this != internal_default_instance() && _impl_.start_location_ != nullptr;
}
inline bool S2C_DebugBox::has_start_location() const {
  return _internal_has_start_location();
}
inline const ::Protocol::SVector& S2C_DebugBox::_internal_start_location() const {
  const ::Protocol::SVector* p = _impl_.start_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_DebugBox::start_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugBox.start_location)
  return _internal_start_location();
}
inline void S2C_DebugBox::unsafe_arena_set_allocated_start_location(
    ::Protocol::SVector* start_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_location_);
  }
  _impl_.start_location_ = start_location;
  if (start_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DebugBox.start_location)
}
inline ::Protocol::SVector* S2C_DebugBox::release_start_location() {
  
  ::Protocol::SVector* temp = _impl_.start_location_;
  _impl_.start_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_DebugBox::unsafe_arena_release_start_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DebugBox.start_location)
  
  ::Protocol::SVector* temp = _impl_.start_location_;
  _impl_.start_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_DebugBox::_internal_mutable_start_location() {
  
  if (_impl_.start_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.start_location_ = p;
  }
  return _impl_.start_location_;
}
inline ::Protocol::SVector* S2C_DebugBox::mutable_start_location() {
  ::Protocol::SVector* _msg = _internal_mutable_start_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DebugBox.start_location)
  return _msg;
}
inline void S2C_DebugBox::set_allocated_start_location(::Protocol::SVector* start_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_location_);
  }
  if (start_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_location));
    if (message_arena != submessage_arena) {
      start_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_location_ = start_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DebugBox.start_location)
}

// .Protocol.SVector end_location = 2;
inline bool S2C_DebugBox::_internal_has_end_location() const {
  return this != internal_default_instance() && _impl_.end_location_ != nullptr;
}
inline bool S2C_DebugBox::has_end_location() const {
  return _internal_has_end_location();
}
inline const ::Protocol::SVector& S2C_DebugBox::_internal_end_location() const {
  const ::Protocol::SVector* p = _impl_.end_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_DebugBox::end_location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugBox.end_location)
  return _internal_end_location();
}
inline void S2C_DebugBox::unsafe_arena_set_allocated_end_location(
    ::Protocol::SVector* end_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_location_);
  }
  _impl_.end_location_ = end_location;
  if (end_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DebugBox.end_location)
}
inline ::Protocol::SVector* S2C_DebugBox::release_end_location() {
  
  ::Protocol::SVector* temp = _impl_.end_location_;
  _impl_.end_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_DebugBox::unsafe_arena_release_end_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DebugBox.end_location)
  
  ::Protocol::SVector* temp = _impl_.end_location_;
  _impl_.end_location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_DebugBox::_internal_mutable_end_location() {
  
  if (_impl_.end_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.end_location_ = p;
  }
  return _impl_.end_location_;
}
inline ::Protocol::SVector* S2C_DebugBox::mutable_end_location() {
  ::Protocol::SVector* _msg = _internal_mutable_end_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DebugBox.end_location)
  return _msg;
}
inline void S2C_DebugBox::set_allocated_end_location(::Protocol::SVector* end_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_location_);
  }
  if (end_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_location));
    if (message_arena != submessage_arena) {
      end_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_location_ = end_location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DebugBox.end_location)
}

// .Protocol.SVector extent = 3;
inline bool S2C_DebugBox::_internal_has_extent() const {
  return this != internal_default_instance() && _impl_.extent_ != nullptr;
}
inline bool S2C_DebugBox::has_extent() const {
  return _internal_has_extent();
}
inline const ::Protocol::SVector& S2C_DebugBox::_internal_extent() const {
  const ::Protocol::SVector* p = _impl_.extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_DebugBox::extent() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugBox.extent)
  return _internal_extent();
}
inline void S2C_DebugBox::unsafe_arena_set_allocated_extent(
    ::Protocol::SVector* extent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extent_);
  }
  _impl_.extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DebugBox.extent)
}
inline ::Protocol::SVector* S2C_DebugBox::release_extent() {
  
  ::Protocol::SVector* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_DebugBox::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DebugBox.extent)
  
  ::Protocol::SVector* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_DebugBox::_internal_mutable_extent() {
  
  if (_impl_.extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.extent_ = p;
  }
  return _impl_.extent_;
}
inline ::Protocol::SVector* S2C_DebugBox::mutable_extent() {
  ::Protocol::SVector* _msg = _internal_mutable_extent();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DebugBox.extent)
  return _msg;
}
inline void S2C_DebugBox::set_allocated_extent(::Protocol::SVector* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extent_);
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extent));
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DebugBox.extent)
}

// .Protocol.SRotator rotation = 4;
inline bool S2C_DebugBox::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S2C_DebugBox::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::SRotator& S2C_DebugBox::_internal_rotation() const {
  const ::Protocol::SRotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SRotator&>(
      ::Protocol::_SRotator_default_instance_);
}
inline const ::Protocol::SRotator& S2C_DebugBox::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugBox.rotation)
  return _internal_rotation();
}
inline void S2C_DebugBox::unsafe_arena_set_allocated_rotation(
    ::Protocol::SRotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DebugBox.rotation)
}
inline ::Protocol::SRotator* S2C_DebugBox::release_rotation() {
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SRotator* S2C_DebugBox::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DebugBox.rotation)
  
  ::Protocol::SRotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::SRotator* S2C_DebugBox::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SRotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::SRotator* S2C_DebugBox::mutable_rotation() {
  ::Protocol::SRotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DebugBox.rotation)
  return _msg;
}
inline void S2C_DebugBox::set_allocated_rotation(::Protocol::SRotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DebugBox.rotation)
}

// float duration = 5;
inline void S2C_DebugBox::clear_duration() {
  _impl_.duration_ = 0;
}
inline float S2C_DebugBox::_internal_duration() const {
  return _impl_.duration_;
}
inline float S2C_DebugBox::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugBox.duration)
  return _internal_duration();
}
inline void S2C_DebugBox::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void S2C_DebugBox::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DebugBox.duration)
}

// -------------------------------------------------------------------

// S2C_DebugCircle

// .Protocol.SVector location = 1;
inline bool S2C_DebugCircle::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool S2C_DebugCircle::has_location() const {
  return _internal_has_location();
}
inline const ::Protocol::SVector& S2C_DebugCircle::_internal_location() const {
  const ::Protocol::SVector* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::SVector&>(
      ::Protocol::_SVector_default_instance_);
}
inline const ::Protocol::SVector& S2C_DebugCircle::location() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugCircle.location)
  return _internal_location();
}
inline void S2C_DebugCircle::unsafe_arena_set_allocated_location(
    ::Protocol::SVector* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S2C_DebugCircle.location)
}
inline ::Protocol::SVector* S2C_DebugCircle::release_location() {
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::SVector* S2C_DebugCircle::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_DebugCircle.location)
  
  ::Protocol::SVector* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::Protocol::SVector* S2C_DebugCircle::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::SVector>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::Protocol::SVector* S2C_DebugCircle::mutable_location() {
  ::Protocol::SVector* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_DebugCircle.location)
  return _msg;
}
inline void S2C_DebugCircle::set_allocated_location(::Protocol::SVector* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_DebugCircle.location)
}

// float radius = 2;
inline void S2C_DebugCircle::clear_radius() {
  _impl_.radius_ = 0;
}
inline float S2C_DebugCircle::_internal_radius() const {
  return _impl_.radius_;
}
inline float S2C_DebugCircle::radius() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugCircle.radius)
  return _internal_radius();
}
inline void S2C_DebugCircle::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void S2C_DebugCircle::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DebugCircle.radius)
}

// float duration = 3;
inline void S2C_DebugCircle::clear_duration() {
  _impl_.duration_ = 0;
}
inline float S2C_DebugCircle::_internal_duration() const {
  return _impl_.duration_;
}
inline float S2C_DebugCircle::duration() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_DebugCircle.duration)
  return _internal_duration();
}
inline void S2C_DebugCircle::_internal_set_duration(float value) {
  
  _impl_.duration_ = value;
}
inline void S2C_DebugCircle::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_DebugCircle.duration)
}

// -------------------------------------------------------------------

// C2S_RequestEnterDungeon

// int32 dungeon_type = 1;
inline void C2S_RequestEnterDungeon::clear_dungeon_type() {
  _impl_.dungeon_type_ = 0;
}
inline int32_t C2S_RequestEnterDungeon::_internal_dungeon_type() const {
  return _impl_.dungeon_type_;
}
inline int32_t C2S_RequestEnterDungeon::dungeon_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_RequestEnterDungeon.dungeon_type)
  return _internal_dungeon_type();
}
inline void C2S_RequestEnterDungeon::_internal_set_dungeon_type(int32_t value) {
  
  _impl_.dungeon_type_ = value;
}
inline void C2S_RequestEnterDungeon::set_dungeon_type(int32_t value) {
  _internal_set_dungeon_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_RequestEnterDungeon.dungeon_type)
}

// -------------------------------------------------------------------

// S2C_RequestEnterDungeon

// int32 error = 1;
inline void S2C_RequestEnterDungeon::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_RequestEnterDungeon::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_RequestEnterDungeon::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_RequestEnterDungeon.error)
  return _internal_error();
}
inline void S2C_RequestEnterDungeon::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_RequestEnterDungeon::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_RequestEnterDungeon.error)
}

// -------------------------------------------------------------------

// S2C_ResponseEnterDungeon

// int32 error = 1;
inline void S2C_ResponseEnterDungeon::clear_error() {
  _impl_.error_ = 0;
}
inline int32_t S2C_ResponseEnterDungeon::_internal_error() const {
  return _impl_.error_;
}
inline int32_t S2C_ResponseEnterDungeon::error() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponseEnterDungeon.error)
  return _internal_error();
}
inline void S2C_ResponseEnterDungeon::_internal_set_error(int32_t value) {
  
  _impl_.error_ = value;
}
inline void S2C_ResponseEnterDungeon::set_error(int32_t value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponseEnterDungeon.error)
}

// int32 dungeon_id = 2;
inline void S2C_ResponseEnterDungeon::clear_dungeon_id() {
  _impl_.dungeon_id_ = 0;
}
inline int32_t S2C_ResponseEnterDungeon::_internal_dungeon_id() const {
  return _impl_.dungeon_id_;
}
inline int32_t S2C_ResponseEnterDungeon::dungeon_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponseEnterDungeon.dungeon_id)
  return _internal_dungeon_id();
}
inline void S2C_ResponseEnterDungeon::_internal_set_dungeon_id(int32_t value) {
  
  _impl_.dungeon_id_ = value;
}
inline void S2C_ResponseEnterDungeon::set_dungeon_id(int32_t value) {
  _internal_set_dungeon_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponseEnterDungeon.dungeon_id)
}

// bytes level = 3;
inline void S2C_ResponseEnterDungeon::clear_level() {
  _impl_.level_.ClearToEmpty();
}
inline const std::string& S2C_ResponseEnterDungeon::level() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_ResponseEnterDungeon.level)
  return _internal_level();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_ResponseEnterDungeon::set_level(ArgT0&& arg0, ArgT... args) {
 
 _impl_.level_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_ResponseEnterDungeon.level)
}
inline std::string* S2C_ResponseEnterDungeon::mutable_level() {
  std::string* _s = _internal_mutable_level();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_ResponseEnterDungeon.level)
  return _s;
}
inline const std::string& S2C_ResponseEnterDungeon::_internal_level() const {
  return _impl_.level_.Get();
}
inline void S2C_ResponseEnterDungeon::_internal_set_level(const std::string& value) {
  
  _impl_.level_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_ResponseEnterDungeon::_internal_mutable_level() {
  
  return _impl_.level_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_ResponseEnterDungeon::release_level() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_ResponseEnterDungeon.level)
  return _impl_.level_.Release();
}
inline void S2C_ResponseEnterDungeon::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  _impl_.level_.SetAllocated(level, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.level_.IsDefault()) {
    _impl_.level_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_ResponseEnterDungeon.level)
}

// -------------------------------------------------------------------

// C2S_CompleteLoadDungeon

// int32 dungeon_id = 1;
inline void C2S_CompleteLoadDungeon::clear_dungeon_id() {
  _impl_.dungeon_id_ = 0;
}
inline int32_t C2S_CompleteLoadDungeon::_internal_dungeon_id() const {
  return _impl_.dungeon_id_;
}
inline int32_t C2S_CompleteLoadDungeon::dungeon_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_CompleteLoadDungeon.dungeon_id)
  return _internal_dungeon_id();
}
inline void C2S_CompleteLoadDungeon::_internal_set_dungeon_id(int32_t value) {
  
  _impl_.dungeon_id_ = value;
}
inline void C2S_CompleteLoadDungeon::set_dungeon_id(int32_t value) {
  _internal_set_dungeon_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_CompleteLoadDungeon.dungeon_id)
}

// -------------------------------------------------------------------

// S2C_WaitingLoadDungeon

// int32 max_number = 1;
inline void S2C_WaitingLoadDungeon::clear_max_number() {
  _impl_.max_number_ = 0;
}
inline int32_t S2C_WaitingLoadDungeon::_internal_max_number() const {
  return _impl_.max_number_;
}
inline int32_t S2C_WaitingLoadDungeon::max_number() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_WaitingLoadDungeon.max_number)
  return _internal_max_number();
}
inline void S2C_WaitingLoadDungeon::_internal_set_max_number(int32_t value) {
  
  _impl_.max_number_ = value;
}
inline void S2C_WaitingLoadDungeon::set_max_number(int32_t value) {
  _internal_set_max_number(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_WaitingLoadDungeon.max_number)
}

// int32 least_number = 2;
inline void S2C_WaitingLoadDungeon::clear_least_number() {
  _impl_.least_number_ = 0;
}
inline int32_t S2C_WaitingLoadDungeon::_internal_least_number() const {
  return _impl_.least_number_;
}
inline int32_t S2C_WaitingLoadDungeon::least_number() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_WaitingLoadDungeon.least_number)
  return _internal_least_number();
}
inline void S2C_WaitingLoadDungeon::_internal_set_least_number(int32_t value) {
  
  _impl_.least_number_ = value;
}
inline void S2C_WaitingLoadDungeon::set_least_number(int32_t value) {
  _internal_set_least_number(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_WaitingLoadDungeon.least_number)
}

// -------------------------------------------------------------------

// S2C_CompleteLoadDungeon

// -------------------------------------------------------------------

// S2C_EnterPortal

// bytes title = 1;
inline void S2C_EnterPortal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& S2C_EnterPortal::title() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPortal.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S2C_EnterPortal::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPortal.title)
}
inline std::string* S2C_EnterPortal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:Protocol.S2C_EnterPortal.title)
  return _s;
}
inline const std::string& S2C_EnterPortal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void S2C_EnterPortal::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* S2C_EnterPortal::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* S2C_EnterPortal::release_title() {
  // @@protoc_insertion_point(field_release:Protocol.S2C_EnterPortal.title)
  return _impl_.title_.Release();
}
inline void S2C_EnterPortal::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S2C_EnterPortal.title)
}

// int64 time = 2;
inline void S2C_EnterPortal::clear_time() {
  _impl_.time_ = int64_t{0};
}
inline int64_t S2C_EnterPortal::_internal_time() const {
  return _impl_.time_;
}
inline int64_t S2C_EnterPortal::time() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_EnterPortal.time)
  return _internal_time();
}
inline void S2C_EnterPortal::_internal_set_time(int64_t value) {
  
  _impl_.time_ = value;
}
inline void S2C_EnterPortal::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_EnterPortal.time)
}

// -------------------------------------------------------------------

// S2C_LeavePortal

// -------------------------------------------------------------------

// S2C_PlaySequence

// int32 sequence = 1;
inline void S2C_PlaySequence::clear_sequence() {
  _impl_.sequence_ = 0;
}
inline int32_t S2C_PlaySequence::_internal_sequence() const {
  return _impl_.sequence_;
}
inline int32_t S2C_PlaySequence::sequence() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlaySequence.sequence)
  return _internal_sequence();
}
inline void S2C_PlaySequence::_internal_set_sequence(int32_t value) {
  
  _impl_.sequence_ = value;
}
inline void S2C_PlaySequence::set_sequence(int32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlaySequence.sequence)
}

// int32 max_number = 2;
inline void S2C_PlaySequence::clear_max_number() {
  _impl_.max_number_ = 0;
}
inline int32_t S2C_PlaySequence::_internal_max_number() const {
  return _impl_.max_number_;
}
inline int32_t S2C_PlaySequence::max_number() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_PlaySequence.max_number)
  return _internal_max_number();
}
inline void S2C_PlaySequence::_internal_set_max_number(int32_t value) {
  
  _impl_.max_number_ = value;
}
inline void S2C_PlaySequence::set_max_number(int32_t value) {
  _internal_set_max_number(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_PlaySequence.max_number)
}

// -------------------------------------------------------------------

// C2S_SkipSequence

// int32 dungeon_id = 1;
inline void C2S_SkipSequence::clear_dungeon_id() {
  _impl_.dungeon_id_ = 0;
}
inline int32_t C2S_SkipSequence::_internal_dungeon_id() const {
  return _impl_.dungeon_id_;
}
inline int32_t C2S_SkipSequence::dungeon_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C2S_SkipSequence.dungeon_id)
  return _internal_dungeon_id();
}
inline void C2S_SkipSequence::_internal_set_dungeon_id(int32_t value) {
  
  _impl_.dungeon_id_ = value;
}
inline void C2S_SkipSequence::set_dungeon_id(int32_t value) {
  _internal_set_dungeon_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C2S_SkipSequence.dungeon_id)
}

// -------------------------------------------------------------------

// S2C_SkipSequence

// int32 max_number = 1;
inline void S2C_SkipSequence::clear_max_number() {
  _impl_.max_number_ = 0;
}
inline int32_t S2C_SkipSequence::_internal_max_number() const {
  return _impl_.max_number_;
}
inline int32_t S2C_SkipSequence::max_number() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SkipSequence.max_number)
  return _internal_max_number();
}
inline void S2C_SkipSequence::_internal_set_max_number(int32_t value) {
  
  _impl_.max_number_ = value;
}
inline void S2C_SkipSequence::set_max_number(int32_t value) {
  _internal_set_max_number(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SkipSequence.max_number)
}

// int32 least_number = 2;
inline void S2C_SkipSequence::clear_least_number() {
  _impl_.least_number_ = 0;
}
inline int32_t S2C_SkipSequence::_internal_least_number() const {
  return _impl_.least_number_;
}
inline int32_t S2C_SkipSequence::least_number() const {
  // @@protoc_insertion_point(field_get:Protocol.S2C_SkipSequence.least_number)
  return _internal_least_number();
}
inline void S2C_SkipSequence::_internal_set_least_number(int32_t value) {
  
  _impl_.least_number_ = value;
}
inline void S2C_SkipSequence::set_least_number(int32_t value) {
  _internal_set_least_number(value);
  // @@protoc_insertion_point(field_set:Protocol.S2C_SkipSequence.least_number)
}

// -------------------------------------------------------------------

// S2C_EndSequence

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GamePacket_2eproto
