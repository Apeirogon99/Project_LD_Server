#if defined(_MSC_VER)
		 #pragma warning (disable:4946) // reinterpret_cast used between related classes: 'class1' and 'class2'
#endif

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PacketEnum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PacketEnum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PacketEnum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PacketEnum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PacketEnum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PacketEnum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ERace : int {
  Race_Unspecified = 0,
  Race_Men = 1,
  Race_Women = 2,
  Race_Orc = 3,
  ERace_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ERace_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ERace_IsValid(int value);
constexpr ERace ERace_MIN = Race_Unspecified;
constexpr ERace ERace_MAX = Race_Orc;
constexpr int ERace_ARRAYSIZE = ERace_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERace_descriptor();
template<typename T>
inline const std::string& ERace_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERace>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERace_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERace_descriptor(), enum_t_value);
}
inline bool ERace_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERace* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERace>(
    ERace_descriptor(), name, value);
}
enum ECharacterClass : int {
  CClass_Unspecified = 0,
  CClass_Warrior = 1,
  CClass_Wizard = 2,
  ECharacterClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ECharacterClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ECharacterClass_IsValid(int value);
constexpr ECharacterClass ECharacterClass_MIN = CClass_Unspecified;
constexpr ECharacterClass ECharacterClass_MAX = CClass_Wizard;
constexpr int ECharacterClass_ARRAYSIZE = ECharacterClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECharacterClass_descriptor();
template<typename T>
inline const std::string& ECharacterClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECharacterClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECharacterClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECharacterClass_descriptor(), enum_t_value);
}
inline bool ECharacterClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECharacterClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECharacterClass>(
    ECharacterClass_descriptor(), name, value);
}
enum ECharacterPart : int {
  Part_Unspecified = 0,
  Part_helmet = 1,
  Part_Shoulders = 2,
  Part_Chest = 3,
  Part_Bracers = 4,
  Part_Hands = 5,
  Part_Pants = 6,
  Part_Boots = 7,
  Part_Weapon_l = 8,
  Part_Weapon_r = 9,
  ECharacterPart_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ECharacterPart_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ECharacterPart_IsValid(int value);
constexpr ECharacterPart ECharacterPart_MIN = Part_Unspecified;
constexpr ECharacterPart ECharacterPart_MAX = Part_Weapon_r;
constexpr int ECharacterPart_ARRAYSIZE = ECharacterPart_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECharacterPart_descriptor();
template<typename T>
inline const std::string& ECharacterPart_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECharacterPart>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECharacterPart_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECharacterPart_descriptor(), enum_t_value);
}
inline bool ECharacterPart_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECharacterPart* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECharacterPart>(
    ECharacterPart_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ERace> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ERace>() {
  return ::Protocol::ERace_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ECharacterClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ECharacterClass>() {
  return ::Protocol::ECharacterClass_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ECharacterPart> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ECharacterPart>() {
  return ::Protocol::ECharacterPart_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PacketEnum_2eproto
